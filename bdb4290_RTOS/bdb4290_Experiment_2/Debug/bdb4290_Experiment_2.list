
bdb4290_Experiment_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006240  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006458  08006458  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006458  08006458  00016458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006460  08006460  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004408  20000010  08006478  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004418  08006478  00024418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d61  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000341e  00000000  00000000  00038da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001718  00000000  00000000  0003c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  0003d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018839  00000000  00000000  0003ee88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001197a  00000000  00000000  000576c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099530  00000000  00000000  0006903b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010256b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000621c  00000000  00000000  001025e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063c8 	.word	0x080063c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080063c8 	.word	0x080063c8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08e      	sub	sp, #56	; 0x38
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd9d 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f83b 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9a1 	bl	8000868 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8bb 	bl	80006a0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f8e7 	bl	80006fc <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f913 	bl	8000758 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f941 	bl	80007b8 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000536:	f000 f975 	bl	8000824 <MX_USB_OTG_FS_HCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FlashGreenLedTa */
  osThreadDef(FlashGreenLedTa, StartFlashGreenLedTask, osPriorityNormal, 0, 128);
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <main+0x74>)
 800053c:	f107 041c 	add.w	r4, r7, #28
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashGreenLedTaHandle = osThreadCreate(osThread(FlashGreenLedTa), NULL);
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f004 fc67 	bl	8004e28 <osThreadCreate>
 800055a:	4602      	mov	r2, r0
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <main+0x78>)
 800055e:	601a      	str	r2, [r3, #0]

  /* definition and creation of FlashRedLedTask */
  osThreadDef(FlashRedLedTask, StartRedFlashLedTask, osPriorityNormal, 0, 128);
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <main+0x7c>)
 8000562:	463c      	mov	r4, r7
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashRedLedTaskHandle = osThreadCreate(osThread(FlashRedLedTask), NULL);
 8000572:	463b      	mov	r3, r7
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fc56 	bl	8004e28 <osThreadCreate>
 800057c:	4602      	mov	r2, r0
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <main+0x80>)
 8000580:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000582:	f004 fc4a 	bl	8004e1a <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000586:	e7fe      	b.n	8000586 <main+0x72>
 8000588:	080063f0 	.word	0x080063f0
 800058c:	20004020 	.word	0x20004020
 8000590:	0800641c 	.word	0x0800641c
 8000594:	200043d0 	.word	0x200043d0

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 ff06 	bl	80063b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b31      	ldr	r3, [pc, #196]	; (8000698 <SystemClock_Config+0x100>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	4a30      	ldr	r2, [pc, #192]	; (8000698 <SystemClock_Config+0x100>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	6413      	str	r3, [r2, #64]	; 0x40
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <SystemClock_Config+0x100>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemClock_Config+0x104>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemClock_Config+0x104>)
 80005f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0x104>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800060a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000614:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000618:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061a:	2304      	movs	r3, #4
 800061c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800061e:	23c0      	movs	r3, #192	; 0xc0
 8000620:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000622:	2304      	movs	r3, #4
 8000624:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000626:	2308      	movs	r3, #8
 8000628:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800062e:	4618      	mov	r0, r3
 8000630:	f002 ffd6 	bl	80035e0 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800063a:	f000 fa53 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000658:	2103      	movs	r1, #3
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fa30 	bl	8003ac0 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000666:	f000 fa3d 	bl	8000ae4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800066a:	2301      	movs	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800066e:	23c8      	movs	r3, #200	; 0xc8
 8000670:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000672:	2305      	movs	r3, #5
 8000674:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fc42 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800068a:	f000 fa2b 	bl	8000ae4 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3768      	adds	r7, #104	; 0x68
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f002 f9a7 	bl	8002a30 <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f9fc 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20003fcc 	.word	0x20003fcc
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2S2_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2S2_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2S2_Init+0x50>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2S2_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_I2S2_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2S2_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2S2_Init+0x50>)
 8000722:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <MX_I2S2_Init+0x58>)
 8000724:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2S2_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2S2_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2S2_Init+0x50>)
 8000734:	2201      	movs	r2, #1
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2S2_Init+0x50>)
 800073a:	f002 fab1 	bl	8002ca0 <HAL_I2S_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f9ce 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20004340 	.word	0x20004340
 8000750:	40003800 	.word	0x40003800
 8000754:	00017700 	.word	0x00017700

08000758 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_I2S3_Init+0x54>)
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <MX_I2S3_Init+0x58>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2S3_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_I2S3_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_I2S3_Init+0x54>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_I2S3_Init+0x54>)
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <MX_I2S3_Init+0x5c>)
 8000782:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_I2S3_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_I2S3_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_I2S3_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_I2S3_Init+0x54>)
 8000798:	f002 fa82 	bl	8002ca0 <HAL_I2S_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007a2:	f000 f99f 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20004388 	.word	0x20004388
 80007b0:	40003c00 	.word	0x40003c00
 80007b4:	00017700 	.word	0x00017700

080007b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_SPI1_Init+0x64>)
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_SPI1_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_SPI1_Init+0x64>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI1_Init+0x64>)
 8000804:	220a      	movs	r2, #10
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_SPI1_Init+0x64>)
 800080a:	f003 fccb 	bl	80041a4 <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 f966 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20004024 	.word	0x20004024
 8000820:	40013000 	.word	0x40013000

08000824 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800082a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000832:	2208      	movs	r2, #8
 8000834:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000844:	2202      	movs	r2, #2
 8000846:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000850:	f000 fefe 	bl	8001650 <HAL_HCD_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 800085a:	f000 f943 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000407c 	.word	0x2000407c

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	4b60      	ldr	r3, [pc, #384]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a5f      	ldr	r2, [pc, #380]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b5d      	ldr	r3, [pc, #372]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4b59      	ldr	r3, [pc, #356]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b56      	ldr	r3, [pc, #344]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a51      	ldr	r2, [pc, #324]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b4f      	ldr	r3, [pc, #316]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a4a      	ldr	r2, [pc, #296]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a43      	ldr	r2, [pc, #268]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a3c      	ldr	r2, [pc, #240]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <MX_GPIO_Init+0x19c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2108      	movs	r1, #8
 800092a:	4837      	ldr	r0, [pc, #220]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 800092c:	f000 fe5c 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2101      	movs	r1, #1
 8000934:	4835      	ldr	r0, [pc, #212]	; (8000a0c <MX_GPIO_Init+0x1a4>)
 8000936:	f000 fe57 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|LD3_Pin|Red_LED_Pin|LD6_Pin 
 800093a:	2200      	movs	r2, #0
 800093c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000940:	4833      	ldr	r0, [pc, #204]	; (8000a10 <MX_GPIO_Init+0x1a8>)
 8000942:	f000 fe51 	bl	80015e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000946:	2304      	movs	r3, #4
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	482b      	ldr	r0, [pc, #172]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 800095a:	f000 fcc3 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800095e:	2308      	movs	r3, #8
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4824      	ldr	r0, [pc, #144]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000976:	f000 fcb5 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800097a:	2332      	movs	r3, #50	; 0x32
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <MX_GPIO_Init+0x1ac>)
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	481e      	ldr	r0, [pc, #120]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 800098e:	f000 fca9 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4818      	ldr	r0, [pc, #96]	; (8000a0c <MX_GPIO_Init+0x1a4>)
 80009aa:	f000 fc9b 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_GPIO_Init+0x1ac>)
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4815      	ldr	r0, [pc, #84]	; (8000a18 <MX_GPIO_Init+0x1b0>)
 80009c2:	f000 fc8f 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin LD3_Pin Red_LED_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|LD3_Pin|Red_LED_Pin|LD6_Pin 
 80009c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_GPIO_Init+0x1a8>)
 80009e0:	f000 fc80 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e4:	2320      	movs	r3, #32
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <MX_GPIO_Init+0x1a8>)
 80009f8:	f000 fc74 	bl	80012e4 <HAL_GPIO_Init>

}
 80009fc:	bf00      	nop
 80009fe:	3730      	adds	r7, #48	; 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	10120000 	.word	0x10120000
 8000a18:	40020000 	.word	0x40020000

08000a1c <StartFlashGreenLedTask>:
  * @brief  Function implementing the FlashGreenLedTa thread.
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartFlashGreenLedTask */
void StartFlashGreenLedTask(void const * argument) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
 TickType_t TaskTimeStamp;
 TickType_t DelayTimeMsec = 4000;
 8000a24:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000a28:	60fb      	str	r3, [r7, #12]
 TaskTimeStamp = xTaskGetTickCount();
 8000a2a:	f004 fe63 	bl	80056f4 <xTaskGetTickCount>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_SET);//Turn On Blue LED
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <StartFlashGreenLedTask+0x50>)
 8000a3a:	f000 fdd5 	bl	80015e8 <HAL_GPIO_WritePin>
    HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);//Toggle Green LED
 8000a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a42:	480a      	ldr	r0, [pc, #40]	; (8000a6c <StartFlashGreenLedTask+0x50>)
 8000a44:	f000 fde9 	bl	800161a <HAL_GPIO_TogglePin>
    osDelayUntil(&TaskTimeStamp,DelayTimeMsec);//toggle every 4 seconds
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	68f9      	ldr	r1, [r7, #12]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fa4a 	bl	8004ee8 <osDelayUntil>
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_RESET);//Turn Off Blue LED
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <StartFlashGreenLedTask+0x50>)
 8000a5c:	f000 fdc4 	bl	80015e8 <HAL_GPIO_WritePin>
    osDelay(6000);
 8000a60:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a64:	f004 fa2c 	bl	8004ec0 <osDelay>
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_SET);//Turn On Blue LED
 8000a68:	e7e3      	b.n	8000a32 <StartFlashGreenLedTask+0x16>
 8000a6a:	bf00      	nop
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <StartRedFlashLedTask>:
* @brief Function implementing the FlashRedLedTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedFlashLedTask */
void StartRedFlashLedTask(void const * argument) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRedFlashLedTask */
  /* Infinite loop */
	TickType_t TaskTimeStamp;
	 TaskTimeStamp = xTaskGetTickCount();
 8000a78:	f004 fe3c 	bl	80056f4 <xTaskGetTickCount>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);//Turn On Orange LED
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <StartRedFlashLedTask+0x4c>)
 8000a88:	f000 fdae 	bl	80015e8 <HAL_GPIO_WritePin>
	      HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);//Toggle Red LED
 8000a8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <StartRedFlashLedTask+0x4c>)
 8000a92:	f000 fdc2 	bl	800161a <HAL_GPIO_TogglePin>
	      osDelayUntil(&TaskTimeStamp,500);//toggle every 0.5 sec
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 fa22 	bl	8004ee8 <osDelayUntil>
	      HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);//Turn Off Orange LED
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <StartRedFlashLedTask+0x4c>)
 8000aac:	f000 fd9c 	bl	80015e8 <HAL_GPIO_WritePin>
	      osDelay(1500);//delay for 1.5 sec
 8000ab0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ab4:	f004 fa04 	bl	8004ec0 <osDelay>
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);//Turn On Orange LED
 8000ab8:	e7e2      	b.n	8000a80 <StartRedFlashLedTask+0x10>
 8000aba:	bf00      	nop
 8000abc:	40020c00 	.word	0x40020c00

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f000 fae3 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_MspInit+0x54>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <HAL_MspInit+0x54>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x54>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_MspInit+0x54>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_MspInit+0x54>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_MspInit+0x54>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	210f      	movs	r1, #15
 8000b36:	f06f 0001 	mvn.w	r0, #1
 8000b3a:	f000 fba9 	bl	8001290 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_I2C_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <HAL_I2C_MspInit+0x8c>)
 8000ba8:	f000 fb9c 	bl	80012e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a59      	ldr	r2, [pc, #356]	; (8000d60 <HAL_I2S_MspInit+0x184>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d15b      	bne.n	8000cb6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
 8000c02:	4b58      	ldr	r3, [pc, #352]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a57      	ldr	r2, [pc, #348]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b55      	ldr	r3, [pc, #340]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	623b      	str	r3, [r7, #32]
 8000c18:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	4b51      	ldr	r3, [pc, #324]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a50      	ldr	r2, [pc, #320]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b4e      	ldr	r3, [pc, #312]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	4b4a      	ldr	r3, [pc, #296]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a49      	ldr	r2, [pc, #292]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c52:	2304      	movs	r3, #4
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c62:	2306      	movs	r3, #6
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	483e      	ldr	r0, [pc, #248]	; (8000d68 <HAL_I2S_MspInit+0x18c>)
 8000c6e:	f000 fb39 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c72:	2308      	movs	r3, #8
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c82:	2305      	movs	r3, #5
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4836      	ldr	r0, [pc, #216]	; (8000d68 <HAL_I2S_MspInit+0x18c>)
 8000c8e:	f000 fb29 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	482f      	ldr	r0, [pc, #188]	; (8000d6c <HAL_I2S_MspInit+0x190>)
 8000cb0:	f000 fb18 	bl	80012e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cb4:	e04f      	b.n	8000d56 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <HAL_I2S_MspInit+0x194>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d14a      	bne.n	8000d56 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6313      	str	r3, [r2, #48]	; 0x30
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_I2S_MspInit+0x188>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d14:	2310      	movs	r3, #16
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d24:	2306      	movs	r3, #6
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <HAL_I2S_MspInit+0x198>)
 8000d30:	f000 fad8 	bl	80012e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d34:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d46:	2306      	movs	r3, #6
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_I2S_MspInit+0x18c>)
 8000d52:	f000 fac7 	bl	80012e4 <HAL_GPIO_Init>
}
 8000d56:	bf00      	nop
 8000d58:	3738      	adds	r7, #56	; 0x38
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40003800 	.word	0x40003800
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40003c00 	.word	0x40003c00
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_SPI_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12b      	bne.n	8000df2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dd2:	23e0      	movs	r3, #224	; 0xe0
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000de2:	2305      	movs	r3, #5
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <HAL_SPI_MspInit+0x8c>)
 8000dee:	f000 fa79 	bl	80012e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40013000 	.word	0x40013000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000

08000e08 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e28:	d147      	bne.n	8000eba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_HCD_MspInit+0xbc>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <HAL_HCD_MspInit+0xbc>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <HAL_HCD_MspInit+0xbc>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <HAL_HCD_MspInit+0xc0>)
 8000e5c:	f000 fa42 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e72:	230a      	movs	r3, #10
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <HAL_HCD_MspInit+0xc0>)
 8000e7e:	f000 fa31 	bl	80012e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_HCD_MspInit+0xbc>)
 8000e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <HAL_HCD_MspInit+0xbc>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_HCD_MspInit+0xbc>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <HAL_HCD_MspInit+0xbc>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_HCD_MspInit+0xbc>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2105      	movs	r1, #5
 8000eae:	2043      	movs	r0, #67	; 0x43
 8000eb0:	f000 f9ee 	bl	8001290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000eb4:	2043      	movs	r0, #67	; 0x43
 8000eb6:	f000 fa07 	bl	80012c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	2019      	movs	r0, #25
 8000ee2:	f000 f9d5 	bl	8001290 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000ee6:	2019      	movs	r0, #25
 8000ee8:	f000 f9ee 	bl	80012c8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_InitTick+0xa0>)
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_InitTick+0xa0>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6453      	str	r3, [r2, #68]	; 0x44
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_InitTick+0xa0>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f08:	f107 0210 	add.w	r2, r7, #16
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 ffc6 	bl	8003ea4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f18:	f002 ffb0 	bl	8003e7c <HAL_RCC_GetPCLK2Freq>
 8000f1c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <HAL_InitTick+0xa4>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9b      	lsrs	r3, r3, #18
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_InitTick+0xa8>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_InitTick+0xac>)
 8000f30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_InitTick+0xa8>)
 8000f34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_InitTick+0xa8>)
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_InitTick+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_InitTick+0xa8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <HAL_InitTick+0xa8>)
 8000f4e:	f003 f98d 	bl	800426c <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d104      	bne.n	8000f62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <HAL_InitTick+0xa8>)
 8000f5a:	f003 f9bc 	bl	80042d6 <HAL_TIM_Base_Start_IT>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3730      	adds	r7, #48	; 0x30
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	431bde83 	.word	0x431bde83
 8000f74:	200043d4 	.word	0x200043d4
 8000f78:	40010000 	.word	0x40010000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fb6:	f003 f9b2 	bl	800431e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200043d4 	.word	0x200043d4

08000fc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <OTG_FS_IRQHandler+0x10>)
 8000fca:	f000 fba3 	bl	8001714 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000407c 	.word	0x2000407c

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <SystemInit+0x28>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <SystemInit+0x28>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SystemInit+0x28>)
 8000fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001008:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800100a:	e003      	b.n	8001014 <LoopCopyDataInit>

0800100c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800100e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001010:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001012:	3104      	adds	r1, #4

08001014 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001018:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800101a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800101c:	d3f6      	bcc.n	800100c <CopyDataInit>
  ldr  r2, =_sbss
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001020:	e002      	b.n	8001028 <LoopFillZerobss>

08001022 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001022:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001024:	f842 3b04 	str.w	r3, [r2], #4

08001028 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800102a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800102c:	d3f9      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102e:	f7ff ffd3 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f005 f99d 	bl	8006370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fa6d 	bl	8000514 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001040:	08006468 	.word	0x08006468
  ldr  r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001048:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800104c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001050:	20004418 	.word	0x20004418

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f8fa 	bl	800127a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ff20 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fd32 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20004414 	.word	0x20004414

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20004414 	.word	0x20004414

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_Delay+0x40>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000008 	.word	0x20000008

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff4c 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a2:	f7ff ff61 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f7ff ffb1 	bl	8001214 <NVIC_EncodePriority>
 80012b2:	4602      	mov	r2, r0
 80012b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff80 	bl	80011c0 <__NVIC_SetPriority>
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff54 	bl	8001184 <__NVIC_EnableIRQ>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e159      	b.n	80015b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8148 	bne.w	80015ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d00b      	beq.n	800133e <HAL_GPIO_Init+0x5a>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001332:	2b11      	cmp	r3, #17
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b12      	cmp	r3, #18
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0xfc>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b12      	cmp	r3, #18
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a2 	beq.w	80015ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <HAL_GPIO_Init+0x2e4>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a55      	ldr	r2, [pc, #340]	; (80015c8 <HAL_GPIO_Init+0x2e4>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_GPIO_Init+0x2e4>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001486:	4a51      	ldr	r2, [pc, #324]	; (80015cc <HAL_GPIO_Init+0x2e8>)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a48      	ldr	r2, [pc, #288]	; (80015d0 <HAL_GPIO_Init+0x2ec>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x202>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a47      	ldr	r2, [pc, #284]	; (80015d4 <HAL_GPIO_Init+0x2f0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x1fe>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a46      	ldr	r2, [pc, #280]	; (80015d8 <HAL_GPIO_Init+0x2f4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x1fa>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a45      	ldr	r2, [pc, #276]	; (80015dc <HAL_GPIO_Init+0x2f8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x1f6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a44      	ldr	r2, [pc, #272]	; (80015e0 <HAL_GPIO_Init+0x2fc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x1f2>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014d6:	2307      	movs	r3, #7
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014e6:	2300      	movs	r3, #0
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f8:	4934      	ldr	r1, [pc, #208]	; (80015cc <HAL_GPIO_Init+0x2e8>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152a:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <HAL_GPIO_Init+0x300>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001554:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_GPIO_Init+0x300>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157e:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_GPIO_Init+0x300>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	f67f aea2 	bls.w	8001300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	3724      	adds	r7, #36	; 0x24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	401a      	ands	r2, r3
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	429a      	cmp	r2, r3
 8001632:	d104      	bne.n	800163e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	041a      	lsls	r2, r3, #16
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800163c:	e002      	b.n	8001644 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	b08f      	sub	sp, #60	; 0x3c
 8001654:	af0a      	add	r7, sp, #40	; 0x28
 8001656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e054      	b.n	800170c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d106      	bne.n	8001682 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fbc3 	bl	8000e08 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2203      	movs	r2, #3
 8001686:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 f862 	bl	800476a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	687e      	ldr	r6, [r7, #4]
 80016ae:	466d      	mov	r5, sp
 80016b0:	f106 0410 	add.w	r4, r6, #16
 80016b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c4:	1d33      	adds	r3, r6, #4
 80016c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c8:	6838      	ldr	r0, [r7, #0]
 80016ca:	f002 ffed 	bl	80046a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 f859 	bl	800478c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	687e      	ldr	r6, [r7, #4]
 80016e2:	466d      	mov	r5, sp
 80016e4:	f106 0410 	add.w	r4, r6, #16
 80016e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f8:	1d33      	adds	r3, r6, #4
 80016fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f003 f935 	bl	800496c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001714 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f003 f8dc 	bl	80048e8 <USB_GetMode>
 8001730:	4603      	mov	r3, r0
 8001732:	2b01      	cmp	r3, #1
 8001734:	f040 80f1 	bne.w	800191a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f8c0 	bl	80048c2 <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80e7 	beq.w	8001918 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f8b7 	bl	80048c2 <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800175e:	d104      	bne.n	800176a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001768:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f003 f8a7 	bl	80048c2 <USB_ReadInterrupts>
 8001774:	4603      	mov	r3, r0
 8001776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800177e:	d104      	bne.n	800178a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001788:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 f897 	bl	80048c2 <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800179a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800179e:	d104      	bne.n	80017aa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 f887 	bl	80048c2 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d103      	bne.n	80017c6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2202      	movs	r2, #2
 80017c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 f879 	bl	80048c2 <USB_ReadInterrupts>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017da:	d117      	bne.n	800180c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80017ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80017ee:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f8a9 	bl	8001948 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2101      	movs	r1, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 f971 	bl	8004ae4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800180a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f003 f856 	bl	80048c2 <USB_ReadInterrupts>
 8001816:	4603      	mov	r3, r0
 8001818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001820:	d102      	bne.n	8001828 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f001 f874 	bl	8002910 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f003 f848 	bl	80048c2 <USB_ReadInterrupts>
 8001832:	4603      	mov	r3, r0
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b08      	cmp	r3, #8
 800183a:	d106      	bne.n	800184a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f86f 	bl	8001920 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2208      	movs	r2, #8
 8001848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f003 f837 	bl	80048c2 <USB_ReadInterrupts>
 8001854:	4603      	mov	r3, r0
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800185e:	d138      	bne.n	80018d2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f003 f9b0 	bl	8004bca <USB_HC_ReadInterrupt>
 800186a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e025      	b.n	80018be <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	fa22 f303 	lsr.w	r3, r2, r3
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d018      	beq.n	80018b8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800189c:	d106      	bne.n	80018ac <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f87b 	bl	80019a0 <HCD_HC_IN_IRQHandler>
 80018aa:	e005      	b.n	80018b8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fc0b 	bl	80020ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3d4      	bcc.n	8001872 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fff3 	bl	80048c2 <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b10      	cmp	r3, #16
 80018e4:	d101      	bne.n	80018ea <HAL_HCD_IRQHandler+0x1d6>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_HCD_IRQHandler+0x1d8>
 80018ea:	2300      	movs	r3, #0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d014      	beq.n	800191a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0210 	bic.w	r2, r2, #16
 80018fe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 ff59 	bl	80027b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0210 	orr.w	r2, r2, #16
 8001914:	619a      	str	r2, [r3, #24]
 8001916:	e000      	b.n	800191a <HAL_HCD_IRQHandler+0x206>
      return;
 8001918:	bf00      	nop
    }
  }
}
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
 8001990:	4613      	mov	r3, r2
 8001992:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d119      	bne.n	8001a04 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	015a      	lsls	r2, r3, #5
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019dc:	461a      	mov	r2, r3
 80019de:	2304      	movs	r3, #4
 80019e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	0151      	lsls	r1, r2, #5
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	440a      	add	r2, r1
 80019f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	60d3      	str	r3, [r2, #12]
 8001a02:	e095      	b.n	8001b30 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d109      	bne.n	8001a2e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a26:	461a      	mov	r2, r3
 8001a28:	2320      	movs	r3, #32
 8001a2a:	6093      	str	r3, [r2, #8]
 8001a2c:	e080      	b.n	8001b30 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d134      	bne.n	8001aae <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	0151      	lsls	r1, r2, #5
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	440a      	add	r2, r1
 8001a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	335d      	adds	r3, #93	; 0x5d
 8001a74:	2205      	movs	r2, #5
 8001a76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a84:	461a      	mov	r2, r3
 8001a86:	2310      	movs	r3, #16
 8001a88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a96:	461a      	mov	r2, r3
 8001a98:	2308      	movs	r3, #8
 8001a9a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 f8a0 	bl	8004bec <USB_HC_Halt>
 8001aac:	e040      	b.n	8001b30 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac4:	d134      	bne.n	8001b30 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	0151      	lsls	r1, r2, #5
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	440a      	add	r2, r1
 8001adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 f87b 	bl	8004bec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b02:	461a      	mov	r2, r3
 8001b04:	2310      	movs	r3, #16
 8001b06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	335d      	adds	r3, #93	; 0x5d
 8001b18:	2208      	movs	r2, #8
 8001b1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b46:	d122      	bne.n	8001b8e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	0151      	lsls	r1, r2, #5
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	440a      	add	r2, r1
 8001b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 f83a 	bl	8004bec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b84:	461a      	mov	r2, r3
 8001b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001b8c:	e29b      	b.n	80020c6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	f040 80c1 	bne.w	8001d28 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01b      	beq.n	8001be6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	3348      	adds	r3, #72	; 0x48
 8001bbe:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	0159      	lsls	r1, r3, #5
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001bd2:	1ad1      	subs	r1, r2, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4403      	add	r3, r0
 8001be2:	334c      	adds	r3, #76	; 0x4c
 8001be4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	335d      	adds	r3, #93	; 0x5d
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3358      	adds	r3, #88	; 0x58
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	333f      	adds	r3, #63	; 0x3f
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	333f      	adds	r3, #63	; 0x3f
 8001c46:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d121      	bne.n	8001c90 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	0151      	lsls	r1, r2, #5
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	440a      	add	r2, r1
 8001c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 ffb8 	bl	8004bec <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	6093      	str	r3, [r2, #8]
 8001c8e:	e034      	b.n	8001cfa <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	333f      	adds	r3, #63	; 0x3f
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d129      	bne.n	8001cfa <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	0151      	lsls	r1, r2, #5
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	440a      	add	r2, r1
 8001cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cc4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	335c      	adds	r3, #92	; 0x5c
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	b2d8      	uxtb	r0, r3
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	335c      	adds	r3, #92	; 0x5c
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fe45 	bl	8001984 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	3350      	adds	r3, #80	; 0x50
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2d8      	uxtb	r0, r3
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	3350      	adds	r3, #80	; 0x50
 8001d22:	4602      	mov	r2, r0
 8001d24:	701a      	strb	r2, [r3, #0]
}
 8001d26:	e1ce      	b.n	80020c6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	f040 80f1 	bne.w	8001f22 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	0151      	lsls	r1, r2, #5
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	440a      	add	r2, r1
 8001d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d5a:	f023 0302 	bic.w	r3, r3, #2
 8001d5e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	335d      	adds	r3, #93	; 0x5d
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10a      	bne.n	8001d8c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	335c      	adds	r3, #92	; 0x5c
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	e0b0      	b.n	8001eee <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	335d      	adds	r3, #93	; 0x5d
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d10a      	bne.n	8001db8 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	335c      	adds	r3, #92	; 0x5c
 8001db2:	2205      	movs	r2, #5
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e09a      	b.n	8001eee <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	335d      	adds	r3, #93	; 0x5d
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d00a      	beq.n	8001de4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	335d      	adds	r3, #93	; 0x5d
 8001dde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d156      	bne.n	8001e92 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	3358      	adds	r3, #88	; 0x58
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	1c59      	adds	r1, r3, #1
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4403      	add	r3, r0
 8001e06:	3358      	adds	r3, #88	; 0x58
 8001e08:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	3358      	adds	r3, #88	; 0x58
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d914      	bls.n	8001e4a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3358      	adds	r3, #88	; 0x58
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	335c      	adds	r3, #92	; 0x5c
 8001e44:	2204      	movs	r2, #4
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e009      	b.n	8001e5e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	335c      	adds	r3, #92	; 0x5c
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e74:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e7c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e02d      	b.n	8001eee <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	335d      	adds	r3, #93	; 0x5d
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d122      	bne.n	8001eee <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	335c      	adds	r3, #92	; 0x5c
 8001eb8:	2202      	movs	r2, #2
 8001eba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ed2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001eda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efa:	461a      	mov	r2, r3
 8001efc:	2302      	movs	r3, #2
 8001efe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	b2d8      	uxtb	r0, r3
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	335c      	adds	r3, #92	; 0x5c
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4601      	mov	r1, r0
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fd32 	bl	8001984 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001f20:	e0d1      	b.n	80020c6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	2b80      	cmp	r3, #128	; 0x80
 8001f36:	d13e      	bne.n	8001fb6 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	0151      	lsls	r1, r2, #5
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	440a      	add	r2, r1
 8001f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	3358      	adds	r3, #88	; 0x58
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	1c59      	adds	r1, r3, #1
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4403      	add	r3, r0
 8001f7a:	3358      	adds	r3, #88	; 0x58
 8001f7c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	335d      	adds	r3, #93	; 0x5d
 8001f8e:	2206      	movs	r2, #6
 8001f90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fe25 	bl	8004bec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	6093      	str	r3, [r2, #8]
}
 8001fb4:	e087      	b.n	80020c6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d17c      	bne.n	80020c6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	333f      	adds	r3, #63	; 0x3f
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d122      	bne.n	8002028 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	3358      	adds	r3, #88	; 0x58
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	0151      	lsls	r1, r2, #5
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	440a      	add	r2, r1
 800200c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fde3 	bl	8004bec <USB_HC_Halt>
 8002026:	e045      	b.n	80020b4 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	333f      	adds	r3, #63	; 0x3f
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	333f      	adds	r3, #63	; 0x3f
 800204e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002050:	2b02      	cmp	r3, #2
 8002052:	d12f      	bne.n	80020b4 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	3358      	adds	r3, #88	; 0x58
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d121      	bne.n	80020b4 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	335d      	adds	r3, #93	; 0x5d
 8002080:	2203      	movs	r2, #3
 8002082:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	0151      	lsls	r1, r2, #5
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	440a      	add	r2, r1
 800209a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 fd9c 	bl	8004bec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c0:	461a      	mov	r2, r3
 80020c2:	2310      	movs	r3, #16
 80020c4:	6093      	str	r3, [r2, #8]
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d119      	bne.n	8002132 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	2304      	movs	r3, #4
 800210e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	0151      	lsls	r1, r2, #5
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	440a      	add	r2, r1
 8002126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002130:	e33e      	b.n	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b20      	cmp	r3, #32
 8002146:	d141      	bne.n	80021cc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	461a      	mov	r2, r3
 8002156:	2320      	movs	r3, #32
 8002158:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	333d      	adds	r3, #61	; 0x3d
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	f040 831f 	bne.w	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	333d      	adds	r3, #61	; 0x3d
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	335c      	adds	r3, #92	; 0x5c
 8002196:	2202      	movs	r2, #2
 8002198:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	0151      	lsls	r1, r2, #5
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	440a      	add	r2, r1
 80021b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 fd11 	bl	8004bec <USB_HC_Halt>
}
 80021ca:	e2f1      	b.n	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d13f      	bne.n	8002262 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	335d      	adds	r3, #93	; 0x5d
 80021f2:	2204      	movs	r2, #4
 80021f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	333d      	adds	r3, #61	; 0x3d
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	3358      	adds	r3, #88	; 0x58
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	0151      	lsls	r1, r2, #5
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	440a      	add	r2, r1
 8002234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fccf 	bl	8004bec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4413      	add	r3, r2
 8002256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225a:	461a      	mov	r2, r3
 800225c:	2340      	movs	r3, #64	; 0x40
 800225e:	6093      	str	r3, [r2, #8]
}
 8002260:	e2a6      	b.n	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002278:	d122      	bne.n	80022c0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	0151      	lsls	r1, r2, #5
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	440a      	add	r2, r1
 8002290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fca1 	bl	8004bec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	461a      	mov	r2, r3
 80022b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022bc:	6093      	str	r3, [r2, #8]
}
 80022be:	e277      	b.n	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d135      	bne.n	8002342 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	3358      	adds	r3, #88	; 0x58
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	0151      	lsls	r1, r2, #5
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	440a      	add	r2, r1
 8002300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f002 fc69 	bl	8004bec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002326:	461a      	mov	r2, r3
 8002328:	2301      	movs	r3, #1
 800232a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	335d      	adds	r3, #93	; 0x5d
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
}
 8002340:	e236      	b.n	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b08      	cmp	r3, #8
 8002356:	d12b      	bne.n	80023b0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4413      	add	r3, r2
 8002360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002364:	461a      	mov	r2, r3
 8002366:	2308      	movs	r3, #8
 8002368:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	0151      	lsls	r1, r2, #5
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	440a      	add	r2, r1
 8002380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f002 fc29 	bl	8004bec <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	335d      	adds	r3, #93	; 0x5d
 80023aa:	2205      	movs	r2, #5
 80023ac:	701a      	strb	r2, [r3, #0]
}
 80023ae:	e1ff      	b.n	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d155      	bne.n	8002472 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	3358      	adds	r3, #88	; 0x58
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	335d      	adds	r3, #93	; 0x5d
 80023ea:	2203      	movs	r2, #3
 80023ec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	333d      	adds	r3, #61	; 0x3d
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d114      	bne.n	800242e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	333c      	adds	r3, #60	; 0x3c
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	333d      	adds	r3, #61	; 0x3d
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	0151      	lsls	r1, r2, #5
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	440a      	add	r2, r1
 8002444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f002 fbc7 	bl	8004bec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	461a      	mov	r2, r3
 800246c:	2310      	movs	r3, #16
 800246e:	6093      	str	r3, [r2, #8]
}
 8002470:	e19e      	b.n	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002484:	2b80      	cmp	r3, #128	; 0x80
 8002486:	d12b      	bne.n	80024e0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	0151      	lsls	r1, r2, #5
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	440a      	add	r2, r1
 800249e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 fb9a 	bl	8004bec <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	335d      	adds	r3, #93	; 0x5d
 80024c8:	2206      	movs	r2, #6
 80024ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	6093      	str	r3, [r2, #8]
}
 80024de:	e167      	b.n	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f6:	d135      	bne.n	8002564 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	0151      	lsls	r1, r2, #5
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	440a      	add	r2, r1
 800250e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fb62 	bl	8004bec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	461a      	mov	r2, r3
 8002536:	2310      	movs	r3, #16
 8002538:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	461a      	mov	r2, r3
 8002548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800254c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	335d      	adds	r3, #93	; 0x5d
 800255e:	2208      	movs	r2, #8
 8002560:	701a      	strb	r2, [r3, #0]
}
 8002562:	e125      	b.n	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b02      	cmp	r3, #2
 8002578:	f040 811a 	bne.w	80027b0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	0151      	lsls	r1, r2, #5
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	440a      	add	r2, r1
 8002592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002596:	f023 0302 	bic.w	r3, r3, #2
 800259a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	335d      	adds	r3, #93	; 0x5d
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d137      	bne.n	8002622 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	335c      	adds	r3, #92	; 0x5c
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	333f      	adds	r3, #63	; 0x3f
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d00b      	beq.n	80025f4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	333f      	adds	r3, #63	; 0x3f
 80025ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	f040 80c5 	bne.w	800277e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	3351      	adds	r3, #81	; 0x51
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	f083 0301 	eor.w	r3, r3, #1
 800260a:	b2d8      	uxtb	r0, r3
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	3351      	adds	r3, #81	; 0x51
 800261c:	4602      	mov	r2, r0
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e0ad      	b.n	800277e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	335d      	adds	r3, #93	; 0x5d
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d10a      	bne.n	800264e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	335c      	adds	r3, #92	; 0x5c
 8002648:	2202      	movs	r2, #2
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e097      	b.n	800277e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	335d      	adds	r3, #93	; 0x5d
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d10a      	bne.n	800267a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	335c      	adds	r3, #92	; 0x5c
 8002674:	2202      	movs	r2, #2
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e081      	b.n	800277e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	335d      	adds	r3, #93	; 0x5d
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d10a      	bne.n	80026a6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	335c      	adds	r3, #92	; 0x5c
 80026a0:	2205      	movs	r2, #5
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e06b      	b.n	800277e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	335d      	adds	r3, #93	; 0x5d
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d00a      	beq.n	80026d2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	335d      	adds	r3, #93	; 0x5d
 80026cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d155      	bne.n	800277e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	3358      	adds	r3, #88	; 0x58
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	1c59      	adds	r1, r3, #1
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4403      	add	r3, r0
 80026f4:	3358      	adds	r3, #88	; 0x58
 80026f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	3358      	adds	r3, #88	; 0x58
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d914      	bls.n	8002738 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	3358      	adds	r3, #88	; 0x58
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	335c      	adds	r3, #92	; 0x5c
 8002732:	2204      	movs	r2, #4
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	e009      	b.n	800274c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	335c      	adds	r3, #92	; 0x5c
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002762:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800276a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	461a      	mov	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2302      	movs	r3, #2
 800278e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	b2d8      	uxtb	r0, r3
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	335c      	adds	r3, #92	; 0x5c
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	4601      	mov	r1, r0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff f8ea 	bl	8001984 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027b0:	bf00      	nop
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	0c5b      	lsrs	r3, r3, #17
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d003      	beq.n	80027fc <HCD_RXQLVL_IRQHandler+0x44>
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	f000 8082 	beq.w	80028fe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80027fa:	e083      	b.n	8002904 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d07f      	beq.n	8002902 <HCD_RXQLVL_IRQHandler+0x14a>
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	3344      	adds	r3, #68	; 0x44
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d074      	beq.n	8002902 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	3344      	adds	r3, #68	; 0x44
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	b292      	uxth	r2, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f002 f81c 	bl	8004870 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	3344      	adds	r3, #68	; 0x44
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	18d1      	adds	r1, r2, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4403      	add	r3, r0
 800285c:	3344      	adds	r3, #68	; 0x44
 800285e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	334c      	adds	r3, #76	; 0x4c
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	18d1      	adds	r1, r2, r3
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4403      	add	r3, r0
 8002884:	334c      	adds	r3, #76	; 0x4c
 8002886:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HCD_RXQLVL_IRQHandler+0x154>)
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d031      	beq.n	8002902 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3350      	adds	r3, #80	; 0x50
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	f083 0301 	eor.w	r3, r3, #1
 80028e6:	b2d8      	uxtb	r0, r3
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	3350      	adds	r3, #80	; 0x50
 80028f8:	4602      	mov	r2, r0
 80028fa:	701a      	strb	r2, [r3, #0]
      break;
 80028fc:	e001      	b.n	8002902 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80028fe:	bf00      	nop
 8002900:	e000      	b.n	8002904 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002902:	bf00      	nop
  }
}
 8002904:	bf00      	nop
 8002906:	3728      	adds	r7, #40	; 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	1ff80000 	.word	0x1ff80000

08002910 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800293c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d113      	bne.n	8002970 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d10a      	bne.n	8002968 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699a      	ldr	r2, [r3, #24]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002960:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe ffe6 	bl	8001934 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f043 0302 	orr.w	r3, r3, #2
 800296e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d147      	bne.n	8002a0a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b04      	cmp	r3, #4
 800298a:	d129      	bne.n	80029e0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d113      	bne.n	80029bc <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800299a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800299e:	d106      	bne.n	80029ae <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2102      	movs	r1, #2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 f89c 	bl	8004ae4 <USB_InitFSLSPClkSel>
 80029ac:	e011      	b.n	80029d2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 f895 	bl	8004ae4 <USB_InitFSLSPClkSel>
 80029ba:	e00a      	b.n	80029d2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d106      	bne.n	80029d2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ca:	461a      	mov	r2, r3
 80029cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80029d0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe ffc2 	bl	800195c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe ffab 	bl	8001934 <HAL_HCD_Connect_Callback>
 80029de:	e014      	b.n	8002a0a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fe ffc5 	bl	8001970 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80029f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029f8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d103      	bne.n	8002a1c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f043 0320 	orr.w	r3, r3, #32
 8002a1a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e11f      	b.n	8002c82 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe f878 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a94:	f001 f9de 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 8002a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4a7b      	ldr	r2, [pc, #492]	; (8002c8c <HAL_I2C_Init+0x25c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d807      	bhi.n	8002ab4 <HAL_I2C_Init+0x84>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_I2C_Init+0x260>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	bf94      	ite	ls
 8002aac:	2301      	movls	r3, #1
 8002aae:	2300      	movhi	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e006      	b.n	8002ac2 <HAL_I2C_Init+0x92>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a77      	ldr	r2, [pc, #476]	; (8002c94 <HAL_I2C_Init+0x264>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	bf94      	ite	ls
 8002abc:	2301      	movls	r3, #1
 8002abe:	2300      	movhi	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0db      	b.n	8002c82 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a72      	ldr	r2, [pc, #456]	; (8002c98 <HAL_I2C_Init+0x268>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0c9b      	lsrs	r3, r3, #18
 8002ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a64      	ldr	r2, [pc, #400]	; (8002c8c <HAL_I2C_Init+0x25c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d802      	bhi.n	8002b04 <HAL_I2C_Init+0xd4>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	e009      	b.n	8002b18 <HAL_I2C_Init+0xe8>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	4a63      	ldr	r2, [pc, #396]	; (8002c9c <HAL_I2C_Init+0x26c>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	3301      	adds	r3, #1
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4956      	ldr	r1, [pc, #344]	; (8002c8c <HAL_I2C_Init+0x25c>)
 8002b34:	428b      	cmp	r3, r1
 8002b36:	d80d      	bhi.n	8002b54 <HAL_I2C_Init+0x124>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e59      	subs	r1, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	bf38      	it	cc
 8002b50:	2304      	movcc	r3, #4
 8002b52:	e04f      	b.n	8002bf4 <HAL_I2C_Init+0x1c4>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d111      	bne.n	8002b80 <HAL_I2C_Init+0x150>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e012      	b.n	8002ba6 <HAL_I2C_Init+0x176>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Init+0x17e>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e022      	b.n	8002bf4 <HAL_I2C_Init+0x1c4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_I2C_Init+0x1a4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e58      	subs	r0, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	440b      	add	r3, r1
 8002bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd2:	e00f      	b.n	8002bf4 <HAL_I2C_Init+0x1c4>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	0099      	lsls	r1, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6911      	ldr	r1, [r2, #16]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	000186a0 	.word	0x000186a0
 8002c90:	001e847f 	.word	0x001e847f
 8002c94:	003d08ff 	.word	0x003d08ff
 8002c98:	431bde83 	.word	0x431bde83
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e128      	b.n	8002f04 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a90      	ldr	r2, [pc, #576]	; (8002f0c <HAL_I2S_Init+0x26c>)
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7fd ff85 	bl	8000bdc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ce8:	f023 030f 	bic.w	r3, r3, #15
 8002cec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d060      	beq.n	8002dc0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d06:	2310      	movs	r3, #16
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e001      	b.n	8002d10 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d802      	bhi.n	8002d1e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f001 f9e2 	bl	80040e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d24:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d2e:	d125      	bne.n	8002d7c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d54:	3305      	adds	r3, #5
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	e01f      	b.n	8002d9a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	3305      	adds	r3, #5
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e00e      	b.n	8002d9a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	3305      	adds	r3, #5
 8002d98:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4a5c      	ldr	r2, [pc, #368]	; (8002f10 <HAL_I2S_Init+0x270>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	08db      	lsrs	r3, r3, #3
 8002da4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e003      	b.n	8002dc8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d902      	bls.n	8002dd4 <HAL_I2S_Init+0x134>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2bff      	cmp	r3, #255	; 0xff
 8002dd2:	d907      	bls.n	8002de4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	f043 0210 	orr.w	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e08f      	b.n	8002f04 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	ea42 0103 	orr.w	r1, r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e02:	f023 030f 	bic.w	r3, r3, #15
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6851      	ldr	r1, [r2, #4]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6892      	ldr	r2, [r2, #8]
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68d2      	ldr	r2, [r2, #12]
 8002e14:	4311      	orrs	r1, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6992      	ldr	r2, [r2, #24]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e26:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d161      	bne.n	8002ef4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a38      	ldr	r2, [pc, #224]	; (8002f14 <HAL_I2S_Init+0x274>)
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <HAL_I2S_Init+0x278>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_I2S_Init+0x1a4>
 8002e40:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_I2S_Init+0x27c>)
 8002e42:	e001      	b.n	8002e48 <HAL_I2S_Init+0x1a8>
 8002e44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	4932      	ldr	r1, [pc, #200]	; (8002f18 <HAL_I2S_Init+0x278>)
 8002e50:	428a      	cmp	r2, r1
 8002e52:	d101      	bne.n	8002e58 <HAL_I2S_Init+0x1b8>
 8002e54:	4a31      	ldr	r2, [pc, #196]	; (8002f1c <HAL_I2S_Init+0x27c>)
 8002e56:	e001      	b.n	8002e5c <HAL_I2S_Init+0x1bc>
 8002e58:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002e5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e60:	f023 030f 	bic.w	r3, r3, #15
 8002e64:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <HAL_I2S_Init+0x278>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <HAL_I2S_Init+0x1d4>
 8002e70:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <HAL_I2S_Init+0x27c>)
 8002e72:	e001      	b.n	8002e78 <HAL_I2S_Init+0x1d8>
 8002e74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e78:	2202      	movs	r2, #2
 8002e7a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <HAL_I2S_Init+0x278>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_I2S_Init+0x1ea>
 8002e86:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_I2S_Init+0x27c>)
 8002e88:	e001      	b.n	8002e8e <HAL_I2S_Init+0x1ee>
 8002e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9a:	d003      	beq.n	8002ea4 <HAL_I2S_Init+0x204>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e001      	b.n	8002eb0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	b299      	uxth	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002ec6:	4303      	orrs	r3, r0
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002edc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <HAL_I2S_Init+0x278>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_I2S_Init+0x24c>
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_I2S_Init+0x27c>)
 8002eea:	e001      	b.n	8002ef0 <HAL_I2S_Init+0x250>
 8002eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef0:	897a      	ldrh	r2, [r7, #10]
 8002ef2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	08003017 	.word	0x08003017
 8002f10:	cccccccd 	.word	0xcccccccd
 8002f14:	0800312d 	.word	0x0800312d
 8002f18:	40003800 	.word	0x40003800
 8002f1c:	40003400 	.word	0x40003400

08002f20 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	881a      	ldrh	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	1c9a      	adds	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10e      	bne.n	8002fb0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fa0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ffb8 	bl	8002f20 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	1c9a      	adds	r2, r3, #2
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10e      	bne.n	800300e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ffe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff93 	bl	8002f34 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b04      	cmp	r3, #4
 8003030:	d13a      	bne.n	80030a8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d109      	bne.n	8003050 <I2S_IRQHandler+0x3a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d102      	bne.n	8003050 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ffb4 	bl	8002fb8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	d126      	bne.n	80030a8 <I2S_IRQHandler+0x92>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b20      	cmp	r3, #32
 8003066:	d11f      	bne.n	80030a8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003076:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f043 0202 	orr.w	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ff50 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d136      	bne.n	8003122 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d109      	bne.n	80030d2 <I2S_IRQHandler+0xbc>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d102      	bne.n	80030d2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff45 	bl	8002f5c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d122      	bne.n	8003122 <I2S_IRQHandler+0x10c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d11b      	bne.n	8003122 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030f8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	f043 0204 	orr.w	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff13 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4aa2      	ldr	r2, [pc, #648]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003146:	4ba2      	ldr	r3, [pc, #648]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003148:	e001      	b.n	800314e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800314a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a9b      	ldr	r2, [pc, #620]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003164:	4b9a      	ldr	r3, [pc, #616]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003166:	e001      	b.n	800316c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003178:	d004      	beq.n	8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 8099 	bne.w	80032b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d107      	bne.n	800319e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f925 	bl	80033e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d107      	bne.n	80031b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f9c8 	bl	8003548 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d13a      	bne.n	8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d035      	beq.n	8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a7e      	ldr	r2, [pc, #504]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80031d6:	4b7e      	ldr	r3, [pc, #504]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031d8:	e001      	b.n	80031de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80031da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4979      	ldr	r1, [pc, #484]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031e6:	428b      	cmp	r3, r1
 80031e8:	d101      	bne.n	80031ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80031ea:	4b79      	ldr	r3, [pc, #484]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031ec:	e001      	b.n	80031f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80031ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003206:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff fe88 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b08      	cmp	r3, #8
 8003240:	f040 80be 	bne.w	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80b8 	beq.w	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800325e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a59      	ldr	r2, [pc, #356]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800326a:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800326c:	e001      	b.n	8003272 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800326e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4954      	ldr	r1, [pc, #336]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800327a:	428b      	cmp	r3, r1
 800327c:	d101      	bne.n	8003282 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800327e:	4b54      	ldr	r3, [pc, #336]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003280:	e001      	b.n	8003286 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003282:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003286:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800328a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f043 0204 	orr.w	r2, r3, #4
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fe4a 	bl	8002f48 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032b4:	e084      	b.n	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d107      	bne.n	80032d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8be 	bl	800344c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f8fd 	bl	80034e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d12f      	bne.n	8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d02a      	beq.n	8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800330c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800331a:	e001      	b.n	8003320 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4929      	ldr	r1, [pc, #164]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003328:	428b      	cmp	r3, r1
 800332a:	d101      	bne.n	8003330 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800332e:	e001      	b.n	8003334 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003334:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003338:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f043 0202 	orr.w	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fdfa 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b08      	cmp	r3, #8
 800335c:	d131      	bne.n	80033c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d02c      	beq.n	80033c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003372:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003374:	e001      	b.n	800337a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4912      	ldr	r1, [pc, #72]	; (80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003382:	428b      	cmp	r3, r1
 8003384:	d101      	bne.n	800338a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003388:	e001      	b.n	800338e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800338a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800338e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003392:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033a2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	f043 0204 	orr.w	r2, r3, #4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fdc5 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033be:	e000      	b.n	80033c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033c0:	bf00      	nop
}
 80033c2:	bf00      	nop
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40003800 	.word	0x40003800
 80033d0:	40003400 	.word	0x40003400

080033d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c99      	adds	r1, r3, #2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6251      	str	r1, [r2, #36]	; 0x24
 80033fa:	881a      	ldrh	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d113      	bne.n	8003442 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003428:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ffc9 	bl	80033d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	1c99      	adds	r1, r3, #2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6251      	str	r1, [r2, #36]	; 0x24
 800345e:	8819      	ldrh	r1, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <I2SEx_TxISR_I2SExt+0x90>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <I2SEx_TxISR_I2SExt+0x22>
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <I2SEx_TxISR_I2SExt+0x94>)
 800346c:	e001      	b.n	8003472 <I2SEx_TxISR_I2SExt+0x26>
 800346e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003472:	460a      	mov	r2, r1
 8003474:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d121      	bne.n	80034d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <I2SEx_TxISR_I2SExt+0x90>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <I2SEx_TxISR_I2SExt+0x50>
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <I2SEx_TxISR_I2SExt+0x94>)
 800349a:	e001      	b.n	80034a0 <I2SEx_TxISR_I2SExt+0x54>
 800349c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	490d      	ldr	r1, [pc, #52]	; (80034dc <I2SEx_TxISR_I2SExt+0x90>)
 80034a8:	428b      	cmp	r3, r1
 80034aa:	d101      	bne.n	80034b0 <I2SEx_TxISR_I2SExt+0x64>
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <I2SEx_TxISR_I2SExt+0x94>)
 80034ae:	e001      	b.n	80034b4 <I2SEx_TxISR_I2SExt+0x68>
 80034b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff81 	bl	80033d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40003800 	.word	0x40003800
 80034e0:	40003400 	.word	0x40003400

080034e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68d8      	ldr	r0, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	1c99      	adds	r1, r3, #2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80034fc:	b282      	uxth	r2, r0
 80034fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003526:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff4a 	bl	80033d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <I2SEx_RxISR_I2SExt+0x90>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <I2SEx_RxISR_I2SExt+0x16>
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <I2SEx_RxISR_I2SExt+0x94>)
 800355c:	e001      	b.n	8003562 <I2SEx_RxISR_I2SExt+0x1a>
 800355e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003562:	68d8      	ldr	r0, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	1c99      	adds	r1, r3, #2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800356e:	b282      	uxth	r2, r0
 8003570:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d121      	bne.n	80035ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <I2SEx_RxISR_I2SExt+0x90>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <I2SEx_RxISR_I2SExt+0x50>
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <I2SEx_RxISR_I2SExt+0x94>)
 8003596:	e001      	b.n	800359c <I2SEx_RxISR_I2SExt+0x54>
 8003598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	490d      	ldr	r1, [pc, #52]	; (80035d8 <I2SEx_RxISR_I2SExt+0x90>)
 80035a4:	428b      	cmp	r3, r1
 80035a6:	d101      	bne.n	80035ac <I2SEx_RxISR_I2SExt+0x64>
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <I2SEx_RxISR_I2SExt+0x94>)
 80035aa:	e001      	b.n	80035b0 <I2SEx_RxISR_I2SExt+0x68>
 80035ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff03 	bl	80033d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40003800 	.word	0x40003800
 80035dc:	40003400 	.word	0x40003400

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e25b      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d075      	beq.n	80036ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035fe:	4ba3      	ldr	r3, [pc, #652]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d00c      	beq.n	8003624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360a:	4ba0      	ldr	r3, [pc, #640]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003612:	2b08      	cmp	r3, #8
 8003614:	d112      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003616:	4b9d      	ldr	r3, [pc, #628]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003622:	d10b      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	4b99      	ldr	r3, [pc, #612]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05b      	beq.n	80036e8 <HAL_RCC_OscConfig+0x108>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d157      	bne.n	80036e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e236      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d106      	bne.n	8003654 <HAL_RCC_OscConfig+0x74>
 8003646:	4b91      	ldr	r3, [pc, #580]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a90      	ldr	r2, [pc, #576]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e01d      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x98>
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a8a      	ldr	r2, [pc, #552]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a87      	ldr	r2, [pc, #540]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003678:	4b84      	ldr	r3, [pc, #528]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a83      	ldr	r2, [pc, #524]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a80      	ldr	r2, [pc, #512]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fd fd14 	bl	80010c4 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fd fd10 	bl	80010c4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1fb      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0xc0>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fd fd00 	bl	80010c4 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fd fcfc 	bl	80010c4 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1e7      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0xe8>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d063      	beq.n	80037be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036f6:	4b65      	ldr	r3, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003702:	4b62      	ldr	r3, [pc, #392]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11c      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d116      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	4b5c      	ldr	r3, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d001      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e1bb      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003732:	4b56      	ldr	r3, [pc, #344]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4952      	ldr	r1, [pc, #328]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	e03a      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003750:	4b4f      	ldr	r3, [pc, #316]	; (8003890 <HAL_RCC_OscConfig+0x2b0>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fd fcb5 	bl	80010c4 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375e:	f7fd fcb1 	bl	80010c4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e19c      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4940      	ldr	r1, [pc, #256]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003792:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_OscConfig+0x2b0>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fd fc94 	bl	80010c4 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a0:	f7fd fc90 	bl	80010c4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e17b      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	4b36      	ldr	r3, [pc, #216]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d030      	beq.n	800382c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d2:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_RCC_OscConfig+0x2b4>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd fc74 	bl	80010c4 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fd fc70 	bl	80010c4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e15b      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x200>
 80037fe:	e015      	b.n	800382c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCC_OscConfig+0x2b4>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fd fc5d 	bl	80010c4 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380e:	f7fd fc59 	bl	80010c4 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e144      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a0 	beq.w	800397a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003882:	f7fd fc1f 	bl	80010c4 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	e011      	b.n	80038ae <HAL_RCC_OscConfig+0x2ce>
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	42470000 	.word	0x42470000
 8003894:	42470e80 	.word	0x42470e80
 8003898:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389c:	f7fd fc12 	bl	80010c4 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0fd      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	4b81      	ldr	r3, [pc, #516]	; (8003ab4 <HAL_RCC_OscConfig+0x4d4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d106      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2f0>
 80038c2:	4b7d      	ldr	r3, [pc, #500]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a7c      	ldr	r2, [pc, #496]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	e01c      	b.n	800390a <HAL_RCC_OscConfig+0x32a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d10c      	bne.n	80038f2 <HAL_RCC_OscConfig+0x312>
 80038d8:	4b77      	ldr	r3, [pc, #476]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a76      	ldr	r2, [pc, #472]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	4b74      	ldr	r3, [pc, #464]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a73      	ldr	r2, [pc, #460]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
 80038f0:	e00b      	b.n	800390a <HAL_RCC_OscConfig+0x32a>
 80038f2:	4b71      	ldr	r3, [pc, #452]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a70      	ldr	r2, [pc, #448]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	4b6e      	ldr	r3, [pc, #440]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a6d      	ldr	r2, [pc, #436]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d015      	beq.n	800393e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fd fbd7 	bl	80010c4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fd fbd3 	bl	80010c4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e0bc      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	4b61      	ldr	r3, [pc, #388]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ee      	beq.n	800391a <HAL_RCC_OscConfig+0x33a>
 800393c:	e014      	b.n	8003968 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fd fbc1 	bl	80010c4 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd fbbd 	bl	80010c4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0a6      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395c:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ee      	bne.n	8003946 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396e:	4b52      	ldr	r3, [pc, #328]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4a51      	ldr	r2, [pc, #324]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003978:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8092 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003984:	4b4c      	ldr	r3, [pc, #304]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d05c      	beq.n	8003a4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d141      	bne.n	8003a1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	4b48      	ldr	r3, [pc, #288]	; (8003abc <HAL_RCC_OscConfig+0x4dc>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fd fb91 	bl	80010c4 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fd fb8d 	bl	80010c4 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e078      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b8:	4b3f      	ldr	r3, [pc, #252]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	019b      	lsls	r3, r3, #6
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	061b      	lsls	r3, r3, #24
 80039e8:	4933      	ldr	r1, [pc, #204]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ee:	4b33      	ldr	r3, [pc, #204]	; (8003abc <HAL_RCC_OscConfig+0x4dc>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fd fb66 	bl	80010c4 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fd fb62 	bl	80010c4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e04d      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x41c>
 8003a1a:	e045      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1c:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_RCC_OscConfig+0x4dc>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fd fb4f 	bl	80010c4 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7fd fb4b 	bl	80010c4 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e036      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x44a>
 8003a48:	e02e      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e029      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a56:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d10d      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	42470060 	.word	0x42470060

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0cc      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d90c      	bls.n	8003afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0b8      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a58      	ldr	r2, [pc, #352]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b2c:	4b53      	ldr	r3, [pc, #332]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a52      	ldr	r2, [pc, #328]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	494d      	ldr	r1, [pc, #308]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d044      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d119      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e06f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e067      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4934      	ldr	r1, [pc, #208]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fd fa88 	bl	80010c4 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fd fa84 	bl	80010c4 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e04f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d20c      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e032      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4916      	ldr	r1, [pc, #88]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	490e      	ldr	r1, [pc, #56]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c46:	f000 f821 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	5cd3      	ldrb	r3, [r2, r3]
 8003c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd f930 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	08006440 	.word	0x08006440
 8003c84:	20000000 	.word	0x20000000
 8003c88:	20000004 	.word	0x20000004

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca2:	4b63      	ldr	r3, [pc, #396]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d007      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x32>
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x38>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f040 80b4 	bne.w	8003e20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b5e      	ldr	r3, [pc, #376]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cba:	60bb      	str	r3, [r7, #8]
       break;
 8003cbc:	e0b3      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cbe:	4b5e      	ldr	r3, [pc, #376]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003cc0:	60bb      	str	r3, [r7, #8]
      break;
 8003cc2:	e0b0      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc4:	4b5a      	ldr	r3, [pc, #360]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ccc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cce:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d04a      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cda:	4b55      	ldr	r3, [pc, #340]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	099b      	lsrs	r3, r3, #6
 8003ce0:	f04f 0400 	mov.w	r4, #0
 8003ce4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	ea03 0501 	and.w	r5, r3, r1
 8003cf0:	ea04 0602 	and.w	r6, r4, r2
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4632      	mov	r2, r6
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f04f 0400 	mov.w	r4, #0
 8003d00:	0154      	lsls	r4, r2, #5
 8003d02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d06:	014b      	lsls	r3, r1, #5
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	1b49      	subs	r1, r1, r5
 8003d0e:	eb62 0206 	sbc.w	r2, r2, r6
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	f04f 0400 	mov.w	r4, #0
 8003d1a:	0194      	lsls	r4, r2, #6
 8003d1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d20:	018b      	lsls	r3, r1, #6
 8003d22:	1a5b      	subs	r3, r3, r1
 8003d24:	eb64 0402 	sbc.w	r4, r4, r2
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	00e2      	lsls	r2, r4, #3
 8003d32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d36:	00d9      	lsls	r1, r3, #3
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	195b      	adds	r3, r3, r5
 8003d3e:	eb44 0406 	adc.w	r4, r4, r6
 8003d42:	f04f 0100 	mov.w	r1, #0
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	0262      	lsls	r2, r4, #9
 8003d4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d50:	0259      	lsls	r1, r3, #9
 8003d52:	460b      	mov	r3, r1
 8003d54:	4614      	mov	r4, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	4621      	mov	r1, r4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f04f 0400 	mov.w	r4, #0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4623      	mov	r3, r4
 8003d64:	f7fc fa3c 	bl	80001e0 <__aeabi_uldivmod>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e049      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4b2f      	ldr	r3, [pc, #188]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	f04f 0400 	mov.w	r4, #0
 8003d7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	ea03 0501 	and.w	r5, r3, r1
 8003d86:	ea04 0602 	and.w	r6, r4, r2
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	4632      	mov	r2, r6
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	f04f 0400 	mov.w	r4, #0
 8003d96:	0154      	lsls	r4, r2, #5
 8003d98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d9c:	014b      	lsls	r3, r1, #5
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4622      	mov	r2, r4
 8003da2:	1b49      	subs	r1, r1, r5
 8003da4:	eb62 0206 	sbc.w	r2, r2, r6
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	f04f 0400 	mov.w	r4, #0
 8003db0:	0194      	lsls	r4, r2, #6
 8003db2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003db6:	018b      	lsls	r3, r1, #6
 8003db8:	1a5b      	subs	r3, r3, r1
 8003dba:	eb64 0402 	sbc.w	r4, r4, r2
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	00e2      	lsls	r2, r4, #3
 8003dc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dcc:	00d9      	lsls	r1, r3, #3
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	195b      	adds	r3, r3, r5
 8003dd4:	eb44 0406 	adc.w	r4, r4, r6
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	02a2      	lsls	r2, r4, #10
 8003de2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003de6:	0299      	lsls	r1, r3, #10
 8003de8:	460b      	mov	r3, r1
 8003dea:	4614      	mov	r4, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	4621      	mov	r1, r4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f04f 0400 	mov.w	r4, #0
 8003df6:	461a      	mov	r2, r3
 8003df8:	4623      	mov	r3, r4
 8003dfa:	f7fc f9f1 	bl	80001e0 <__aeabi_uldivmod>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	460c      	mov	r4, r1
 8003e02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	60bb      	str	r3, [r7, #8]
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e22:	60bb      	str	r3, [r7, #8]
      break;
 8003e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e26:	68bb      	ldr	r3, [r7, #8]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e30:	40023800 	.word	0x40023800
 8003e34:	00f42400 	.word	0x00f42400
 8003e38:	007a1200 	.word	0x007a1200

08003e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000000 	.word	0x20000000

08003e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e58:	f7ff fff0 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4a03      	ldr	r2, [pc, #12]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6a:	5cd3      	ldrb	r3, [r2, r3]
 8003e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	08006450 	.word	0x08006450

08003e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e80:	f7ff ffdc 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e84:	4601      	mov	r1, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0b5b      	lsrs	r3, r3, #13
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08006450 	.word	0x08006450

08003ea4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_RCC_GetClockConfig+0x5c>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0203 	and.w	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCC_GetClockConfig+0x5c>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <HAL_RCC_GetClockConfig+0x60>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 020f 	and.w	r2, r3, #15
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40023c00 	.word	0x40023c00

08003f08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d038      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f36:	f7fd f8c5 	bl	80010c4 <HAL_GetTick>
 8003f3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f3e:	f7fd f8c1 	bl	80010c4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0bd      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f50:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	071b      	lsls	r3, r3, #28
 8003f6e:	495a      	ldr	r1, [pc, #360]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f76:	4b57      	ldr	r3, [pc, #348]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f7c:	f7fd f8a2 	bl	80010c4 <HAL_GetTick>
 8003f80:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f84:	f7fd f89e 	bl	80010c4 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e09a      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f96:	4b50      	ldr	r3, [pc, #320]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8083 	beq.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	4b48      	ldr	r3, [pc, #288]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	4a47      	ldr	r2, [pc, #284]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc0:	4b45      	ldr	r3, [pc, #276]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fcc:	4b43      	ldr	r3, [pc, #268]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a42      	ldr	r2, [pc, #264]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd8:	f7fd f874 	bl	80010c4 <HAL_GetTick>
 8003fdc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fe0:	f7fd f870 	bl	80010c4 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e06c      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ff2:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d02f      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	429a      	cmp	r2, r3
 800401a:	d028      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800401c:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004026:	4b2e      	ldr	r3, [pc, #184]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004032:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d114      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004044:	f7fd f83e 	bl	80010c4 <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fd f83a 	bl	80010c4 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e034      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0ee      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407a:	d10d      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800408c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004090:	4911      	ldr	r1, [pc, #68]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
 8004096:	e005      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040a2:	6093      	str	r3, [r2, #8]
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	4909      	ldr	r1, [pc, #36]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7d1a      	ldrb	r2, [r3, #20]
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80040c8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	42470068 	.word	0x42470068
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40007000 	.word	0x40007000
 80040e0:	42470e40 	.word	0x42470e40
 80040e4:	424711e0 	.word	0x424711e0

080040e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d13f      	bne.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004106:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800410e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004116:	2b01      	cmp	r3, #1
 8004118:	d131      	bne.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800411a:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800411c:	617b      	str	r3, [r7, #20]
          break;
 800411e:	e031      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412c:	d109      	bne.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800412e:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004138:	4a18      	ldr	r2, [pc, #96]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	e008      	b.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004142:	4b14      	ldr	r3, [pc, #80]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800414c:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800416a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416e:	0f1b      	lsrs	r3, r3, #28
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	617b      	str	r3, [r7, #20]
          break;
 800417c:	e002      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
          break;
 8004182:	bf00      	nop
        }
      }
      break;
 8004184:	bf00      	nop
    }
  }
  return frequency;
 8004186:	697b      	ldr	r3, [r7, #20]
}
 8004188:	4618      	mov	r0, r3
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40023800 	.word	0x40023800
 8004198:	00bb8000 	.word	0x00bb8000
 800419c:	007a1200 	.word	0x007a1200
 80041a0:	00f42400 	.word	0x00f42400

080041a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e056      	b.n	8004264 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7fc fdd1 	bl	8000d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	ea42 0103 	orr.w	r1, r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	f003 0104 	and.w	r1, r3, #4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004252:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e01d      	b.n	80042ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f815 	bl	80042c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f000 f968 	bl	8004580 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b06      	cmp	r3, #6
 80042fe:	d007      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b02      	cmp	r3, #2
 8004332:	d122      	bne.n	800437a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d11b      	bne.n	800437a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f06f 0202 	mvn.w	r2, #2
 800434a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8ee 	bl	8004542 <HAL_TIM_IC_CaptureCallback>
 8004366:	e005      	b.n	8004374 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f8e0 	bl	800452e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8f1 	bl	8004556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b04      	cmp	r3, #4
 8004386:	d122      	bne.n	80043ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b04      	cmp	r3, #4
 8004394:	d11b      	bne.n	80043ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f06f 0204 	mvn.w	r2, #4
 800439e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8c4 	bl	8004542 <HAL_TIM_IC_CaptureCallback>
 80043ba:	e005      	b.n	80043c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8b6 	bl	800452e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8c7 	bl	8004556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d122      	bne.n	8004422 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11b      	bne.n	8004422 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0208 	mvn.w	r2, #8
 80043f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2204      	movs	r2, #4
 80043f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f89a 	bl	8004542 <HAL_TIM_IC_CaptureCallback>
 800440e:	e005      	b.n	800441c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f88c 	bl	800452e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f89d 	bl	8004556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b10      	cmp	r3, #16
 800442e:	d122      	bne.n	8004476 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b10      	cmp	r3, #16
 800443c:	d11b      	bne.n	8004476 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f06f 0210 	mvn.w	r2, #16
 8004446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2208      	movs	r2, #8
 800444c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f870 	bl	8004542 <HAL_TIM_IC_CaptureCallback>
 8004462:	e005      	b.n	8004470 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f862 	bl	800452e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f873 	bl	8004556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10e      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f06f 0201 	mvn.w	r2, #1
 800449a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fc fb0f 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ac:	2b80      	cmp	r3, #128	; 0x80
 80044ae:	d10e      	bne.n	80044ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b80      	cmp	r3, #128	; 0x80
 80044bc:	d107      	bne.n	80044ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f8e3 	bl	8004694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d10e      	bne.n	80044fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	d107      	bne.n	80044fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f838 	bl	800456a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b20      	cmp	r3, #32
 8004506:	d10e      	bne.n	8004526 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b20      	cmp	r3, #32
 8004514:	d107      	bne.n	8004526 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0220 	mvn.w	r2, #32
 800451e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8ad 	bl	8004680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a34      	ldr	r2, [pc, #208]	; (8004664 <TIM_Base_SetConfig+0xe4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00f      	beq.n	80045b8 <TIM_Base_SetConfig+0x38>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459e:	d00b      	beq.n	80045b8 <TIM_Base_SetConfig+0x38>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a31      	ldr	r2, [pc, #196]	; (8004668 <TIM_Base_SetConfig+0xe8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <TIM_Base_SetConfig+0x38>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a30      	ldr	r2, [pc, #192]	; (800466c <TIM_Base_SetConfig+0xec>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_Base_SetConfig+0x38>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a2f      	ldr	r2, [pc, #188]	; (8004670 <TIM_Base_SetConfig+0xf0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d108      	bne.n	80045ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a25      	ldr	r2, [pc, #148]	; (8004664 <TIM_Base_SetConfig+0xe4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01b      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d017      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a22      	ldr	r2, [pc, #136]	; (8004668 <TIM_Base_SetConfig+0xe8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a21      	ldr	r2, [pc, #132]	; (800466c <TIM_Base_SetConfig+0xec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00f      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a20      	ldr	r2, [pc, #128]	; (8004670 <TIM_Base_SetConfig+0xf0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00b      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <TIM_Base_SetConfig+0xf4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <TIM_Base_SetConfig+0xf8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d003      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <TIM_Base_SetConfig+0xfc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d108      	bne.n	800461c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <TIM_Base_SetConfig+0xe4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d103      	bne.n	8004650 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	615a      	str	r2, [r3, #20]
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40010000 	.word	0x40010000
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40000c00 	.word	0x40000c00
 8004674:	40014000 	.word	0x40014000
 8004678:	40014400 	.word	0x40014400
 800467c:	40014800 	.word	0x40014800

08004680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046a8:	b084      	sub	sp, #16
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	f107 001c 	add.w	r0, r7, #28
 80046b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d122      	bne.n	8004706 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f902 	bl	8004904 <USB_CoreReset>
 8004700:	4603      	mov	r3, r0
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	e01a      	b.n	800473c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8f6 	bl	8004904 <USB_CoreReset>
 8004718:	4603      	mov	r3, r0
 800471a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800471c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
 800472e:	e005      	b.n	800473c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10b      	bne.n	800475a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f043 0206 	orr.w	r2, r3, #6
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004766:	b004      	add	sp, #16
 8004768:	4770      	bx	lr

0800476a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f023 0201 	bic.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d106      	bne.n	80047b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	e00b      	b.n	80047d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	e001      	b.n	80047d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e003      	b.n	80047d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047d0:	2032      	movs	r0, #50	; 0x32
 80047d2:	f7fc fc83 	bl	80010dc <HAL_Delay>

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	019b      	lsls	r3, r3, #6
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3301      	adds	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <USB_FlushTxFifo+0x48>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e006      	b.n	800481a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b20      	cmp	r3, #32
 8004816:	d0f0      	beq.n	80047fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	00030d40 	.word	0x00030d40

0800482c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2210      	movs	r2, #16
 800483c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3301      	adds	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <USB_FlushRxFifo+0x40>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e006      	b.n	800485e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b10      	cmp	r3, #16
 800485a:	d0f0      	beq.n	800483e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	00030d40 	.word	0x00030d40

08004870 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004870:	b480      	push	{r7}
 8004872:	b089      	sub	sp, #36	; 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	3303      	adds	r3, #3
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e00b      	b.n	80048ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	601a      	str	r2, [r3, #0]
    pDest++;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	3304      	adds	r3, #4
 80048a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	3301      	adds	r3, #1
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d3ef      	bcc.n	8004894 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80048b4:	69fb      	ldr	r3, [r7, #28]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3724      	adds	r7, #36	; 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4013      	ands	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0301 	and.w	r3, r3, #1
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3301      	adds	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a13      	ldr	r2, [pc, #76]	; (8004968 <USB_CoreReset+0x64>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e01b      	b.n	800495a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	daf2      	bge.n	8004910 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <USB_CoreReset+0x64>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e006      	b.n	800495a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b01      	cmp	r3, #1
 8004956:	d0f0      	beq.n	800493a <USB_CoreReset+0x36>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	00030d40 	.word	0x00030d40

0800496c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800496c:	b084      	sub	sp, #16
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	f107 001c 	add.w	r0, r7, #28
 800497a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004988:	461a      	mov	r2, r3
 800498a:	2300      	movs	r3, #0
 800498c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d10a      	bne.n	80049da <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049d2:	f043 0304 	orr.w	r3, r3, #4
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	e014      	b.n	8004a04 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	e009      	b.n	8004a04 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049fe:	f023 0304 	bic.w	r3, r3, #4
 8004a02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004a04:	2110      	movs	r1, #16
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff feea 	bl	80047e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff0d 	bl	800482c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	e015      	b.n	8004a44 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a24:	461a      	mov	r2, r3
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d3e5      	bcc.n	8004a18 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f882 	bl	8004b58 <USB_DriveVbus>

  HAL_Delay(200U);
 8004a54:	20c8      	movs	r0, #200	; 0xc8
 8004a56:	f7fc fb41 	bl	80010dc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00b      	beq.n	8004a8c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <USB_HostInit+0x164>)
 8004a80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <USB_HostInit+0x168>)
 8004a86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a8a:	e009      	b.n	8004aa0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2280      	movs	r2, #128	; 0x80
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a10      	ldr	r2, [pc, #64]	; (8004ad8 <USB_HostInit+0x16c>)
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a10      	ldr	r2, [pc, #64]	; (8004adc <USB_HostInit+0x170>)
 8004a9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d105      	bne.n	8004ab2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f043 0210 	orr.w	r2, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <USB_HostInit+0x174>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aca:	b004      	add	sp, #16
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	01000200 	.word	0x01000200
 8004ad4:	00e00300 	.word	0x00e00300
 8004ad8:	00600080 	.word	0x00600080
 8004adc:	004000e0 	.word	0x004000e0
 8004ae0:	a3200008 	.word	0xa3200008

08004ae4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d107      	bne.n	8004b36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b32:	6053      	str	r3, [r2, #4]
 8004b34:	e009      	b.n	8004b4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d106      	bne.n	8004b4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b42:	461a      	mov	r2, r3
 8004b44:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <USB_DriveVbus+0x44>
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d106      	bne.n	8004b9c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b9a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d109      	bne.n	8004bbc <USB_DriveVbus+0x64>
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	b29b      	uxth	r3, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	0c9b      	lsrs	r3, r3, #18
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <USB_HC_Halt+0x3a>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d16c      	bne.n	8004d00 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	0151      	lsls	r1, r2, #5
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c44:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d143      	bne.n	8004cda <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c70:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c90:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cb0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cbe:	d81d      	bhi.n	8004cfc <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd6:	d0ec      	beq.n	8004cb2 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004cd8:	e080      	b.n	8004ddc <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	0151      	lsls	r1, r2, #5
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	440a      	add	r2, r1
 8004cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cf8:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004cfa:	e06f      	b.n	8004ddc <USB_HC_Halt+0x1f0>
          break;
 8004cfc:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004cfe:	e06d      	b.n	8004ddc <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d1e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d143      	bne.n	8004db8 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d4e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d8e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3301      	adds	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d9c:	d81d      	bhi.n	8004dda <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db4:	d0ec      	beq.n	8004d90 <USB_HC_Halt+0x1a4>
 8004db6:	e011      	b.n	8004ddc <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	e000      	b.n	8004ddc <USB_HC_Halt+0x1f0>
          break;
 8004dda:	bf00      	nop
    }
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	4603      	mov	r3, r0
 8004df2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dfc:	2b84      	cmp	r3, #132	; 0x84
 8004dfe:	d005      	beq.n	8004e0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	3303      	adds	r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e1e:	f000 fb61 	bl	80054e4 <vTaskStartScheduler>
  
  return osOK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2a:	b089      	sub	sp, #36	; 0x24
 8004e2c:	af04      	add	r7, sp, #16
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d020      	beq.n	8004e7c <osThreadCreate+0x54>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01c      	beq.n	8004e7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685c      	ldr	r4, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681d      	ldr	r5, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691e      	ldr	r6, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff ffc8 	bl	8004dea <makeFreeRtosPriority>
 8004e5a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e64:	9202      	str	r2, [sp, #8]
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	9100      	str	r1, [sp, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4632      	mov	r2, r6
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 f903 	bl	800507c <xTaskCreateStatic>
 8004e76:	4603      	mov	r3, r0
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e01c      	b.n	8004eb6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685c      	ldr	r4, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e88:	b29e      	uxth	r6, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff ffaa 	bl	8004dea <makeFreeRtosPriority>
 8004e96:	4602      	mov	r2, r0
 8004e98:	f107 030c 	add.w	r3, r7, #12
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	9200      	str	r2, [sp, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 f941 	bl	800512e <xTaskCreate>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d001      	beq.n	8004eb6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ec0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <osDelay+0x16>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	e000      	b.n	8004ed8 <osDelay+0x18>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 facf 	bl	800547c <vTaskDelay>
  
  return osOK;
 8004ede:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <osDelayUntil+0x18>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	e000      	b.n	8004f02 <osDelayUntil+0x1a>
 8004f00:	2301      	movs	r3, #1
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fa3f 	bl	8005388 <vTaskDelayUntil>
  
  return osOK;
 8004f0a:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f103 0208 	add.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f103 0208 	add.w	r2, r3, #8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f103 0208 	add.w	r2, r3, #8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d103      	bne.n	8004fd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e00c      	b.n	8004ff0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e002      	b.n	8004fe4 <vListInsert+0x2e>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d2f6      	bcs.n	8004fde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	601a      	str	r2, [r3, #0]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6892      	ldr	r2, [r2, #8]
 800503e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6852      	ldr	r2, [r2, #4]
 8005048:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d103      	bne.n	800505c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08e      	sub	sp, #56	; 0x38
 8005080:	af04      	add	r7, sp, #16
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	2b00      	cmp	r3, #0
 800508e:	d109      	bne.n	80050a4 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	623b      	str	r3, [r7, #32]
 80050a2:	e7fe      	b.n	80050a2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <xTaskCreateStatic+0x42>
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	e7fe      	b.n	80050bc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050be:	2354      	movs	r3, #84	; 0x54
 80050c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b54      	cmp	r3, #84	; 0x54
 80050c6:	d009      	beq.n	80050dc <xTaskCreateStatic+0x60>
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e7fe      	b.n	80050da <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01e      	beq.n	8005120 <xTaskCreateStatic+0xa4>
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01b      	beq.n	8005120 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050fa:	2300      	movs	r3, #0
 80050fc:	9303      	str	r3, [sp, #12]
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	9302      	str	r3, [sp, #8]
 8005102:	f107 0314 	add.w	r3, r7, #20
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f850 	bl	80051b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800511a:	f000 f8cb 	bl	80052b4 <prvAddNewTaskToReadyList>
 800511e:	e001      	b.n	8005124 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005124:	697b      	ldr	r3, [r7, #20]
	}
 8005126:	4618      	mov	r0, r3
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800512e:	b580      	push	{r7, lr}
 8005130:	b08c      	sub	sp, #48	; 0x30
 8005132:	af04      	add	r7, sp, #16
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 ff3e 	bl	8005fc4 <pvPortMalloc>
 8005148:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00e      	beq.n	800516e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005150:	2054      	movs	r0, #84	; 0x54
 8005152:	f000 ff37 	bl	8005fc4 <pvPortMalloc>
 8005156:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
 8005164:	e005      	b.n	8005172 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005166:	6978      	ldr	r0, [r7, #20]
 8005168:	f000 ffee 	bl	8006148 <vPortFree>
 800516c:	e001      	b.n	8005172 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d017      	beq.n	80051a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005180:	88fa      	ldrh	r2, [r7, #6]
 8005182:	2300      	movs	r3, #0
 8005184:	9303      	str	r3, [sp, #12]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	9302      	str	r3, [sp, #8]
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f80e 	bl	80051b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800519c:	69f8      	ldr	r0, [r7, #28]
 800519e:	f000 f889 	bl	80052b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e002      	b.n	80051ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051a8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ae:	69bb      	ldr	r3, [r7, #24]
	}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051d0:	3b01      	subs	r3, #1
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f023 0307 	bic.w	r3, r3, #7
 80051de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <prvInitialiseNewTask+0x46>
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e7fe      	b.n	80051fc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	e012      	b.n	800522a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	7819      	ldrb	r1, [r3, #0]
 800520c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	3334      	adds	r3, #52	; 0x34
 8005214:	460a      	mov	r2, r1
 8005216:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d006      	beq.n	8005232 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	3301      	adds	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2b0f      	cmp	r3, #15
 800522e:	d9e9      	bls.n	8005204 <prvInitialiseNewTask+0x4c>
 8005230:	e000      	b.n	8005234 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005232:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	2b06      	cmp	r3, #6
 8005240:	d901      	bls.n	8005246 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005242:	2306      	movs	r3, #6
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005250:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	2200      	movs	r2, #0
 8005256:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	3304      	adds	r3, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fe79 	bl	8004f54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	3318      	adds	r3, #24
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fe74 	bl	8004f54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005270:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	f1c3 0207 	rsb	r2, r3, #7
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005280:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2200      	movs	r2, #0
 8005286:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	69b8      	ldr	r0, [r7, #24]
 8005296:	f000 fc91 	bl	8005bbc <pxPortInitialiseStack>
 800529a:	4602      	mov	r2, r0
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ac:	bf00      	nop
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052bc:	f000 fda6 	bl	8005e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052c0:	4b2a      	ldr	r3, [pc, #168]	; (800536c <prvAddNewTaskToReadyList+0xb8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3301      	adds	r3, #1
 80052c6:	4a29      	ldr	r2, [pc, #164]	; (800536c <prvAddNewTaskToReadyList+0xb8>)
 80052c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052ca:	4b29      	ldr	r3, [pc, #164]	; (8005370 <prvAddNewTaskToReadyList+0xbc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052d2:	4a27      	ldr	r2, [pc, #156]	; (8005370 <prvAddNewTaskToReadyList+0xbc>)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052d8:	4b24      	ldr	r3, [pc, #144]	; (800536c <prvAddNewTaskToReadyList+0xb8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d110      	bne.n	8005302 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052e0:	f000 fb46 	bl	8005970 <prvInitialiseTaskLists>
 80052e4:	e00d      	b.n	8005302 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052e6:	4b23      	ldr	r3, [pc, #140]	; (8005374 <prvAddNewTaskToReadyList+0xc0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052ee:	4b20      	ldr	r3, [pc, #128]	; (8005370 <prvAddNewTaskToReadyList+0xbc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d802      	bhi.n	8005302 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052fc:	4a1c      	ldr	r2, [pc, #112]	; (8005370 <prvAddNewTaskToReadyList+0xbc>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005302:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <prvAddNewTaskToReadyList+0xc4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3301      	adds	r3, #1
 8005308:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <prvAddNewTaskToReadyList+0xc4>)
 800530a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	2201      	movs	r2, #1
 8005312:	409a      	lsls	r2, r3
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <prvAddNewTaskToReadyList+0xc8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4313      	orrs	r3, r2
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <prvAddNewTaskToReadyList+0xc8>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4a15      	ldr	r2, [pc, #84]	; (8005380 <prvAddNewTaskToReadyList+0xcc>)
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f7ff fe1a 	bl	8004f6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800533a:	f000 fd95 	bl	8005e68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <prvAddNewTaskToReadyList+0xc0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00e      	beq.n	8005364 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <prvAddNewTaskToReadyList+0xbc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	429a      	cmp	r2, r3
 8005352:	d207      	bcs.n	8005364 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <prvAddNewTaskToReadyList+0xd0>)
 8005356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000380 	.word	0x20000380
 8005370:	20000280 	.word	0x20000280
 8005374:	2000038c 	.word	0x2000038c
 8005378:	2000039c 	.word	0x2000039c
 800537c:	20000388 	.word	0x20000388
 8005380:	20000284 	.word	0x20000284
 8005384:	e000ed04 	.word	0xe000ed04

08005388 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005392:	2300      	movs	r3, #0
 8005394:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <vTaskDelayUntil+0x28>
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e7fe      	b.n	80053ae <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <vTaskDelayUntil+0x42>
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	e7fe      	b.n	80053c8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80053ca:	4b29      	ldr	r3, [pc, #164]	; (8005470 <vTaskDelayUntil+0xe8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <vTaskDelayUntil+0x5e>
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e7fe      	b.n	80053e4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80053e6:	f000 f8db 	bl	80055a0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80053ea:	4b22      	ldr	r3, [pc, #136]	; (8005474 <vTaskDelayUntil+0xec>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	4413      	add	r3, r2
 80053f8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	429a      	cmp	r2, r3
 8005402:	d20b      	bcs.n	800541c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	429a      	cmp	r2, r3
 800540c:	d211      	bcs.n	8005432 <vTaskDelayUntil+0xaa>
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	429a      	cmp	r2, r3
 8005414:	d90d      	bls.n	8005432 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005416:	2301      	movs	r3, #1
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
 800541a:	e00a      	b.n	8005432 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	429a      	cmp	r2, r3
 8005424:	d303      	bcc.n	800542e <vTaskDelayUntil+0xa6>
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	429a      	cmp	r2, r3
 800542c:	d901      	bls.n	8005432 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800542e:	2301      	movs	r3, #1
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fb52 	bl	8005af0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800544c:	f000 f8b6 	bl	80055bc <xTaskResumeAll>
 8005450:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d107      	bne.n	8005468 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8005458:	4b07      	ldr	r3, [pc, #28]	; (8005478 <vTaskDelayUntil+0xf0>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005468:	bf00      	nop
 800546a:	3728      	adds	r7, #40	; 0x28
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	200003a8 	.word	0x200003a8
 8005474:	20000384 	.word	0x20000384
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d016      	beq.n	80054bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800548e:	4b13      	ldr	r3, [pc, #76]	; (80054dc <vTaskDelay+0x60>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <vTaskDelay+0x2e>
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	e7fe      	b.n	80054a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80054aa:	f000 f879 	bl	80055a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054ae:	2100      	movs	r1, #0
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fb1d 	bl	8005af0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054b6:	f000 f881 	bl	80055bc <xTaskResumeAll>
 80054ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d107      	bne.n	80054d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80054c2:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <vTaskDelay+0x64>)
 80054c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	200003a8 	.word	0x200003a8
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	; 0x28
 80054e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054f2:	463a      	mov	r2, r7
 80054f4:	1d39      	adds	r1, r7, #4
 80054f6:	f107 0308 	add.w	r3, r7, #8
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fa fff0 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	9202      	str	r2, [sp, #8]
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	2300      	movs	r3, #0
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	460a      	mov	r2, r1
 8005512:	491d      	ldr	r1, [pc, #116]	; (8005588 <vTaskStartScheduler+0xa4>)
 8005514:	481d      	ldr	r0, [pc, #116]	; (800558c <vTaskStartScheduler+0xa8>)
 8005516:	f7ff fdb1 	bl	800507c <xTaskCreateStatic>
 800551a:	4602      	mov	r2, r0
 800551c:	4b1c      	ldr	r3, [pc, #112]	; (8005590 <vTaskStartScheduler+0xac>)
 800551e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005520:	4b1b      	ldr	r3, [pc, #108]	; (8005590 <vTaskStartScheduler+0xac>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005528:	2301      	movs	r3, #1
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e001      	b.n	8005532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d115      	bne.n	8005564 <vTaskStartScheduler+0x80>
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800554a:	4b12      	ldr	r3, [pc, #72]	; (8005594 <vTaskStartScheduler+0xb0>)
 800554c:	f04f 32ff 	mov.w	r2, #4294967295
 8005550:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005552:	4b11      	ldr	r3, [pc, #68]	; (8005598 <vTaskStartScheduler+0xb4>)
 8005554:	2201      	movs	r2, #1
 8005556:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005558:	4b10      	ldr	r3, [pc, #64]	; (800559c <vTaskStartScheduler+0xb8>)
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800555e:	f000 fbb7 	bl	8005cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005562:	e00d      	b.n	8005580 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d109      	bne.n	8005580 <vTaskStartScheduler+0x9c>
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e7fe      	b.n	800557e <vTaskStartScheduler+0x9a>
}
 8005580:	bf00      	nop
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	08006438 	.word	0x08006438
 800558c:	08005941 	.word	0x08005941
 8005590:	200003a4 	.word	0x200003a4
 8005594:	200003a0 	.word	0x200003a0
 8005598:	2000038c 	.word	0x2000038c
 800559c:	20000384 	.word	0x20000384

080055a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055a4:	4b04      	ldr	r3, [pc, #16]	; (80055b8 <vTaskSuspendAll+0x18>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3301      	adds	r3, #1
 80055aa:	4a03      	ldr	r2, [pc, #12]	; (80055b8 <vTaskSuspendAll+0x18>)
 80055ac:	6013      	str	r3, [r2, #0]
}
 80055ae:	bf00      	nop
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	200003a8 	.word	0x200003a8

080055bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ca:	4b41      	ldr	r3, [pc, #260]	; (80056d0 <xTaskResumeAll+0x114>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <xTaskResumeAll+0x2a>
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	e7fe      	b.n	80055e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055e6:	f000 fc11 	bl	8005e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055ea:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <xTaskResumeAll+0x114>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	4a37      	ldr	r2, [pc, #220]	; (80056d0 <xTaskResumeAll+0x114>)
 80055f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f4:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <xTaskResumeAll+0x114>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d161      	bne.n	80056c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055fc:	4b35      	ldr	r3, [pc, #212]	; (80056d4 <xTaskResumeAll+0x118>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d05d      	beq.n	80056c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005604:	e02e      	b.n	8005664 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005606:	4b34      	ldr	r3, [pc, #208]	; (80056d8 <xTaskResumeAll+0x11c>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3318      	adds	r3, #24
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fd08 	bl	8005028 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3304      	adds	r3, #4
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fd03 	bl	8005028 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	2201      	movs	r2, #1
 8005628:	409a      	lsls	r2, r3
 800562a:	4b2c      	ldr	r3, [pc, #176]	; (80056dc <xTaskResumeAll+0x120>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4313      	orrs	r3, r2
 8005630:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <xTaskResumeAll+0x120>)
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <xTaskResumeAll+0x124>)
 8005642:	441a      	add	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3304      	adds	r3, #4
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7ff fc8f 	bl	8004f6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <xTaskResumeAll+0x128>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	429a      	cmp	r2, r3
 800565c:	d302      	bcc.n	8005664 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800565e:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <xTaskResumeAll+0x12c>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005664:	4b1c      	ldr	r3, [pc, #112]	; (80056d8 <xTaskResumeAll+0x11c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1cc      	bne.n	8005606 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005672:	f000 fa17 	bl	8005aa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005676:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <xTaskResumeAll+0x130>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005682:	f000 f847 	bl	8005714 <xTaskIncrementTick>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800568c:	4b16      	ldr	r3, [pc, #88]	; (80056e8 <xTaskResumeAll+0x12c>)
 800568e:	2201      	movs	r2, #1
 8005690:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3b01      	subs	r3, #1
 8005696:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f1      	bne.n	8005682 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800569e:	4b13      	ldr	r3, [pc, #76]	; (80056ec <xTaskResumeAll+0x130>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056a4:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <xTaskResumeAll+0x12c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056ac:	2301      	movs	r3, #1
 80056ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <xTaskResumeAll+0x134>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056c0:	f000 fbd2 	bl	8005e68 <vPortExitCritical>

	return xAlreadyYielded;
 80056c4:	68bb      	ldr	r3, [r7, #8]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200003a8 	.word	0x200003a8
 80056d4:	20000380 	.word	0x20000380
 80056d8:	20000340 	.word	0x20000340
 80056dc:	20000388 	.word	0x20000388
 80056e0:	20000284 	.word	0x20000284
 80056e4:	20000280 	.word	0x20000280
 80056e8:	20000394 	.word	0x20000394
 80056ec:	20000390 	.word	0x20000390
 80056f0:	e000ed04 	.word	0xe000ed04

080056f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <xTaskGetTickCount+0x1c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005700:	687b      	ldr	r3, [r7, #4]
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20000384 	.word	0x20000384

08005714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571e:	4b50      	ldr	r3, [pc, #320]	; (8005860 <xTaskIncrementTick+0x14c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f040 808c 	bne.w	8005840 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005728:	4b4e      	ldr	r3, [pc, #312]	; (8005864 <xTaskIncrementTick+0x150>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005730:	4a4c      	ldr	r2, [pc, #304]	; (8005864 <xTaskIncrementTick+0x150>)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d11f      	bne.n	800577c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800573c:	4b4a      	ldr	r3, [pc, #296]	; (8005868 <xTaskIncrementTick+0x154>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <xTaskIncrementTick+0x46>
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	e7fe      	b.n	8005758 <xTaskIncrementTick+0x44>
 800575a:	4b43      	ldr	r3, [pc, #268]	; (8005868 <xTaskIncrementTick+0x154>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	4b42      	ldr	r3, [pc, #264]	; (800586c <xTaskIncrementTick+0x158>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a40      	ldr	r2, [pc, #256]	; (8005868 <xTaskIncrementTick+0x154>)
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	4a40      	ldr	r2, [pc, #256]	; (800586c <xTaskIncrementTick+0x158>)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	4b40      	ldr	r3, [pc, #256]	; (8005870 <xTaskIncrementTick+0x15c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	4a3e      	ldr	r2, [pc, #248]	; (8005870 <xTaskIncrementTick+0x15c>)
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	f000 f994 	bl	8005aa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800577c:	4b3d      	ldr	r3, [pc, #244]	; (8005874 <xTaskIncrementTick+0x160>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	429a      	cmp	r2, r3
 8005784:	d34d      	bcc.n	8005822 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005786:	4b38      	ldr	r3, [pc, #224]	; (8005868 <xTaskIncrementTick+0x154>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <xTaskIncrementTick+0x80>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <xTaskIncrementTick+0x82>
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800579a:	4b36      	ldr	r3, [pc, #216]	; (8005874 <xTaskIncrementTick+0x160>)
 800579c:	f04f 32ff 	mov.w	r2, #4294967295
 80057a0:	601a      	str	r2, [r3, #0]
					break;
 80057a2:	e03e      	b.n	8005822 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057a4:	4b30      	ldr	r3, [pc, #192]	; (8005868 <xTaskIncrementTick+0x154>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d203      	bcs.n	80057c4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057bc:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <xTaskIncrementTick+0x160>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6013      	str	r3, [r2, #0]
						break;
 80057c2:	e02e      	b.n	8005822 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fc2d 	bl	8005028 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3318      	adds	r3, #24
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fc24 	bl	8005028 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	2201      	movs	r2, #1
 80057e6:	409a      	lsls	r2, r3
 80057e8:	4b23      	ldr	r3, [pc, #140]	; (8005878 <xTaskIncrementTick+0x164>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	4a22      	ldr	r2, [pc, #136]	; (8005878 <xTaskIncrementTick+0x164>)
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4a1f      	ldr	r2, [pc, #124]	; (800587c <xTaskIncrementTick+0x168>)
 8005800:	441a      	add	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	3304      	adds	r3, #4
 8005806:	4619      	mov	r1, r3
 8005808:	4610      	mov	r0, r2
 800580a:	f7ff fbb0 	bl	8004f6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <xTaskIncrementTick+0x16c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	429a      	cmp	r2, r3
 800581a:	d3b4      	bcc.n	8005786 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800581c:	2301      	movs	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005820:	e7b1      	b.n	8005786 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005822:	4b17      	ldr	r3, [pc, #92]	; (8005880 <xTaskIncrementTick+0x16c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4914      	ldr	r1, [pc, #80]	; (800587c <xTaskIncrementTick+0x168>)
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d907      	bls.n	800584a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800583a:	2301      	movs	r3, #1
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e004      	b.n	800584a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005840:	4b10      	ldr	r3, [pc, #64]	; (8005884 <xTaskIncrementTick+0x170>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	4a0f      	ldr	r2, [pc, #60]	; (8005884 <xTaskIncrementTick+0x170>)
 8005848:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <xTaskIncrementTick+0x174>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005852:	2301      	movs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005856:	697b      	ldr	r3, [r7, #20]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	200003a8 	.word	0x200003a8
 8005864:	20000384 	.word	0x20000384
 8005868:	20000338 	.word	0x20000338
 800586c:	2000033c 	.word	0x2000033c
 8005870:	20000398 	.word	0x20000398
 8005874:	200003a0 	.word	0x200003a0
 8005878:	20000388 	.word	0x20000388
 800587c:	20000284 	.word	0x20000284
 8005880:	20000280 	.word	0x20000280
 8005884:	20000390 	.word	0x20000390
 8005888:	20000394 	.word	0x20000394

0800588c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005892:	4b26      	ldr	r3, [pc, #152]	; (800592c <vTaskSwitchContext+0xa0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800589a:	4b25      	ldr	r3, [pc, #148]	; (8005930 <vTaskSwitchContext+0xa4>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058a0:	e03e      	b.n	8005920 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80058a2:	4b23      	ldr	r3, [pc, #140]	; (8005930 <vTaskSwitchContext+0xa4>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058a8:	4b22      	ldr	r3, [pc, #136]	; (8005934 <vTaskSwitchContext+0xa8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	fab3 f383 	clz	r3, r3
 80058b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	f1c3 031f 	rsb	r3, r3, #31
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	491e      	ldr	r1, [pc, #120]	; (8005938 <vTaskSwitchContext+0xac>)
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	e7fe      	b.n	80058e4 <vTaskSwitchContext+0x58>
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4a11      	ldr	r2, [pc, #68]	; (8005938 <vTaskSwitchContext+0xac>)
 80058f2:	4413      	add	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	3308      	adds	r3, #8
 8005908:	429a      	cmp	r2, r3
 800590a:	d104      	bne.n	8005916 <vTaskSwitchContext+0x8a>
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4a07      	ldr	r2, [pc, #28]	; (800593c <vTaskSwitchContext+0xb0>)
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	200003a8 	.word	0x200003a8
 8005930:	20000394 	.word	0x20000394
 8005934:	20000388 	.word	0x20000388
 8005938:	20000284 	.word	0x20000284
 800593c:	20000280 	.word	0x20000280

08005940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005948:	f000 f852 	bl	80059f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <prvIdleTask+0x28>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d9f9      	bls.n	8005948 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <prvIdleTask+0x2c>)
 8005956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005964:	e7f0      	b.n	8005948 <prvIdleTask+0x8>
 8005966:	bf00      	nop
 8005968:	20000284 	.word	0x20000284
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005976:	2300      	movs	r3, #0
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	e00c      	b.n	8005996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4a12      	ldr	r2, [pc, #72]	; (80059d0 <prvInitialiseTaskLists+0x60>)
 8005988:	4413      	add	r3, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fac2 	bl	8004f14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3301      	adds	r3, #1
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b06      	cmp	r3, #6
 800599a:	d9ef      	bls.n	800597c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800599c:	480d      	ldr	r0, [pc, #52]	; (80059d4 <prvInitialiseTaskLists+0x64>)
 800599e:	f7ff fab9 	bl	8004f14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059a2:	480d      	ldr	r0, [pc, #52]	; (80059d8 <prvInitialiseTaskLists+0x68>)
 80059a4:	f7ff fab6 	bl	8004f14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059a8:	480c      	ldr	r0, [pc, #48]	; (80059dc <prvInitialiseTaskLists+0x6c>)
 80059aa:	f7ff fab3 	bl	8004f14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ae:	480c      	ldr	r0, [pc, #48]	; (80059e0 <prvInitialiseTaskLists+0x70>)
 80059b0:	f7ff fab0 	bl	8004f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059b4:	480b      	ldr	r0, [pc, #44]	; (80059e4 <prvInitialiseTaskLists+0x74>)
 80059b6:	f7ff faad 	bl	8004f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059ba:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <prvInitialiseTaskLists+0x78>)
 80059bc:	4a05      	ldr	r2, [pc, #20]	; (80059d4 <prvInitialiseTaskLists+0x64>)
 80059be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <prvInitialiseTaskLists+0x7c>)
 80059c2:	4a05      	ldr	r2, [pc, #20]	; (80059d8 <prvInitialiseTaskLists+0x68>)
 80059c4:	601a      	str	r2, [r3, #0]
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000284 	.word	0x20000284
 80059d4:	20000310 	.word	0x20000310
 80059d8:	20000324 	.word	0x20000324
 80059dc:	20000340 	.word	0x20000340
 80059e0:	20000354 	.word	0x20000354
 80059e4:	2000036c 	.word	0x2000036c
 80059e8:	20000338 	.word	0x20000338
 80059ec:	2000033c 	.word	0x2000033c

080059f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f6:	e019      	b.n	8005a2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059f8:	f000 fa08 	bl	8005e0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <prvCheckTasksWaitingTermination+0x4c>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff fb0d 	bl	8005028 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <prvCheckTasksWaitingTermination+0x50>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <prvCheckTasksWaitingTermination+0x50>)
 8005a16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <prvCheckTasksWaitingTermination+0x54>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <prvCheckTasksWaitingTermination+0x54>)
 8005a20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a22:	f000 fa21 	bl	8005e68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f80e 	bl	8005a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <prvCheckTasksWaitingTermination+0x54>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e1      	bne.n	80059f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000354 	.word	0x20000354
 8005a40:	20000380 	.word	0x20000380
 8005a44:	20000368 	.word	0x20000368

08005a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d108      	bne.n	8005a6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fb72 	bl	8006148 <vPortFree>
				vPortFree( pxTCB );
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fb6f 	bl	8006148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a6a:	e017      	b.n	8005a9c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d103      	bne.n	8005a7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fb66 	bl	8006148 <vPortFree>
	}
 8005a7c:	e00e      	b.n	8005a9c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d009      	beq.n	8005a9c <prvDeleteTCB+0x54>
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e7fe      	b.n	8005a9a <prvDeleteTCB+0x52>
	}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <prvResetNextTaskUnblockTime+0x44>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <prvResetNextTaskUnblockTime+0x14>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <prvResetNextTaskUnblockTime+0x16>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <prvResetNextTaskUnblockTime+0x48>)
 8005ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ac6:	e008      	b.n	8005ada <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ac8:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <prvResetNextTaskUnblockTime+0x44>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4a05      	ldr	r2, [pc, #20]	; (8005aec <prvResetNextTaskUnblockTime+0x48>)
 8005ad8:	6013      	str	r3, [r2, #0]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000338 	.word	0x20000338
 8005aec:	200003a0 	.word	0x200003a0

08005af0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005afa:	4b29      	ldr	r3, [pc, #164]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b00:	4b28      	ldr	r3, [pc, #160]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fa8e 	bl	8005028 <uxListRemove>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	2201      	movs	r2, #1
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43da      	mvns	r2, r3
 8005b20:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4013      	ands	r3, r2
 8005b26:	4a20      	ldr	r2, [pc, #128]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d10a      	bne.n	8005b48 <prvAddCurrentTaskToDelayedList+0x58>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b38:	4b1a      	ldr	r3, [pc, #104]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	481a      	ldr	r0, [pc, #104]	; (8005bac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b42:	f7ff fa14 	bl	8004f6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b46:	e026      	b.n	8005b96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b50:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d209      	bcs.n	8005b74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b60:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f7ff fa22 	bl	8004fb6 <vListInsert>
}
 8005b72:	e010      	b.n	8005b96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b74:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4610      	mov	r0, r2
 8005b82:	f7ff fa18 	bl	8004fb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b86:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d202      	bcs.n	8005b96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b90:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6013      	str	r3, [r2, #0]
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000384 	.word	0x20000384
 8005ba4:	20000280 	.word	0x20000280
 8005ba8:	20000388 	.word	0x20000388
 8005bac:	2000036c 	.word	0x2000036c
 8005bb0:	2000033c 	.word	0x2000033c
 8005bb4:	20000338 	.word	0x20000338
 8005bb8:	200003a0 	.word	0x200003a0

08005bbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3b04      	subs	r3, #4
 8005bcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3b04      	subs	r3, #4
 8005bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f023 0201 	bic.w	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3b04      	subs	r3, #4
 8005bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bec:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <pxPortInitialiseStack+0x64>)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3b14      	subs	r3, #20
 8005bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b04      	subs	r3, #4
 8005c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f06f 0202 	mvn.w	r2, #2
 8005c0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3b20      	subs	r3, #32
 8005c10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c12:	68fb      	ldr	r3, [r7, #12]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	08005c25 	.word	0x08005c25

08005c24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c2e:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <prvTaskExitError+0x50>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d009      	beq.n	8005c4c <prvTaskExitError+0x28>
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e7fe      	b.n	8005c4a <prvTaskExitError+0x26>
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c5e:	bf00      	nop
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0fc      	beq.n	8005c60 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	2000000c 	.word	0x2000000c
	...

08005c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <pxCurrentTCBConst2>)
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	6808      	ldr	r0, [r1, #0]
 8005c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8a:	f380 8809 	msr	PSP, r0
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8811 	msr	BASEPRI, r0
 8005c9a:	4770      	bx	lr
 8005c9c:	f3af 8000 	nop.w

08005ca0 <pxCurrentTCBConst2>:
 8005ca0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop

08005ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ca8:	4808      	ldr	r0, [pc, #32]	; (8005ccc <prvPortStartFirstTask+0x24>)
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	6800      	ldr	r0, [r0, #0]
 8005cae:	f380 8808 	msr	MSP, r0
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8814 	msr	CONTROL, r0
 8005cba:	b662      	cpsie	i
 8005cbc:	b661      	cpsie	f
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	df00      	svc	0
 8005cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cca:	bf00      	nop
 8005ccc:	e000ed08 	.word	0xe000ed08

08005cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cd6:	4b44      	ldr	r3, [pc, #272]	; (8005de8 <xPortStartScheduler+0x118>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a44      	ldr	r2, [pc, #272]	; (8005dec <xPortStartScheduler+0x11c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d109      	bne.n	8005cf4 <xPortStartScheduler+0x24>
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e7fe      	b.n	8005cf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cf4:	4b3c      	ldr	r3, [pc, #240]	; (8005de8 <xPortStartScheduler+0x118>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a3d      	ldr	r2, [pc, #244]	; (8005df0 <xPortStartScheduler+0x120>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d109      	bne.n	8005d12 <xPortStartScheduler+0x42>
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e7fe      	b.n	8005d10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d12:	4b38      	ldr	r3, [pc, #224]	; (8005df4 <xPortStartScheduler+0x124>)
 8005d14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	4b30      	ldr	r3, [pc, #192]	; (8005df8 <xPortStartScheduler+0x128>)
 8005d38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d3a:	4b30      	ldr	r3, [pc, #192]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d3c:	2207      	movs	r2, #7
 8005d3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d40:	e009      	b.n	8005d56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005d42:	4b2e      	ldr	r3, [pc, #184]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	4a2c      	ldr	r2, [pc, #176]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	d0ef      	beq.n	8005d42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d62:	4b26      	ldr	r3, [pc, #152]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f1c3 0307 	rsb	r3, r3, #7
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d009      	beq.n	8005d82 <xPortStartScheduler+0xb2>
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	60bb      	str	r3, [r7, #8]
 8005d80:	e7fe      	b.n	8005d80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d82:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d8c:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d94:	4a19      	ldr	r2, [pc, #100]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005da0:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <xPortStartScheduler+0x130>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <xPortStartScheduler+0x130>)
 8005da6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005daa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dac:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <xPortStartScheduler+0x130>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <xPortStartScheduler+0x130>)
 8005db2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005db6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005db8:	f000 f8d6 	bl	8005f68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <xPortStartScheduler+0x134>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dc2:	f000 f8f5 	bl	8005fb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dc6:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <xPortStartScheduler+0x138>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a0f      	ldr	r2, [pc, #60]	; (8005e08 <xPortStartScheduler+0x138>)
 8005dcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005dd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dd2:	f7ff ff69 	bl	8005ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dd6:	f7ff fd59 	bl	800588c <vTaskSwitchContext>
	prvTaskExitError();
 8005dda:	f7ff ff23 	bl	8005c24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed00 	.word	0xe000ed00
 8005dec:	410fc271 	.word	0x410fc271
 8005df0:	410fc270 	.word	0x410fc270
 8005df4:	e000e400 	.word	0xe000e400
 8005df8:	200003ac 	.word	0x200003ac
 8005dfc:	200003b0 	.word	0x200003b0
 8005e00:	e000ed20 	.word	0xe000ed20
 8005e04:	2000000c 	.word	0x2000000c
 8005e08:	e000ef34 	.word	0xe000ef34

08005e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e24:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <vPortEnterCritical+0x54>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	4a0d      	ldr	r2, [pc, #52]	; (8005e60 <vPortEnterCritical+0x54>)
 8005e2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <vPortEnterCritical+0x54>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d10e      	bne.n	8005e54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <vPortEnterCritical+0x58>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <vPortEnterCritical+0x48>
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	e7fe      	b.n	8005e52 <vPortEnterCritical+0x46>
	}
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	2000000c 	.word	0x2000000c
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e6e:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <vPortExitCritical+0x4c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <vPortExitCritical+0x22>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	e7fe      	b.n	8005e88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e8a:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <vPortExitCritical+0x4c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <vPortExitCritical+0x4c>)
 8005e92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <vPortExitCritical+0x4c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <vPortExitCritical+0x3e>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	2000000c 	.word	0x2000000c
	...

08005ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ec0:	f3ef 8009 	mrs	r0, PSP
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <pxCurrentTCBConst>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f01e 0f10 	tst.w	lr, #16
 8005ed0:	bf08      	it	eq
 8005ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eda:	6010      	str	r0, [r2, #0]
 8005edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ee4:	f380 8811 	msr	BASEPRI, r0
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f7ff fccc 	bl	800588c <vTaskSwitchContext>
 8005ef4:	f04f 0000 	mov.w	r0, #0
 8005ef8:	f380 8811 	msr	BASEPRI, r0
 8005efc:	bc09      	pop	{r0, r3}
 8005efe:	6819      	ldr	r1, [r3, #0]
 8005f00:	6808      	ldr	r0, [r1, #0]
 8005f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f06:	f01e 0f10 	tst.w	lr, #16
 8005f0a:	bf08      	it	eq
 8005f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f10:	f380 8809 	msr	PSP, r0
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w

08005f20 <pxCurrentTCBConst>:
 8005f20:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f40:	f7ff fbe8 	bl	8005714 <xTaskIncrementTick>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f4a:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <SysTick_Handler+0x3c>)
 8005f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	2300      	movs	r3, #0
 8005f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <vPortSetupTimerInterrupt+0x34>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <vPortSetupTimerInterrupt+0x38>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <vPortSetupTimerInterrupt+0x3c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a0a      	ldr	r2, [pc, #40]	; (8005fa8 <vPortSetupTimerInterrupt+0x40>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	099b      	lsrs	r3, r3, #6
 8005f84:	4a09      	ldr	r2, [pc, #36]	; (8005fac <vPortSetupTimerInterrupt+0x44>)
 8005f86:	3b01      	subs	r3, #1
 8005f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f8a:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <vPortSetupTimerInterrupt+0x34>)
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	601a      	str	r2, [r3, #0]
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	e000e010 	.word	0xe000e010
 8005fa0:	e000e018 	.word	0xe000e018
 8005fa4:	20000000 	.word	0x20000000
 8005fa8:	10624dd3 	.word	0x10624dd3
 8005fac:	e000e014 	.word	0xe000e014

08005fb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fc0 <vPortEnableVFP+0x10>
 8005fb4:	6801      	ldr	r1, [r0, #0]
 8005fb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fba:	6001      	str	r1, [r0, #0]
 8005fbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fbe:	bf00      	nop
 8005fc0:	e000ed88 	.word	0xe000ed88

08005fc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fd0:	f7ff fae6 	bl	80055a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fd4:	4b57      	ldr	r3, [pc, #348]	; (8006134 <pvPortMalloc+0x170>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fdc:	f000 f90c 	bl	80061f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fe0:	4b55      	ldr	r3, [pc, #340]	; (8006138 <pvPortMalloc+0x174>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f040 808c 	bne.w	8006106 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01c      	beq.n	800602e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b00      	cmp	r3, #0
 8006004:	d013      	beq.n	800602e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f023 0307 	bic.w	r3, r3, #7
 800600c:	3308      	adds	r3, #8
 800600e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <pvPortMalloc+0x6a>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e7fe      	b.n	800602c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d068      	beq.n	8006106 <pvPortMalloc+0x142>
 8006034:	4b41      	ldr	r3, [pc, #260]	; (800613c <pvPortMalloc+0x178>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d863      	bhi.n	8006106 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800603e:	4b40      	ldr	r3, [pc, #256]	; (8006140 <pvPortMalloc+0x17c>)
 8006040:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006042:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <pvPortMalloc+0x17c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006048:	e004      	b.n	8006054 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	d903      	bls.n	8006066 <pvPortMalloc+0xa2>
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f1      	bne.n	800604a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006066:	4b33      	ldr	r3, [pc, #204]	; (8006134 <pvPortMalloc+0x170>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606c:	429a      	cmp	r2, r3
 800606e:	d04a      	beq.n	8006106 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2208      	movs	r2, #8
 8006076:	4413      	add	r3, r2
 8006078:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	1ad2      	subs	r2, r2, r3
 800608a:	2308      	movs	r3, #8
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	429a      	cmp	r2, r3
 8006090:	d91e      	bls.n	80060d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <pvPortMalloc+0xf4>
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	e7fe      	b.n	80060b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060ca:	69b8      	ldr	r0, [r7, #24]
 80060cc:	f000 f8f6 	bl	80062bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060d0:	4b1a      	ldr	r3, [pc, #104]	; (800613c <pvPortMalloc+0x178>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	4a18      	ldr	r2, [pc, #96]	; (800613c <pvPortMalloc+0x178>)
 80060dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060de:	4b17      	ldr	r3, [pc, #92]	; (800613c <pvPortMalloc+0x178>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b18      	ldr	r3, [pc, #96]	; (8006144 <pvPortMalloc+0x180>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d203      	bcs.n	80060f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <pvPortMalloc+0x178>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a15      	ldr	r2, [pc, #84]	; (8006144 <pvPortMalloc+0x180>)
 80060f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	4b10      	ldr	r3, [pc, #64]	; (8006138 <pvPortMalloc+0x174>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006106:	f7ff fa59 	bl	80055bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	2b00      	cmp	r3, #0
 8006112:	d009      	beq.n	8006128 <pvPortMalloc+0x164>
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	e7fe      	b.n	8006126 <pvPortMalloc+0x162>
	return pvReturn;
 8006128:	69fb      	ldr	r3, [r7, #28]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3728      	adds	r7, #40	; 0x28
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20003fbc 	.word	0x20003fbc
 8006138:	20003fc8 	.word	0x20003fc8
 800613c:	20003fc0 	.word	0x20003fc0
 8006140:	20003fb4 	.word	0x20003fb4
 8006144:	20003fc4 	.word	0x20003fc4

08006148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d046      	beq.n	80061e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800615a:	2308      	movs	r3, #8
 800615c:	425b      	negs	r3, r3
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	4b20      	ldr	r3, [pc, #128]	; (80061f0 <vPortFree+0xa8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4013      	ands	r3, r2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <vPortFree+0x42>
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	e7fe      	b.n	8006188 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <vPortFree+0x5e>
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60bb      	str	r3, [r7, #8]
 80061a4:	e7fe      	b.n	80061a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <vPortFree+0xa8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d019      	beq.n	80061e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d115      	bne.n	80061e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <vPortFree+0xa8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	43db      	mvns	r3, r3
 80061c6:	401a      	ands	r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061cc:	f7ff f9e8 	bl	80055a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <vPortFree+0xac>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4413      	add	r3, r2
 80061da:	4a06      	ldr	r2, [pc, #24]	; (80061f4 <vPortFree+0xac>)
 80061dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061de:	6938      	ldr	r0, [r7, #16]
 80061e0:	f000 f86c 	bl	80062bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061e4:	f7ff f9ea 	bl	80055bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061e8:	bf00      	nop
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20003fc8 	.word	0x20003fc8
 80061f4:	20003fc0 	.word	0x20003fc0

080061f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006202:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006204:	4b27      	ldr	r3, [pc, #156]	; (80062a4 <prvHeapInit+0xac>)
 8006206:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00c      	beq.n	800622c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3307      	adds	r3, #7
 8006216:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0307 	bic.w	r3, r3, #7
 800621e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	4a1f      	ldr	r2, [pc, #124]	; (80062a4 <prvHeapInit+0xac>)
 8006228:	4413      	add	r3, r2
 800622a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <prvHeapInit+0xb0>)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006236:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <prvHeapInit+0xb0>)
 8006238:	2200      	movs	r2, #0
 800623a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4413      	add	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006244:	2208      	movs	r2, #8
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0307 	bic.w	r3, r3, #7
 8006252:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a15      	ldr	r2, [pc, #84]	; (80062ac <prvHeapInit+0xb4>)
 8006258:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <prvHeapInit+0xb4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2200      	movs	r2, #0
 8006260:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006262:	4b12      	ldr	r3, [pc, #72]	; (80062ac <prvHeapInit+0xb4>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	1ad2      	subs	r2, r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006278:	4b0c      	ldr	r3, [pc, #48]	; (80062ac <prvHeapInit+0xb4>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	4a0a      	ldr	r2, [pc, #40]	; (80062b0 <prvHeapInit+0xb8>)
 8006286:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <prvHeapInit+0xbc>)
 800628e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006290:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <prvHeapInit+0xc0>)
 8006292:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006296:	601a      	str	r2, [r3, #0]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	200003b4 	.word	0x200003b4
 80062a8:	20003fb4 	.word	0x20003fb4
 80062ac:	20003fbc 	.word	0x20003fbc
 80062b0:	20003fc4 	.word	0x20003fc4
 80062b4:	20003fc0 	.word	0x20003fc0
 80062b8:	20003fc8 	.word	0x20003fc8

080062bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062c4:	4b28      	ldr	r3, [pc, #160]	; (8006368 <prvInsertBlockIntoFreeList+0xac>)
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e002      	b.n	80062d0 <prvInsertBlockIntoFreeList+0x14>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d8f7      	bhi.n	80062ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	4413      	add	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d108      	bne.n	80062fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	441a      	add	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	441a      	add	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d118      	bne.n	8006344 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4b15      	ldr	r3, [pc, #84]	; (800636c <prvInsertBlockIntoFreeList+0xb0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d00d      	beq.n	800633a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	441a      	add	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e008      	b.n	800634c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800633a:	4b0c      	ldr	r3, [pc, #48]	; (800636c <prvInsertBlockIntoFreeList+0xb0>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e003      	b.n	800634c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d002      	beq.n	800635a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20003fb4 	.word	0x20003fb4
 800636c:	20003fbc 	.word	0x20003fbc

08006370 <__libc_init_array>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4e0d      	ldr	r6, [pc, #52]	; (80063a8 <__libc_init_array+0x38>)
 8006374:	4c0d      	ldr	r4, [pc, #52]	; (80063ac <__libc_init_array+0x3c>)
 8006376:	1ba4      	subs	r4, r4, r6
 8006378:	10a4      	asrs	r4, r4, #2
 800637a:	2500      	movs	r5, #0
 800637c:	42a5      	cmp	r5, r4
 800637e:	d109      	bne.n	8006394 <__libc_init_array+0x24>
 8006380:	4e0b      	ldr	r6, [pc, #44]	; (80063b0 <__libc_init_array+0x40>)
 8006382:	4c0c      	ldr	r4, [pc, #48]	; (80063b4 <__libc_init_array+0x44>)
 8006384:	f000 f820 	bl	80063c8 <_init>
 8006388:	1ba4      	subs	r4, r4, r6
 800638a:	10a4      	asrs	r4, r4, #2
 800638c:	2500      	movs	r5, #0
 800638e:	42a5      	cmp	r5, r4
 8006390:	d105      	bne.n	800639e <__libc_init_array+0x2e>
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006398:	4798      	blx	r3
 800639a:	3501      	adds	r5, #1
 800639c:	e7ee      	b.n	800637c <__libc_init_array+0xc>
 800639e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a2:	4798      	blx	r3
 80063a4:	3501      	adds	r5, #1
 80063a6:	e7f2      	b.n	800638e <__libc_init_array+0x1e>
 80063a8:	08006460 	.word	0x08006460
 80063ac:	08006460 	.word	0x08006460
 80063b0:	08006460 	.word	0x08006460
 80063b4:	08006464 	.word	0x08006464

080063b8 <memset>:
 80063b8:	4402      	add	r2, r0
 80063ba:	4603      	mov	r3, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	d100      	bne.n	80063c2 <memset+0xa>
 80063c0:	4770      	bx	lr
 80063c2:	f803 1b01 	strb.w	r1, [r3], #1
 80063c6:	e7f9      	b.n	80063bc <memset+0x4>

080063c8 <_init>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr

080063d4 <_fini>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr
