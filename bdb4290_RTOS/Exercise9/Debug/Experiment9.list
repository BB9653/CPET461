
Experiment9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007684  08007684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007724  08007724  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007724  08007724  00017724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800772c  0800772c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004410  20000014  08007748  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004424  08007748  00024424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adce  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037c4  00000000  00000000  0003ae12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  0003e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016b0  00000000  00000000  0003fe00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a54  00000000  00000000  000414b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012881  00000000  00000000  00059f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099c34  00000000  00000000  0006c785  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001063b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d4  00000000  00000000  00106434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800766c 	.word	0x0800766c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800766c 	.word	0x0800766c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000030 	.word	0x20000030
 8000510:	20000084 	.word	0x20000084

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b098      	sub	sp, #96	; 0x60
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fdff 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f861 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9c7 	bl	80008b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8e1 	bl	80006ec <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f90d 	bl	8000748 <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f939 	bl	80007a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f967 	bl	8000804 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000536:	f000 f99b 	bl	8000870 <MX_USB_OTG_FS_HCD_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of CriticalResourceMutex */
  osMutexDef(CriticalResourceMutex);
 800053a:	2300      	movs	r3, #0
 800053c:	65bb      	str	r3, [r7, #88]	; 0x58
 800053e:	2300      	movs	r3, #0
 8000540:	65fb      	str	r3, [r7, #92]	; 0x5c
  CriticalResourceMutexHandle = osMutexCreate(osMutex(CriticalResourceMutex));
 8000542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fd42 	bl	8004fd0 <osMutexCreate>
 800054c:	4602      	mov	r2, r0
 800054e:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <main+0xb4>)
 8000550:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GreenLEDTask */
  osThreadDef(GreenLEDTask, StartGreenLEDTask, osPriorityNormal, 0, 128);
 8000552:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <main+0xb8>)
 8000554:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenLEDTaskHandle = osThreadCreate(osThread(GreenLEDTask), NULL);
 8000566:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f004 fccf 	bl	8004f10 <osThreadCreate>
 8000572:	4602      	mov	r2, r0
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <main+0xbc>)
 8000576:	601a      	str	r2, [r3, #0]

  /* definition and creation of RedLEDTask */
  osThreadDef(RedLEDTask, StartRedLEDTask, osPriorityNormal, 0, 128);
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <main+0xc0>)
 800057a:	f107 0420 	add.w	r4, r7, #32
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RedLEDTaskHandle = osThreadCreate(osThread(RedLEDTask), NULL);
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fcbc 	bl	8004f10 <osThreadCreate>
 8000598:	4602      	mov	r2, r0
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <main+0xc4>)
 800059c:	601a      	str	r2, [r3, #0]

  /* definition and creation of OrangeLEDTask */
  osThreadDef(OrangeLEDTask, StartOrangeLEDTask, osPriorityAboveNormal, 0, 128);
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <main+0xc8>)
 80005a0:	1d3c      	adds	r4, r7, #4
 80005a2:	461d      	mov	r5, r3
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrangeLEDTaskHandle = osThreadCreate(osThread(OrangeLEDTask), NULL);
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fcab 	bl	8004f10 <osThreadCreate>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <main+0xcc>)
 80005be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c0:	f004 fc9f 	bl	8004f02 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0xb0>
 80005c6:	bf00      	nop
 80005c8:	2000434c 	.word	0x2000434c
 80005cc:	08007694 	.word	0x08007694
 80005d0:	2000402c 	.word	0x2000402c
 80005d4:	080076bc 	.word	0x080076bc
 80005d8:	20004028 	.word	0x20004028
 80005dc:	080076e8 	.word	0x080076e8
 80005e0:	20004024 	.word	0x20004024

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09a      	sub	sp, #104	; 0x68
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 f831 	bl	800765a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <SystemClock_Config+0x100>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <SystemClock_Config+0x100>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <SystemClock_Config+0x100>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemClock_Config+0x104>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <SystemClock_Config+0x104>)
 8000640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0x104>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800066a:	23c0      	movs	r3, #192	; 0xc0
 800066c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000672:	2308      	movs	r3, #8
 8000674:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067a:	4618      	mov	r0, r3
 800067c:	f003 f812 	bl	80036a4 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000686:	f000 fa8f 	bl	8000ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	2103      	movs	r1, #3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fa6c 	bl	8003b84 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006b2:	f000 fa79 	bl	8000ba8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006b6:	2301      	movs	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006ba:	23c8      	movs	r3, #200	; 0xc8
 80006bc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006be:	2305      	movs	r3, #5
 80006c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fc7e 	bl	8003fcc <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006d6:	f000 fa67 	bl	8000ba8 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3768      	adds	r7, #104	; 0x68
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f002 f9e3 	bl	8002af4 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fa38 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20003fd0 	.word	0x20003fd0
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2S2_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_I2S2_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2S2_Init+0x50>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2S2_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_I2S2_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_I2S2_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2S2_Init+0x50>)
 800076e:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <MX_I2S2_Init+0x58>)
 8000770:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2S2_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_I2S2_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2S2_Init+0x50>)
 8000780:	2201      	movs	r2, #1
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2S2_Init+0x50>)
 8000786:	f002 faed 	bl	8002d64 <HAL_I2S_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 fa0a 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20004350 	.word	0x20004350
 800079c:	40003800 	.word	0x40003800
 80007a0:	00017700 	.word	0x00017700

080007a4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007aa:	4a14      	ldr	r2, [pc, #80]	; (80007fc <MX_I2S3_Init+0x58>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <MX_I2S3_Init+0x5c>)
 80007ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007e4:	f002 fabe 	bl	8002d64 <HAL_I2S_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ee:	f000 f9db 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20004398 	.word	0x20004398
 80007fc:	40003c00 	.word	0x40003c00
 8000800:	00017700 	.word	0x00017700

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f003 fd07 	bl	8004268 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f9a2 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20004030 	.word	0x20004030
 800086c:	40013000 	.word	0x40013000

08000870 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000876:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800087a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800087e:	2208      	movs	r2, #8
 8000880:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000890:	2202      	movs	r2, #2
 8000892:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800089c:	f000 ff3a 	bl	8001714 <HAL_HCD_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 80008a6:	f000 f97f 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20004088 	.word	0x20004088

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	4b60      	ldr	r3, [pc, #384]	; (8000a50 <MX_GPIO_Init+0x19c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a5f      	ldr	r2, [pc, #380]	; (8000a50 <MX_GPIO_Init+0x19c>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b5d      	ldr	r3, [pc, #372]	; (8000a50 <MX_GPIO_Init+0x19c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	4b59      	ldr	r3, [pc, #356]	; (8000a50 <MX_GPIO_Init+0x19c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a58      	ldr	r2, [pc, #352]	; (8000a50 <MX_GPIO_Init+0x19c>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b56      	ldr	r3, [pc, #344]	; (8000a50 <MX_GPIO_Init+0x19c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b52      	ldr	r3, [pc, #328]	; (8000a50 <MX_GPIO_Init+0x19c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a51      	ldr	r2, [pc, #324]	; (8000a50 <MX_GPIO_Init+0x19c>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <MX_GPIO_Init+0x19c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b4b      	ldr	r3, [pc, #300]	; (8000a50 <MX_GPIO_Init+0x19c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a4a      	ldr	r2, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x19c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b48      	ldr	r3, [pc, #288]	; (8000a50 <MX_GPIO_Init+0x19c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <MX_GPIO_Init+0x19c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a43      	ldr	r2, [pc, #268]	; (8000a50 <MX_GPIO_Init+0x19c>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b41      	ldr	r3, [pc, #260]	; (8000a50 <MX_GPIO_Init+0x19c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <MX_GPIO_Init+0x19c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a3c      	ldr	r2, [pc, #240]	; (8000a50 <MX_GPIO_Init+0x19c>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <MX_GPIO_Init+0x19c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	4837      	ldr	r0, [pc, #220]	; (8000a54 <MX_GPIO_Init+0x1a0>)
 8000978:	f000 fe98 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	4835      	ldr	r0, [pc, #212]	; (8000a58 <MX_GPIO_Init+0x1a4>)
 8000982:	f000 fe93 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000986:	2200      	movs	r2, #0
 8000988:	f24f 0110 	movw	r1, #61456	; 0xf010
 800098c:	4833      	ldr	r0, [pc, #204]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 800098e:	f000 fe8d 	bl	80016ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000992:	2304      	movs	r3, #4
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	482b      	ldr	r0, [pc, #172]	; (8000a54 <MX_GPIO_Init+0x1a0>)
 80009a6:	f000 fcff 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009aa:	2308      	movs	r3, #8
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4824      	ldr	r0, [pc, #144]	; (8000a54 <MX_GPIO_Init+0x1a0>)
 80009c2:	f000 fcf1 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009c6:	2332      	movs	r3, #50	; 0x32
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_GPIO_Init+0x1ac>)
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	481e      	ldr	r0, [pc, #120]	; (8000a54 <MX_GPIO_Init+0x1a0>)
 80009da:	f000 fce5 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009de:	2301      	movs	r3, #1
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_GPIO_Init+0x1a4>)
 80009f6:	f000 fcd7 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_GPIO_Init+0x1ac>)
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4815      	ldr	r0, [pc, #84]	; (8000a64 <MX_GPIO_Init+0x1b0>)
 8000a0e:	f000 fccb 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a12:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a16:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 8000a2c:	f000 fcbc 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a30:	2320      	movs	r3, #32
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 8000a44:	f000 fcb0 	bl	80013a8 <HAL_GPIO_Init>

}
 8000a48:	bf00      	nop
 8000a4a:	3730      	adds	r7, #48	; 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	10120000 	.word	0x10120000
 8000a64:	40020000 	.word	0x40020000

08000a68 <Access_Function>:

/* USER CODE BEGIN 4 */
int Start_Flag = 1;
void Access_Function()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	if (Start_Flag == 1)
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <Access_Function+0x44>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d103      	bne.n	8000a7e <Access_Function+0x16>
	{
		Start_Flag = 0;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <Access_Function+0x44>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	e004      	b.n	8000a88 <Access_Function+0x20>
	}
	else
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <Access_Function+0x48>)
 8000a84:	f000 fe2b 	bl	80016de <HAL_GPIO_TogglePin>

	}
	for(int i = 0; i < 2000000; ++i);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	e002      	b.n	8000a94 <Access_Function+0x2c>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3301      	adds	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <Access_Function+0x4c>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	ddf8      	ble.n	8000a8e <Access_Function+0x26>
	Start_Flag = 1;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <Access_Function+0x44>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
	return;
 8000aa2:	bf00      	nop
}
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	001e847f 	.word	0x001e847f

08000ab8 <StartGreenLEDTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartGreenLEDTask */
void StartGreenLEDTask(void const * argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);// turn green led on
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac6:	480f      	ldr	r0, [pc, #60]	; (8000b04 <StartGreenLEDTask+0x4c>)
 8000ac8:	f000 fdf0 	bl	80016ac <HAL_GPIO_WritePin>
	osMutexWait(CriticalResourceMutexHandle, osWaitForever);//Mutex  (wait)
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <StartGreenLEDTask+0x50>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 fa93 	bl	8005000 <osMutexWait>
	Access_Function();
 8000ada:	f7ff ffc5 	bl	8000a68 <Access_Function>
	osMutexRelease(CriticalResourceMutexHandle);//mutex  (signal)
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <StartGreenLEDTask+0x50>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f004 fada 	bl	800509c <osMutexRelease>
	osDelay(200);// 200 ms delay
 8000ae8:	20c8      	movs	r0, #200	; 0xc8
 8000aea:	f004 fa5d 	bl	8004fa8 <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);//turn green led off
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <StartGreenLEDTask+0x4c>)
 8000af6:	f000 fdd9 	bl	80016ac <HAL_GPIO_WritePin>
	osDelay(200);// 200 ms delay
 8000afa:	20c8      	movs	r0, #200	; 0xc8
 8000afc:	f004 fa54 	bl	8004fa8 <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);// turn green led on
 8000b00:	e7de      	b.n	8000ac0 <StartGreenLEDTask+0x8>
 8000b02:	bf00      	nop
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	2000434c 	.word	0x2000434c

08000b0c <StartRedLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedLEDTask */
void StartRedLEDTask(void const * argument)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRedLEDTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);// turn red led on
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <StartRedLEDTask+0x50>)
 8000b1c:	f000 fdc6 	bl	80016ac <HAL_GPIO_WritePin>
	osMutexWait(CriticalResourceMutexHandle, osWaitForever);// Mutex P(wait)
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <StartRedLEDTask+0x54>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 fa69 	bl	8005000 <osMutexWait>
	Access_Function();
 8000b2e:	f7ff ff9b 	bl	8000a68 <Access_Function>
	osMutexRelease(CriticalResourceMutexHandle);//Mutex V(signal)
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <StartRedLEDTask+0x54>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 fab0 	bl	800509c <osMutexRelease>
    osDelay(550);//550 ms delay
 8000b3c:	f240 2026 	movw	r0, #550	; 0x226
 8000b40:	f004 fa32 	bl	8004fa8 <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);//turn red led off
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <StartRedLEDTask+0x50>)
 8000b4c:	f000 fdae 	bl	80016ac <HAL_GPIO_WritePin>
    osDelay(550);//550 ms delay
 8000b50:	f240 2026 	movw	r0, #550	; 0x226
 8000b54:	f004 fa28 	bl	8004fa8 <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);// turn red led on
 8000b58:	e7dc      	b.n	8000b14 <StartRedLEDTask+0x8>
 8000b5a:	bf00      	nop
 8000b5c:	40020c00 	.word	0x40020c00
 8000b60:	2000434c 	.word	0x2000434c

08000b64 <StartOrangeLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOrangeLEDTask */
void StartOrangeLEDTask(void const * argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOrangeLEDTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);// toggle orange led
 8000b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <StartOrangeLEDTask+0x1c>)
 8000b72:	f000 fdb4 	bl	80016de <HAL_GPIO_TogglePin>
    osDelay(50); // 50mS Delay
 8000b76:	2032      	movs	r0, #50	; 0x32
 8000b78:	f004 fa16 	bl	8004fa8 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);// toggle orange led
 8000b7c:	e7f6      	b.n	8000b6c <StartOrangeLEDTask+0x8>
 8000b7e:	bf00      	nop
 8000b80:	40020c00 	.word	0x40020c00

08000b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b96:	f000 fae3 	bl	8001160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_MspInit+0x54>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <HAL_MspInit+0x54>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x54>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_MspInit+0x54>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_MspInit+0x54>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_MspInit+0x54>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	f06f 0001 	mvn.w	r0, #1
 8000bfe:	f000 fba9 	bl	8001354 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_I2C_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12c      	bne.n	8000c8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c60:	2304      	movs	r3, #4
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480c      	ldr	r0, [pc, #48]	; (8000c9c <HAL_I2C_MspInit+0x8c>)
 8000c6c:	f000 fb9c 	bl	80013a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40005400 	.word	0x40005400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400

08000ca0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a59      	ldr	r2, [pc, #356]	; (8000e24 <HAL_I2S_MspInit+0x184>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d15b      	bne.n	8000d7a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
 8000cc6:	4b58      	ldr	r3, [pc, #352]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a57      	ldr	r2, [pc, #348]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b55      	ldr	r3, [pc, #340]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cda:	623b      	str	r3, [r7, #32]
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a50      	ldr	r2, [pc, #320]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a49      	ldr	r2, [pc, #292]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d16:	2304      	movs	r3, #4
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d26:	2306      	movs	r3, #6
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	483e      	ldr	r0, [pc, #248]	; (8000e2c <HAL_I2S_MspInit+0x18c>)
 8000d32:	f000 fb39 	bl	80013a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d36:	2308      	movs	r3, #8
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d46:	2305      	movs	r3, #5
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4836      	ldr	r0, [pc, #216]	; (8000e2c <HAL_I2S_MspInit+0x18c>)
 8000d52:	f000 fb29 	bl	80013a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	482f      	ldr	r0, [pc, #188]	; (8000e30 <HAL_I2S_MspInit+0x190>)
 8000d74:	f000 fb18 	bl	80013a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d78:	e04f      	b.n	8000e1a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <HAL_I2S_MspInit+0x194>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d14a      	bne.n	8000e1a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_I2S_MspInit+0x188>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de8:	2306      	movs	r3, #6
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4811      	ldr	r0, [pc, #68]	; (8000e38 <HAL_I2S_MspInit+0x198>)
 8000df4:	f000 fad8 	bl	80013a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000df8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_I2S_MspInit+0x18c>)
 8000e16:	f000 fac7 	bl	80013a8 <HAL_GPIO_Init>
}
 8000e1a:	bf00      	nop
 8000e1c:	3738      	adds	r7, #56	; 0x38
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40003800 	.word	0x40003800
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40003c00 	.word	0x40003c00
 8000e38:	40020000 	.word	0x40020000

08000e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_SPI_MspInit+0x84>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d12b      	bne.n	8000eb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e96:	23e0      	movs	r3, #224	; 0xe0
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_SPI_MspInit+0x8c>)
 8000eb2:	f000 fa79 	bl	80013a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40013000 	.word	0x40013000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eec:	d147      	bne.n	8000f7e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <HAL_HCD_MspInit+0xbc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a24      	ldr	r2, [pc, #144]	; (8000f88 <HAL_HCD_MspInit+0xbc>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <HAL_HCD_MspInit+0xbc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481b      	ldr	r0, [pc, #108]	; (8000f8c <HAL_HCD_MspInit+0xc0>)
 8000f20:	f000 fa42 	bl	80013a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000f24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f36:	230a      	movs	r3, #10
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4812      	ldr	r0, [pc, #72]	; (8000f8c <HAL_HCD_MspInit+0xc0>)
 8000f42:	f000 fa31 	bl	80013a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_HCD_MspInit+0xbc>)
 8000f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <HAL_HCD_MspInit+0xbc>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	6353      	str	r3, [r2, #52]	; 0x34
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_HCD_MspInit+0xbc>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_HCD_MspInit+0xbc>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_HCD_MspInit+0xbc>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2105      	movs	r1, #5
 8000f72:	2043      	movs	r0, #67	; 0x43
 8000f74:	f000 f9ee 	bl	8001354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000f78:	2043      	movs	r0, #67	; 0x43
 8000f7a:	f000 fa07 	bl	800138c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	2019      	movs	r0, #25
 8000fa6:	f000 f9d5 	bl	8001354 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000faa:	2019      	movs	r0, #25
 8000fac:	f000 f9ee 	bl	800138c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_InitTick+0xa0>)
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <HAL_InitTick+0xa0>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_InitTick+0xa0>)
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fcc:	f107 0210 	add.w	r2, r7, #16
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 ffc6 	bl	8003f68 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fdc:	f002 ffb0 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8000fe0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <HAL_InitTick+0xa4>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0c9b      	lsrs	r3, r3, #18
 8000fec:	3b01      	subs	r3, #1
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_InitTick+0xa8>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <HAL_InitTick+0xac>)
 8000ff4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_InitTick+0xa8>)
 8000ff8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ffc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_InitTick+0xa8>)
 8001000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001002:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_InitTick+0xa8>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_InitTick+0xa8>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <HAL_InitTick+0xa8>)
 8001012:	f003 f98d 	bl	8004330 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <HAL_InitTick+0xa8>)
 800101e:	f003 f9bc 	bl	800439a <HAL_TIM_Base_Start_IT>
 8001022:	4603      	mov	r3, r0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	431bde83 	.word	0x431bde83
 8001038:	200043e0 	.word	0x200043e0
 800103c:	40010000 	.word	0x40010000

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800107a:	f003 f9b2 	bl	80043e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200043e0 	.word	0x200043e0

08001088 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <OTG_FS_IRQHandler+0x10>)
 800108e:	f000 fba3 	bl	80017d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20004088 	.word	0x20004088

0800109c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <SystemInit+0x28>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <SystemInit+0x28>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SystemInit+0x28>)
 80010b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b6:	609a      	str	r2, [r3, #8]
#endif
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ce:	e003      	b.n	80010d8 <LoopCopyDataInit>

080010d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010d6:	3104      	adds	r1, #4

080010d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010e0:	d3f6      	bcc.n	80010d0 <CopyDataInit>
  ldr  r2, =_sbss
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010e4:	e002      	b.n	80010ec <LoopFillZerobss>

080010e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e8:	f842 3b04 	str.w	r3, [r2], #4

080010ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010f0:	d3f9      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010f2:	f7ff ffd3 	bl	800109c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f006 fa81 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fa0b 	bl	8000514 <main>
  bx  lr    
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001100:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001104:	08007734 	.word	0x08007734
  ldr  r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800110c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001110:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001114:	20004424 	.word	0x20004424

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <HAL_Init+0x40>)
 8001126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_Init+0x40>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x40>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f8fa 	bl	800133e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff ff20 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fd32 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20004420 	.word	0x20004420

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20004420 	.word	0x20004420

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_Delay+0x40>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000000c 	.word	0x2000000c

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff4c 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001366:	f7ff ff61 	bl	800122c <__NVIC_GetPriorityGrouping>
 800136a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	6978      	ldr	r0, [r7, #20]
 8001372:	f7ff ffb1 	bl	80012d8 <NVIC_EncodePriority>
 8001376:	4602      	mov	r2, r0
 8001378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff80 	bl	8001284 <__NVIC_SetPriority>
}
 8001384:	bf00      	nop
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff54 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	e159      	b.n	8001678 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013c4:	2201      	movs	r2, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f040 8148 	bne.w	8001672 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d00b      	beq.n	8001402 <HAL_GPIO_Init+0x5a>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f6:	2b11      	cmp	r3, #17
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b12      	cmp	r3, #18
 8001400:	d130      	bne.n	8001464 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f003 0201 	and.w	r2, r3, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0xfc>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b12      	cmp	r3, #18
 80014a2:	d123      	bne.n	80014ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	08da      	lsrs	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	69b9      	ldr	r1, [r7, #24]
 80014e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0203 	and.w	r2, r3, #3
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a2 	beq.w	8001672 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_GPIO_Init+0x2e4>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_GPIO_Init+0x2e4>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_GPIO_Init+0x2e4>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154a:	4a51      	ldr	r2, [pc, #324]	; (8001690 <HAL_GPIO_Init+0x2e8>)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a48      	ldr	r2, [pc, #288]	; (8001694 <HAL_GPIO_Init+0x2ec>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x202>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a47      	ldr	r2, [pc, #284]	; (8001698 <HAL_GPIO_Init+0x2f0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x1fe>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a46      	ldr	r2, [pc, #280]	; (800169c <HAL_GPIO_Init+0x2f4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x1fa>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <HAL_GPIO_Init+0x2f8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x1f6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <HAL_GPIO_Init+0x2fc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x1f2>
 8001596:	2304      	movs	r3, #4
 8001598:	e008      	b.n	80015ac <HAL_GPIO_Init+0x204>
 800159a:	2307      	movs	r3, #7
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x204>
 800159e:	2303      	movs	r3, #3
 80015a0:	e004      	b.n	80015ac <HAL_GPIO_Init+0x204>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x204>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x204>
 80015aa:	2300      	movs	r3, #0
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f002 0203 	and.w	r2, r2, #3
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	4093      	lsls	r3, r2
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015bc:	4934      	ldr	r1, [pc, #208]	; (8001690 <HAL_GPIO_Init+0x2e8>)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <HAL_GPIO_Init+0x300>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ee:	4a2e      	ldr	r2, [pc, #184]	; (80016a8 <HAL_GPIO_Init+0x300>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015f4:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <HAL_GPIO_Init+0x300>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001618:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <HAL_GPIO_Init+0x300>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_GPIO_Init+0x300>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001642:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <HAL_GPIO_Init+0x300>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_GPIO_Init+0x300>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_GPIO_Init+0x300>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3301      	adds	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	f67f aea2 	bls.w	80013c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001680:	bf00      	nop
 8001682:	3724      	adds	r7, #36	; 0x24
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40013c00 	.word	0x40013c00

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	619a      	str	r2, [r3, #24]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	401a      	ands	r2, r3
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d104      	bne.n	8001702 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	041a      	lsls	r2, r3, #16
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001700:	e002      	b.n	8001708 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	b08f      	sub	sp, #60	; 0x3c
 8001718:	af0a      	add	r7, sp, #40	; 0x28
 800171a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e054      	b.n	80017d0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d106      	bne.n	8001746 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fbc3 	bl	8000ecc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 f862 	bl	800482e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	687e      	ldr	r6, [r7, #4]
 8001772:	466d      	mov	r5, sp
 8001774:	f106 0410 	add.w	r4, r6, #16
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001780:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001784:	e885 0003 	stmia.w	r5, {r0, r1}
 8001788:	1d33      	adds	r3, r6, #4
 800178a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800178c:	6838      	ldr	r0, [r7, #0]
 800178e:	f002 ffed 	bl	800476c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2101      	movs	r1, #1
 8001798:	4618      	mov	r0, r3
 800179a:	f003 f859 	bl	8004850 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	687e      	ldr	r6, [r7, #4]
 80017a6:	466d      	mov	r5, sp
 80017a8:	f106 0410 	add.w	r4, r6, #16
 80017ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80017bc:	1d33      	adds	r3, r6, #4
 80017be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f003 f935 	bl	8004a30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 f8dc 	bl	80049ac <USB_GetMode>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	f040 80f1 	bne.w	80019de <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f003 f8c0 	bl	8004986 <USB_ReadInterrupts>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80e7 	beq.w	80019dc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f003 f8b7 	bl	8004986 <USB_ReadInterrupts>
 8001818:	4603      	mov	r3, r0
 800181a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001822:	d104      	bne.n	800182e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800182c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f003 f8a7 	bl	8004986 <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001842:	d104      	bne.n	800184e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800184c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f003 f897 	bl	8004986 <USB_ReadInterrupts>
 8001858:	4603      	mov	r3, r0
 800185a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800185e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001862:	d104      	bne.n	800186e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800186c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f003 f887 	bl	8004986 <USB_ReadInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b02      	cmp	r3, #2
 8001880:	d103      	bne.n	800188a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2202      	movs	r2, #2
 8001888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f003 f879 	bl	8004986 <USB_ReadInterrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800189a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800189e:	d117      	bne.n	80018d0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80018ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80018b2:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f8a9 	bl	8001a0c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2101      	movs	r1, #1
 80018c0:	4618      	mov	r0, r3
 80018c2:	f003 f971 	bl	8004ba8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 f856 	bl	8004986 <USB_ReadInterrupts>
 80018da:	4603      	mov	r3, r0
 80018dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d102      	bne.n	80018ec <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f001 f874 	bl	80029d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f848 	bl	8004986 <USB_ReadInterrupts>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d106      	bne.n	800190e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f86f 	bl	80019e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2208      	movs	r2, #8
 800190c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f003 f837 	bl	8004986 <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001922:	d138      	bne.n	8001996 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 f9b0 	bl	8004c8e <USB_HC_ReadInterrupt>
 800192e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e025      	b.n	8001982 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d018      	beq.n	800197c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800195c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001960:	d106      	bne.n	8001970 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f87b 	bl	8001a64 <HCD_HC_IN_IRQHandler>
 800196e:	e005      	b.n	800197c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4619      	mov	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fc0b 	bl	8002192 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	d3d4      	bcc.n	8001936 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fff3 	bl	8004986 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d101      	bne.n	80019ae <HAL_HCD_IRQHandler+0x1d6>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_HCD_IRQHandler+0x1d8>
 80019ae:	2300      	movs	r3, #0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d014      	beq.n	80019de <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0210 	bic.w	r2, r2, #16
 80019c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 ff59 	bl	800287c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699a      	ldr	r2, [r3, #24]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0210 	orr.w	r2, r2, #16
 80019d8:	619a      	str	r2, [r3, #24]
 80019da:	e000      	b.n	80019de <HAL_HCD_IRQHandler+0x206>
      return;
 80019dc:	bf00      	nop
    }
  }
}
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
 8001a54:	4613      	mov	r3, r2
 8001a56:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d119      	bne.n	8001ac8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	0151      	lsls	r1, r2, #5
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	440a      	add	r2, r1
 8001abc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	60d3      	str	r3, [r2, #12]
 8001ac6:	e095      	b.n	8001bf4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	d109      	bne.n	8001af2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	461a      	mov	r2, r3
 8001aec:	2320      	movs	r3, #32
 8001aee:	6093      	str	r3, [r2, #8]
 8001af0:	e080      	b.n	8001bf4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d134      	bne.n	8001b72 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	0151      	lsls	r1, r2, #5
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	440a      	add	r2, r1
 8001b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	335d      	adds	r3, #93	; 0x5d
 8001b38:	2205      	movs	r2, #5
 8001b3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 f8a0 	bl	8004cb0 <USB_HC_Halt>
 8001b70:	e040      	b.n	8001bf4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b88:	d134      	bne.n	8001bf4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	0151      	lsls	r1, r2, #5
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	440a      	add	r2, r1
 8001ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 f87b 	bl	8004cb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2310      	movs	r3, #16
 8001bca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	335d      	adds	r3, #93	; 0x5d
 8001bdc:	2208      	movs	r2, #8
 8001bde:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bec:	461a      	mov	r2, r3
 8001bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0a:	d122      	bne.n	8001c52 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	0151      	lsls	r1, r2, #5
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	440a      	add	r2, r1
 8001c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 f83a 	bl	8004cb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001c50:	e29b      	b.n	800218a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 80c1 	bne.w	8001dec <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01b      	beq.n	8001caa <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	3348      	adds	r3, #72	; 0x48
 8001c82:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	0159      	lsls	r1, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001c96:	1ad1      	subs	r1, r2, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4403      	add	r3, r0
 8001ca6:	334c      	adds	r3, #76	; 0x4c
 8001ca8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	335d      	adds	r3, #93	; 0x5d
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	3358      	adds	r3, #88	; 0x58
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	333f      	adds	r3, #63	; 0x3f
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00a      	beq.n	8001d10 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	333f      	adds	r3, #63	; 0x3f
 8001d0a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d121      	bne.n	8001d54 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	0151      	lsls	r1, r2, #5
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	440a      	add	r2, r1
 8001d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 ffb8 	bl	8004cb0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2310      	movs	r3, #16
 8001d50:	6093      	str	r3, [r2, #8]
 8001d52:	e034      	b.n	8001dbe <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	333f      	adds	r3, #63	; 0x3f
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d129      	bne.n	8001dbe <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	0151      	lsls	r1, r2, #5
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	440a      	add	r2, r1
 8001d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d88:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	335c      	adds	r3, #92	; 0x5c
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	b2d8      	uxtb	r0, r3
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	335c      	adds	r3, #92	; 0x5c
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4601      	mov	r1, r0
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff fe45 	bl	8001a48 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	3350      	adds	r3, #80	; 0x50
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	f083 0301 	eor.w	r3, r3, #1
 8001dd4:	b2d8      	uxtb	r0, r3
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	3350      	adds	r3, #80	; 0x50
 8001de6:	4602      	mov	r2, r0
 8001de8:	701a      	strb	r2, [r3, #0]
}
 8001dea:	e1ce      	b.n	800218a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	f040 80f1 	bne.w	8001fe6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	0151      	lsls	r1, r2, #5
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	440a      	add	r2, r1
 8001e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1e:	f023 0302 	bic.w	r3, r3, #2
 8001e22:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	335d      	adds	r3, #93	; 0x5d
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10a      	bne.n	8001e50 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	335c      	adds	r3, #92	; 0x5c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e0b0      	b.n	8001fb2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	335d      	adds	r3, #93	; 0x5d
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d10a      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	335c      	adds	r3, #92	; 0x5c
 8001e76:	2205      	movs	r2, #5
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e09a      	b.n	8001fb2 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	335d      	adds	r3, #93	; 0x5d
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d00a      	beq.n	8001ea8 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	335d      	adds	r3, #93	; 0x5d
 8001ea2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d156      	bne.n	8001f56 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3358      	adds	r3, #88	; 0x58
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4403      	add	r3, r0
 8001eca:	3358      	adds	r3, #88	; 0x58
 8001ecc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	3358      	adds	r3, #88	; 0x58
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d914      	bls.n	8001f0e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3358      	adds	r3, #88	; 0x58
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	335c      	adds	r3, #92	; 0x5c
 8001f08:	2204      	movs	r2, #4
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e009      	b.n	8001f22 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	335c      	adds	r3, #92	; 0x5c
 8001f1e:	2202      	movs	r2, #2
 8001f20:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f38:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f40:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e02d      	b.n	8001fb2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	335d      	adds	r3, #93	; 0x5d
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d122      	bne.n	8001fb2 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	335c      	adds	r3, #92	; 0x5c
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f96:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f9e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	461a      	mov	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	b2d8      	uxtb	r0, r3
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	335c      	adds	r3, #92	; 0x5c
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4601      	mov	r1, r0
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fd32 	bl	8001a48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001fe4:	e0d1      	b.n	800218a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d13e      	bne.n	800207a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	0151      	lsls	r1, r2, #5
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	440a      	add	r2, r1
 8002012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	3358      	adds	r3, #88	; 0x58
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	1c59      	adds	r1, r3, #1
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4403      	add	r3, r0
 800203e:	3358      	adds	r3, #88	; 0x58
 8002040:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	335d      	adds	r3, #93	; 0x5d
 8002052:	2206      	movs	r2, #6
 8002054:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fe25 	bl	8004cb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	461a      	mov	r2, r3
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	6093      	str	r3, [r2, #8]
}
 8002078:	e087      	b.n	800218a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b10      	cmp	r3, #16
 800208e:	d17c      	bne.n	800218a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	333f      	adds	r3, #63	; 0x3f
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d122      	bne.n	80020ec <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	3358      	adds	r3, #88	; 0x58
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	0151      	lsls	r1, r2, #5
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	440a      	add	r2, r1
 80020d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fde3 	bl	8004cb0 <USB_HC_Halt>
 80020ea:	e045      	b.n	8002178 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	333f      	adds	r3, #63	; 0x3f
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	333f      	adds	r3, #63	; 0x3f
 8002112:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002114:	2b02      	cmp	r3, #2
 8002116:	d12f      	bne.n	8002178 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	3358      	adds	r3, #88	; 0x58
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d121      	bne.n	8002178 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	335d      	adds	r3, #93	; 0x5d
 8002144:	2203      	movs	r2, #3
 8002146:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	0151      	lsls	r1, r2, #5
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	440a      	add	r2, r1
 800215e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fd9c 	bl	8004cb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	2310      	movs	r3, #16
 8002188:	6093      	str	r3, [r2, #8]
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d119      	bne.n	80021f6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ce:	461a      	mov	r2, r3
 80021d0:	2304      	movs	r3, #4
 80021d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	0151      	lsls	r1, r2, #5
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	440a      	add	r2, r1
 80021ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80021f4:	e33e      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b20      	cmp	r3, #32
 800220a:	d141      	bne.n	8002290 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	2320      	movs	r3, #32
 800221c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	333d      	adds	r3, #61	; 0x3d
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	f040 831f 	bne.w	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	333d      	adds	r3, #61	; 0x3d
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	335c      	adds	r3, #92	; 0x5c
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	0151      	lsls	r1, r2, #5
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	440a      	add	r2, r1
 8002274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f002 fd11 	bl	8004cb0 <USB_HC_Halt>
}
 800228e:	e2f1      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d13f      	bne.n	8002326 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	440b      	add	r3, r1
 80022b4:	335d      	adds	r3, #93	; 0x5d
 80022b6:	2204      	movs	r2, #4
 80022b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	333d      	adds	r3, #61	; 0x3d
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	3358      	adds	r3, #88	; 0x58
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	0151      	lsls	r1, r2, #5
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	440a      	add	r2, r1
 80022f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fccf 	bl	8004cb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231e:	461a      	mov	r2, r3
 8002320:	2340      	movs	r3, #64	; 0x40
 8002322:	6093      	str	r3, [r2, #8]
}
 8002324:	e2a6      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233c:	d122      	bne.n	8002384 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	0151      	lsls	r1, r2, #5
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	440a      	add	r2, r1
 8002354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f002 fca1 	bl	8004cb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	461a      	mov	r2, r3
 800237c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002380:	6093      	str	r3, [r2, #8]
}
 8002382:	e277      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d135      	bne.n	8002406 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	3358      	adds	r3, #88	; 0x58
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	0151      	lsls	r1, r2, #5
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	440a      	add	r2, r1
 80023c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fc69 	bl	8004cb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	461a      	mov	r2, r3
 80023ec:	2301      	movs	r3, #1
 80023ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	335d      	adds	r3, #93	; 0x5d
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
}
 8002404:	e236      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b08      	cmp	r3, #8
 800241a:	d12b      	bne.n	8002474 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	461a      	mov	r2, r3
 800242a:	2308      	movs	r3, #8
 800242c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	0151      	lsls	r1, r2, #5
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	440a      	add	r2, r1
 8002444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f002 fc29 	bl	8004cb0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	335d      	adds	r3, #93	; 0x5d
 800246e:	2205      	movs	r2, #5
 8002470:	701a      	strb	r2, [r3, #0]
}
 8002472:	e1ff      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b10      	cmp	r3, #16
 8002488:	d155      	bne.n	8002536 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	3358      	adds	r3, #88	; 0x58
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	335d      	adds	r3, #93	; 0x5d
 80024ae:	2203      	movs	r2, #3
 80024b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	333d      	adds	r3, #61	; 0x3d
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d114      	bne.n	80024f2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	333c      	adds	r3, #60	; 0x3c
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	440b      	add	r3, r1
 80024ec:	333d      	adds	r3, #61	; 0x3d
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	0151      	lsls	r1, r2, #5
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	440a      	add	r2, r1
 8002508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fbc7 	bl	8004cb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	461a      	mov	r2, r3
 8002530:	2310      	movs	r3, #16
 8002532:	6093      	str	r3, [r2, #8]
}
 8002534:	e19e      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d12b      	bne.n	80025a4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	0151      	lsls	r1, r2, #5
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	440a      	add	r2, r1
 8002562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fb9a 	bl	8004cb0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	335d      	adds	r3, #93	; 0x5d
 800258c:	2206      	movs	r2, #6
 800258e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	461a      	mov	r2, r3
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	6093      	str	r3, [r2, #8]
}
 80025a2:	e167      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ba:	d135      	bne.n	8002628 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	0151      	lsls	r1, r2, #5
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	440a      	add	r2, r1
 80025d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fb62 	bl	8004cb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	461a      	mov	r2, r3
 80025fa:	2310      	movs	r3, #16
 80025fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	461a      	mov	r2, r3
 800260c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002610:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	335d      	adds	r3, #93	; 0x5d
 8002622:	2208      	movs	r2, #8
 8002624:	701a      	strb	r2, [r3, #0]
}
 8002626:	e125      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	f040 811a 	bne.w	8002874 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	0151      	lsls	r1, r2, #5
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	440a      	add	r2, r1
 8002656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265a:	f023 0302 	bic.w	r3, r3, #2
 800265e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	335d      	adds	r3, #93	; 0x5d
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d137      	bne.n	80026e6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	335c      	adds	r3, #92	; 0x5c
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	333f      	adds	r3, #63	; 0x3f
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d00b      	beq.n	80026b8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	333f      	adds	r3, #63	; 0x3f
 80026b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	f040 80c5 	bne.w	8002842 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	3351      	adds	r3, #81	; 0x51
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	f083 0301 	eor.w	r3, r3, #1
 80026ce:	b2d8      	uxtb	r0, r3
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	3351      	adds	r3, #81	; 0x51
 80026e0:	4602      	mov	r2, r0
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e0ad      	b.n	8002842 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	335d      	adds	r3, #93	; 0x5d
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d10a      	bne.n	8002712 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	335c      	adds	r3, #92	; 0x5c
 800270c:	2202      	movs	r2, #2
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e097      	b.n	8002842 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	335d      	adds	r3, #93	; 0x5d
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d10a      	bne.n	800273e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	2202      	movs	r2, #2
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e081      	b.n	8002842 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	440b      	add	r3, r1
 800274c:	335d      	adds	r3, #93	; 0x5d
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d10a      	bne.n	800276a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	335c      	adds	r3, #92	; 0x5c
 8002764:	2205      	movs	r2, #5
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	e06b      	b.n	8002842 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	335d      	adds	r3, #93	; 0x5d
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b06      	cmp	r3, #6
 800277e:	d00a      	beq.n	8002796 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	335d      	adds	r3, #93	; 0x5d
 8002790:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002792:	2b08      	cmp	r3, #8
 8002794:	d155      	bne.n	8002842 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3358      	adds	r3, #88	; 0x58
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	1c59      	adds	r1, r3, #1
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4403      	add	r3, r0
 80027b8:	3358      	adds	r3, #88	; 0x58
 80027ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	3358      	adds	r3, #88	; 0x58
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d914      	bls.n	80027fc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	3358      	adds	r3, #88	; 0x58
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	335c      	adds	r3, #92	; 0x5c
 80027f6:	2204      	movs	r2, #4
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e009      	b.n	8002810 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	335c      	adds	r3, #92	; 0x5c
 800280c:	2202      	movs	r2, #2
 800280e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002826:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800282e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	461a      	mov	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	461a      	mov	r2, r3
 8002850:	2302      	movs	r3, #2
 8002852:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	b2d8      	uxtb	r0, r3
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	335c      	adds	r3, #92	; 0x5c
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	4601      	mov	r1, r0
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff f8ea 	bl	8001a48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002874:	bf00      	nop
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	0c5b      	lsrs	r3, r3, #17
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d003      	beq.n	80028c0 <HCD_RXQLVL_IRQHandler+0x44>
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	f000 8082 	beq.w	80029c2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028be:	e083      	b.n	80029c8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d07f      	beq.n	80029c6 <HCD_RXQLVL_IRQHandler+0x14a>
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	3344      	adds	r3, #68	; 0x44
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d074      	beq.n	80029c6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3344      	adds	r3, #68	; 0x44
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	b292      	uxth	r2, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f002 f81c 	bl	8004934 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	3344      	adds	r3, #68	; 0x44
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	18d1      	adds	r1, r2, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4403      	add	r3, r0
 8002920:	3344      	adds	r3, #68	; 0x44
 8002922:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	334c      	adds	r3, #76	; 0x4c
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	18d1      	adds	r1, r2, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4403      	add	r3, r0
 8002948:	334c      	adds	r3, #76	; 0x4c
 800294a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HCD_RXQLVL_IRQHandler+0x154>)
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d031      	beq.n	80029c6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002978:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002980:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	3350      	adds	r3, #80	; 0x50
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2d8      	uxtb	r0, r3
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	3350      	adds	r3, #80	; 0x50
 80029bc:	4602      	mov	r2, r0
 80029be:	701a      	strb	r2, [r3, #0]
      break;
 80029c0:	e001      	b.n	80029c6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80029c6:	bf00      	nop
  }
}
 80029c8:	bf00      	nop
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	1ff80000 	.word	0x1ff80000

080029d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a00:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d113      	bne.n	8002a34 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10a      	bne.n	8002a2c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002a24:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe ffe6 	bl	80019f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d147      	bne.n	8002ace <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f043 0308 	orr.w	r3, r3, #8
 8002a44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d129      	bne.n	8002aa4 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d113      	bne.n	8002a80 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a62:	d106      	bne.n	8002a72 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 f89c 	bl	8004ba8 <USB_InitFSLSPClkSel>
 8002a70:	e011      	b.n	8002a96 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2101      	movs	r1, #1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 f895 	bl	8004ba8 <USB_InitFSLSPClkSel>
 8002a7e:	e00a      	b.n	8002a96 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a94:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe ffc2 	bl	8001a20 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7fe ffab 	bl	80019f8 <HAL_HCD_Connect_Callback>
 8002aa2:	e014      	b.n	8002ace <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7fe ffc5 	bl	8001a34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002ab8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002abc:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699a      	ldr	r2, [r3, #24]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002acc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d103      	bne.n	8002ae0 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f043 0320 	orr.w	r3, r3, #32
 8002ade:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e11f      	b.n	8002d46 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f878 	bl	8000c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b58:	f001 f9de 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8002b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a7b      	ldr	r2, [pc, #492]	; (8002d50 <HAL_I2C_Init+0x25c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d807      	bhi.n	8002b78 <HAL_I2C_Init+0x84>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a7a      	ldr	r2, [pc, #488]	; (8002d54 <HAL_I2C_Init+0x260>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e006      	b.n	8002b86 <HAL_I2C_Init+0x92>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a77      	ldr	r2, [pc, #476]	; (8002d58 <HAL_I2C_Init+0x264>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	bf94      	ite	ls
 8002b80:	2301      	movls	r3, #1
 8002b82:	2300      	movhi	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0db      	b.n	8002d46 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a72      	ldr	r2, [pc, #456]	; (8002d5c <HAL_I2C_Init+0x268>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0c9b      	lsrs	r3, r3, #18
 8002b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a64      	ldr	r2, [pc, #400]	; (8002d50 <HAL_I2C_Init+0x25c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d802      	bhi.n	8002bc8 <HAL_I2C_Init+0xd4>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	e009      	b.n	8002bdc <HAL_I2C_Init+0xe8>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a63      	ldr	r2, [pc, #396]	; (8002d60 <HAL_I2C_Init+0x26c>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	3301      	adds	r3, #1
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4956      	ldr	r1, [pc, #344]	; (8002d50 <HAL_I2C_Init+0x25c>)
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	d80d      	bhi.n	8002c18 <HAL_I2C_Init+0x124>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e59      	subs	r1, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	bf38      	it	cc
 8002c14:	2304      	movcc	r3, #4
 8002c16:	e04f      	b.n	8002cb8 <HAL_I2C_Init+0x1c4>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d111      	bne.n	8002c44 <HAL_I2C_Init+0x150>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1e58      	subs	r0, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e012      	b.n	8002c6a <HAL_I2C_Init+0x176>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1e58      	subs	r0, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	0099      	lsls	r1, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Init+0x17e>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e022      	b.n	8002cb8 <HAL_I2C_Init+0x1c4>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <HAL_I2C_Init+0x1a4>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1e58      	subs	r0, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	440b      	add	r3, r1
 8002c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c96:	e00f      	b.n	8002cb8 <HAL_I2C_Init+0x1c4>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1e58      	subs	r0, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	0099      	lsls	r1, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	6809      	ldr	r1, [r1, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6911      	ldr	r1, [r2, #16]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68d2      	ldr	r2, [r2, #12]
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	000186a0 	.word	0x000186a0
 8002d54:	001e847f 	.word	0x001e847f
 8002d58:	003d08ff 	.word	0x003d08ff
 8002d5c:	431bde83 	.word	0x431bde83
 8002d60:	10624dd3 	.word	0x10624dd3

08002d64 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e128      	b.n	8002fc8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a90      	ldr	r2, [pc, #576]	; (8002fd0 <HAL_I2S_Init+0x26c>)
 8002d8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd ff85 	bl	8000ca0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002dac:	f023 030f 	bic.w	r3, r3, #15
 8002db0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2202      	movs	r2, #2
 8002db8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d060      	beq.n	8002e84 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002dca:	2310      	movs	r3, #16
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e001      	b.n	8002dd4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d802      	bhi.n	8002de2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f001 f9e2 	bl	80041ac <HAL_RCCEx_GetPeriphCLKFreq>
 8002de8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df2:	d125      	bne.n	8002e40 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	461a      	mov	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	3305      	adds	r3, #5
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e01f      	b.n	8002e5e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	3305      	adds	r3, #5
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e00e      	b.n	8002e5e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	461a      	mov	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	3305      	adds	r3, #5
 8002e5c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4a5c      	ldr	r2, [pc, #368]	; (8002fd4 <HAL_I2S_Init+0x270>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e003      	b.n	8002e8c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002e84:	2302      	movs	r3, #2
 8002e86:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d902      	bls.n	8002e98 <HAL_I2S_Init+0x134>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2bff      	cmp	r3, #255	; 0xff
 8002e96:	d907      	bls.n	8002ea8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f043 0210 	orr.w	r2, r3, #16
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e08f      	b.n	8002fc8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	ea42 0103 	orr.w	r1, r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ec6:	f023 030f 	bic.w	r3, r3, #15
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6851      	ldr	r1, [r2, #4]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6892      	ldr	r2, [r2, #8]
 8002ed2:	4311      	orrs	r1, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68d2      	ldr	r2, [r2, #12]
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6992      	ldr	r2, [r2, #24]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d161      	bne.n	8002fb8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a38      	ldr	r2, [pc, #224]	; (8002fd8 <HAL_I2S_Init+0x274>)
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a37      	ldr	r2, [pc, #220]	; (8002fdc <HAL_I2S_Init+0x278>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_I2S_Init+0x1a4>
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_I2S_Init+0x27c>)
 8002f06:	e001      	b.n	8002f0c <HAL_I2S_Init+0x1a8>
 8002f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	4932      	ldr	r1, [pc, #200]	; (8002fdc <HAL_I2S_Init+0x278>)
 8002f14:	428a      	cmp	r2, r1
 8002f16:	d101      	bne.n	8002f1c <HAL_I2S_Init+0x1b8>
 8002f18:	4a31      	ldr	r2, [pc, #196]	; (8002fe0 <HAL_I2S_Init+0x27c>)
 8002f1a:	e001      	b.n	8002f20 <HAL_I2S_Init+0x1bc>
 8002f1c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002f20:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f24:	f023 030f 	bic.w	r3, r3, #15
 8002f28:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2b      	ldr	r2, [pc, #172]	; (8002fdc <HAL_I2S_Init+0x278>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_I2S_Init+0x1d4>
 8002f34:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <HAL_I2S_Init+0x27c>)
 8002f36:	e001      	b.n	8002f3c <HAL_I2S_Init+0x1d8>
 8002f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <HAL_I2S_Init+0x278>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d101      	bne.n	8002f4e <HAL_I2S_Init+0x1ea>
 8002f4a:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <HAL_I2S_Init+0x27c>)
 8002f4c:	e001      	b.n	8002f52 <HAL_I2S_Init+0x1ee>
 8002f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5e:	d003      	beq.n	8002f68 <HAL_I2S_Init+0x204>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	e001      	b.n	8002f74 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	b299      	uxth	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002f8a:	4303      	orrs	r3, r0
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002f92:	4313      	orrs	r3, r2
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	897b      	ldrh	r3, [r7, #10]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fa0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <HAL_I2S_Init+0x278>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_I2S_Init+0x24c>
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_I2S_Init+0x27c>)
 8002fae:	e001      	b.n	8002fb4 <HAL_I2S_Init+0x250>
 8002fb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fb4:	897a      	ldrh	r2, [r7, #10]
 8002fb6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	080030db 	.word	0x080030db
 8002fd4:	cccccccd 	.word	0xcccccccd
 8002fd8:	080031f1 	.word	0x080031f1
 8002fdc:	40003800 	.word	0x40003800
 8002fe0:	40003400 	.word	0x40003400

08002fe4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10e      	bne.n	8003074 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003064:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ffb8 	bl	8002fe4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	b292      	uxth	r2, r2
 8003090:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	1c9a      	adds	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10e      	bne.n	80030d2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff93 	bl	8002ff8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d13a      	bne.n	800316c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d109      	bne.n	8003114 <I2S_IRQHandler+0x3a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	d102      	bne.n	8003114 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffb4 	bl	800307c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d126      	bne.n	800316c <I2S_IRQHandler+0x92>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b20      	cmp	r3, #32
 800312a:	d11f      	bne.n	800316c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800313a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f043 0202 	orr.w	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ff50 	bl	800300c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b03      	cmp	r3, #3
 8003176:	d136      	bne.n	80031e6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d109      	bne.n	8003196 <I2S_IRQHandler+0xbc>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d102      	bne.n	8003196 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff45 	bl	8003020 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b08      	cmp	r3, #8
 800319e:	d122      	bne.n	80031e6 <I2S_IRQHandler+0x10c>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d11b      	bne.n	80031e6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031bc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff13 	bl	800300c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4aa2      	ldr	r2, [pc, #648]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800320a:	4ba2      	ldr	r3, [pc, #648]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800320c:	e001      	b.n	8003212 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800320e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a9b      	ldr	r2, [pc, #620]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003228:	4b9a      	ldr	r3, [pc, #616]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800322a:	e001      	b.n	8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800322c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323c:	d004      	beq.n	8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 8099 	bne.w	800337a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d107      	bne.n	8003262 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f925 	bl	80034ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d107      	bne.n	800327c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f9c8 	bl	800360c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d13a      	bne.n	80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d035      	beq.n	80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a7e      	ldr	r2, [pc, #504]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800329a:	4b7e      	ldr	r3, [pc, #504]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800329c:	e001      	b.n	80032a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800329e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4979      	ldr	r1, [pc, #484]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032aa:	428b      	cmp	r3, r1
 80032ac:	d101      	bne.n	80032b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80032ae:	4b79      	ldr	r3, [pc, #484]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032b0:	e001      	b.n	80032b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80032b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	f043 0202 	orr.w	r2, r3, #2
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff fe88 	bl	800300c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b08      	cmp	r3, #8
 8003304:	f040 80be 	bne.w	8003484 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80b8 	beq.w	8003484 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003322:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a59      	ldr	r2, [pc, #356]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800332e:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003330:	e001      	b.n	8003336 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4954      	ldr	r1, [pc, #336]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800333e:	428b      	cmp	r3, r1
 8003340:	d101      	bne.n	8003346 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003342:	4b54      	ldr	r3, [pc, #336]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003344:	e001      	b.n	800334a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800334e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f043 0204 	orr.w	r2, r3, #4
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff fe4a 	bl	800300c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003378:	e084      	b.n	8003484 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d107      	bne.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8be 	bl	8003510 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d107      	bne.n	80033ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f8fd 	bl	80035a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d12f      	bne.n	8003418 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d02a      	beq.n	8003418 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a2e      	ldr	r2, [pc, #184]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033de:	e001      	b.n	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80033e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4929      	ldr	r1, [pc, #164]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033ec:	428b      	cmp	r3, r1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80033f0:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80033f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f043 0202 	orr.w	r2, r3, #2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff fdfa 	bl	800300c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b08      	cmp	r3, #8
 8003420:	d131      	bne.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02c      	beq.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003438:	e001      	b.n	800343e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800343a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4912      	ldr	r1, [pc, #72]	; (8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003446:	428b      	cmp	r3, r1
 8003448:	d101      	bne.n	800344e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800344c:	e001      	b.n	8003452 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800344e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003452:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003456:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003466:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fdc5 	bl	800300c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003482:	e000      	b.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003484:	bf00      	nop
}
 8003486:	bf00      	nop
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40003800 	.word	0x40003800
 8003494:	40003400 	.word	0x40003400

08003498 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	1c99      	adds	r1, r3, #2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6251      	str	r1, [r2, #36]	; 0x24
 80034be:	881a      	ldrh	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d113      	bne.n	8003506 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffc9 	bl	8003498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	1c99      	adds	r1, r3, #2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6251      	str	r1, [r2, #36]	; 0x24
 8003522:	8819      	ldrh	r1, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <I2SEx_TxISR_I2SExt+0x90>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <I2SEx_TxISR_I2SExt+0x22>
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003530:	e001      	b.n	8003536 <I2SEx_TxISR_I2SExt+0x26>
 8003532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003536:	460a      	mov	r2, r1
 8003538:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d121      	bne.n	8003596 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <I2SEx_TxISR_I2SExt+0x90>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <I2SEx_TxISR_I2SExt+0x50>
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <I2SEx_TxISR_I2SExt+0x94>)
 800355e:	e001      	b.n	8003564 <I2SEx_TxISR_I2SExt+0x54>
 8003560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	490d      	ldr	r1, [pc, #52]	; (80035a0 <I2SEx_TxISR_I2SExt+0x90>)
 800356c:	428b      	cmp	r3, r1
 800356e:	d101      	bne.n	8003574 <I2SEx_TxISR_I2SExt+0x64>
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003572:	e001      	b.n	8003578 <I2SEx_TxISR_I2SExt+0x68>
 8003574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003578:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800357c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff81 	bl	8003498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40003800 	.word	0x40003800
 80035a4:	40003400 	.word	0x40003400

080035a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68d8      	ldr	r0, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	1c99      	adds	r1, r3, #2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80035c0:	b282      	uxth	r2, r0
 80035c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d113      	bne.n	8003604 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff4a 	bl	8003498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <I2SEx_RxISR_I2SExt+0x90>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <I2SEx_RxISR_I2SExt+0x16>
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <I2SEx_RxISR_I2SExt+0x94>)
 8003620:	e001      	b.n	8003626 <I2SEx_RxISR_I2SExt+0x1a>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003626:	68d8      	ldr	r0, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	1c99      	adds	r1, r3, #2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003632:	b282      	uxth	r2, r0
 8003634:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d121      	bne.n	8003692 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <I2SEx_RxISR_I2SExt+0x90>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <I2SEx_RxISR_I2SExt+0x50>
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <I2SEx_RxISR_I2SExt+0x94>)
 800365a:	e001      	b.n	8003660 <I2SEx_RxISR_I2SExt+0x54>
 800365c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	490d      	ldr	r1, [pc, #52]	; (800369c <I2SEx_RxISR_I2SExt+0x90>)
 8003668:	428b      	cmp	r3, r1
 800366a:	d101      	bne.n	8003670 <I2SEx_RxISR_I2SExt+0x64>
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <I2SEx_RxISR_I2SExt+0x94>)
 800366e:	e001      	b.n	8003674 <I2SEx_RxISR_I2SExt+0x68>
 8003670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003674:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003678:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff03 	bl	8003498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40003800 	.word	0x40003800
 80036a0:	40003400 	.word	0x40003400

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e25b      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d075      	beq.n	80037ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c2:	4ba3      	ldr	r3, [pc, #652]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00c      	beq.n	80036e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4ba0      	ldr	r3, [pc, #640]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d112      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4b9d      	ldr	r3, [pc, #628]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e6:	d10b      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	4b99      	ldr	r3, [pc, #612]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05b      	beq.n	80037ac <HAL_RCC_OscConfig+0x108>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d157      	bne.n	80037ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e236      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x74>
 800370a:	4b91      	ldr	r3, [pc, #580]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a90      	ldr	r2, [pc, #576]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e01d      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x98>
 8003722:	4b8b      	ldr	r3, [pc, #556]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a8a      	ldr	r2, [pc, #552]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b88      	ldr	r3, [pc, #544]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a87      	ldr	r2, [pc, #540]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 800373c:	4b84      	ldr	r3, [pc, #528]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a83      	ldr	r2, [pc, #524]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b81      	ldr	r3, [pc, #516]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a80      	ldr	r2, [pc, #512]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 800374e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd fd14 	bl	8001188 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fd fd10 	bl	8001188 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1fb      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0xc0>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fd fd00 	bl	8001188 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800378c:	f7fd fcfc 	bl	8001188 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1e7      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0xe8>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d063      	beq.n	8003882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ba:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d11c      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d116      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	4b5c      	ldr	r3, [pc, #368]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e1bb      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b56      	ldr	r3, [pc, #344]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4952      	ldr	r1, [pc, #328]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	e03a      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003814:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <HAL_RCC_OscConfig+0x2b0>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fd fcb5 	bl	8001188 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003822:	f7fd fcb1 	bl	8001188 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e19c      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	4b46      	ldr	r3, [pc, #280]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4940      	ldr	r1, [pc, #256]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <HAL_RCC_OscConfig+0x2b0>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd fc94 	bl	8001188 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003864:	f7fd fc90 	bl	8001188 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e17b      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	4b36      	ldr	r3, [pc, #216]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d030      	beq.n	80038f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003896:	4b30      	ldr	r3, [pc, #192]	; (8003958 <HAL_RCC_OscConfig+0x2b4>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fd fc74 	bl	8001188 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fd fc70 	bl	8001188 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e15b      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	4b26      	ldr	r3, [pc, #152]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x200>
 80038c2:	e015      	b.n	80038f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c4:	4b24      	ldr	r3, [pc, #144]	; (8003958 <HAL_RCC_OscConfig+0x2b4>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fd fc5d 	bl	8001188 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fd fc59 	bl	8001188 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e144      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80a0 	beq.w	8003a3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003902:	4b13      	ldr	r3, [pc, #76]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800392a:	2301      	movs	r3, #1
 800392c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCC_OscConfig+0x2b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d121      	bne.n	800397e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <HAL_RCC_OscConfig+0x2b8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a07      	ldr	r2, [pc, #28]	; (800395c <HAL_RCC_OscConfig+0x2b8>)
 8003940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003946:	f7fd fc1f 	bl	8001188 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	e011      	b.n	8003972 <HAL_RCC_OscConfig+0x2ce>
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	42470000 	.word	0x42470000
 8003958:	42470e80 	.word	0x42470e80
 800395c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003960:	f7fd fc12 	bl	8001188 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e0fd      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b81      	ldr	r3, [pc, #516]	; (8003b78 <HAL_RCC_OscConfig+0x4d4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d106      	bne.n	8003994 <HAL_RCC_OscConfig+0x2f0>
 8003986:	4b7d      	ldr	r3, [pc, #500]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	4a7c      	ldr	r2, [pc, #496]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6713      	str	r3, [r2, #112]	; 0x70
 8003992:	e01c      	b.n	80039ce <HAL_RCC_OscConfig+0x32a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b05      	cmp	r3, #5
 800399a:	d10c      	bne.n	80039b6 <HAL_RCC_OscConfig+0x312>
 800399c:	4b77      	ldr	r3, [pc, #476]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a76      	ldr	r2, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 80039a2:	f043 0304 	orr.w	r3, r3, #4
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
 80039a8:	4b74      	ldr	r3, [pc, #464]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4a73      	ldr	r2, [pc, #460]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6713      	str	r3, [r2, #112]	; 0x70
 80039b4:	e00b      	b.n	80039ce <HAL_RCC_OscConfig+0x32a>
 80039b6:	4b71      	ldr	r3, [pc, #452]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a70      	ldr	r2, [pc, #448]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	4b6e      	ldr	r3, [pc, #440]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a6d      	ldr	r2, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 80039c8:	f023 0304 	bic.w	r3, r3, #4
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d015      	beq.n	8003a02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fd fbd7 	bl	8001188 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fd fbd3 	bl	8001188 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0bc      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	4b61      	ldr	r3, [pc, #388]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ee      	beq.n	80039de <HAL_RCC_OscConfig+0x33a>
 8003a00:	e014      	b.n	8003a2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a02:	f7fd fbc1 	bl	8001188 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fd fbbd 	bl	8001188 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e0a6      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ee      	bne.n	8003a0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d105      	bne.n	8003a3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a32:	4b52      	ldr	r3, [pc, #328]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a51      	ldr	r2, [pc, #324]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8092 	beq.w	8003b6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a48:	4b4c      	ldr	r3, [pc, #304]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d05c      	beq.n	8003b0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d141      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b48      	ldr	r3, [pc, #288]	; (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd fb91 	bl	8001188 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fd fb8d 	bl	8001188 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e078      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f0      	bne.n	8003a6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	019b      	lsls	r3, r3, #6
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	4933      	ldr	r1, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab2:	4b33      	ldr	r3, [pc, #204]	; (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fb66 	bl	8001188 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd fb62 	bl	8001188 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e04d      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x41c>
 8003ade:	e045      	b.n	8003b6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae0:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fd fb4f 	bl	8001188 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aee:	f7fd fb4b 	bl	8001188 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e036      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f0      	bne.n	8003aee <HAL_RCC_OscConfig+0x44a>
 8003b0c:	e02e      	b.n	8003b6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e029      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b1a:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_RCC_OscConfig+0x4d8>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d11c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d115      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b42:	4013      	ands	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d106      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	42470060 	.word	0x42470060

08003b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0cc      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b68      	ldr	r3, [pc, #416]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d90c      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b65      	ldr	r3, [pc, #404]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b63      	ldr	r3, [pc, #396]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0b8      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a52      	ldr	r2, [pc, #328]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	494d      	ldr	r1, [pc, #308]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d044      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d119      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e07f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e067      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4934      	ldr	r1, [pc, #208]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c74:	f7fd fa88 	bl	8001188 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fd fa84 	bl	8001188 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e04f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 020c 	and.w	r2, r3, #12
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1eb      	bne.n	8003c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d20c      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e032      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4916      	ldr	r1, [pc, #88]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0a:	f000 f821 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003d0e:	4601      	mov	r1, r0
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	5cd3      	ldrb	r3, [r2, r3]
 8003d1e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd f930 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023c00 	.word	0x40023c00
 8003d40:	40023800 	.word	0x40023800
 8003d44:	0800770c 	.word	0x0800770c
 8003d48:	20000004 	.word	0x20000004
 8003d4c:	20000008 	.word	0x20000008

08003d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d66:	4b63      	ldr	r3, [pc, #396]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d007      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x32>
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d008      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x38>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 80b4 	bne.w	8003ee4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4b5e      	ldr	r3, [pc, #376]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d7e:	60bb      	str	r3, [r7, #8]
       break;
 8003d80:	e0b3      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d82:	4b5e      	ldr	r3, [pc, #376]	; (8003efc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d84:	60bb      	str	r3, [r7, #8]
      break;
 8003d86:	e0b0      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d88:	4b5a      	ldr	r3, [pc, #360]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d92:	4b58      	ldr	r3, [pc, #352]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d04a      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9e:	4b55      	ldr	r3, [pc, #340]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	f04f 0400 	mov.w	r4, #0
 8003da8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	ea03 0501 	and.w	r5, r3, r1
 8003db4:	ea04 0602 	and.w	r6, r4, r2
 8003db8:	4629      	mov	r1, r5
 8003dba:	4632      	mov	r2, r6
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	f04f 0400 	mov.w	r4, #0
 8003dc4:	0154      	lsls	r4, r2, #5
 8003dc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dca:	014b      	lsls	r3, r1, #5
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4622      	mov	r2, r4
 8003dd0:	1b49      	subs	r1, r1, r5
 8003dd2:	eb62 0206 	sbc.w	r2, r2, r6
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	f04f 0400 	mov.w	r4, #0
 8003dde:	0194      	lsls	r4, r2, #6
 8003de0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003de4:	018b      	lsls	r3, r1, #6
 8003de6:	1a5b      	subs	r3, r3, r1
 8003de8:	eb64 0402 	sbc.w	r4, r4, r2
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	00e2      	lsls	r2, r4, #3
 8003df6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dfa:	00d9      	lsls	r1, r3, #3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4614      	mov	r4, r2
 8003e00:	195b      	adds	r3, r3, r5
 8003e02:	eb44 0406 	adc.w	r4, r4, r6
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	0262      	lsls	r2, r4, #9
 8003e10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e14:	0259      	lsls	r1, r3, #9
 8003e16:	460b      	mov	r3, r1
 8003e18:	4614      	mov	r4, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f04f 0400 	mov.w	r4, #0
 8003e24:	461a      	mov	r2, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	f7fc f9da 	bl	80001e0 <__aeabi_uldivmod>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e049      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e34:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	099b      	lsrs	r3, r3, #6
 8003e3a:	f04f 0400 	mov.w	r4, #0
 8003e3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	ea03 0501 	and.w	r5, r3, r1
 8003e4a:	ea04 0602 	and.w	r6, r4, r2
 8003e4e:	4629      	mov	r1, r5
 8003e50:	4632      	mov	r2, r6
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	f04f 0400 	mov.w	r4, #0
 8003e5a:	0154      	lsls	r4, r2, #5
 8003e5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e60:	014b      	lsls	r3, r1, #5
 8003e62:	4619      	mov	r1, r3
 8003e64:	4622      	mov	r2, r4
 8003e66:	1b49      	subs	r1, r1, r5
 8003e68:	eb62 0206 	sbc.w	r2, r2, r6
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	f04f 0400 	mov.w	r4, #0
 8003e74:	0194      	lsls	r4, r2, #6
 8003e76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e7a:	018b      	lsls	r3, r1, #6
 8003e7c:	1a5b      	subs	r3, r3, r1
 8003e7e:	eb64 0402 	sbc.w	r4, r4, r2
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	00e2      	lsls	r2, r4, #3
 8003e8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e90:	00d9      	lsls	r1, r3, #3
 8003e92:	460b      	mov	r3, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	195b      	adds	r3, r3, r5
 8003e98:	eb44 0406 	adc.w	r4, r4, r6
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	02a2      	lsls	r2, r4, #10
 8003ea6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003eaa:	0299      	lsls	r1, r3, #10
 8003eac:	460b      	mov	r3, r1
 8003eae:	4614      	mov	r4, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f04f 0400 	mov.w	r4, #0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	f7fc f98f 	bl	80001e0 <__aeabi_uldivmod>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	60bb      	str	r3, [r7, #8]
      break;
 8003ee2:	e002      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ee6:	60bb      	str	r3, [r7, #8]
      break;
 8003ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eea:	68bb      	ldr	r3, [r7, #8]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	007a1200 	.word	0x007a1200

08003f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000004 	.word	0x20000004

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f1c:	f7ff fff0 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f20:	4601      	mov	r1, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0a9b      	lsrs	r3, r3, #10
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	0800771c 	.word	0x0800771c

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f44:	f7ff ffdc 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f48:	4601      	mov	r1, r0
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0b5b      	lsrs	r3, r3, #13
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4a03      	ldr	r2, [pc, #12]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f56:	5cd3      	ldrb	r3, [r2, r3]
 8003f58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023800 	.word	0x40023800
 8003f64:	0800771c 	.word	0x0800771c

08003f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	220f      	movs	r2, #15
 8003f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0203 	and.w	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	08db      	lsrs	r3, r3, #3
 8003fa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_RCC_GetClockConfig+0x60>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 020f 	and.w	r2, r3, #15
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40023c00 	.word	0x40023c00

08003fcc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d038      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ff4:	4b68      	ldr	r3, [pc, #416]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ffa:	f7fd f8c5 	bl	8001188 <HAL_GetTick>
 8003ffe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004002:	f7fd f8c1 	bl	8001188 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e0bd      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004014:	4b61      	ldr	r3, [pc, #388]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	019b      	lsls	r3, r3, #6
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	071b      	lsls	r3, r3, #28
 8004032:	495a      	ldr	r1, [pc, #360]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800403a:	4b57      	ldr	r3, [pc, #348]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800403c:	2201      	movs	r2, #1
 800403e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004040:	f7fd f8a2 	bl	8001188 <HAL_GetTick>
 8004044:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004048:	f7fd f89e 	bl	8001188 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e09a      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800405a:	4b50      	ldr	r3, [pc, #320]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8083 	beq.w	800417a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	4b48      	ldr	r3, [pc, #288]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	4a47      	ldr	r2, [pc, #284]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004082:	6413      	str	r3, [r2, #64]	; 0x40
 8004084:	4b45      	ldr	r3, [pc, #276]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004090:	4b43      	ldr	r3, [pc, #268]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a42      	ldr	r2, [pc, #264]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800409c:	f7fd f874 	bl	8001188 <HAL_GetTick>
 80040a0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040a4:	f7fd f870 	bl	8001188 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e06c      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040b6:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040c2:	4b36      	ldr	r3, [pc, #216]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d02f      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d028      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e0:	4b2e      	ldr	r3, [pc, #184]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ea:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f0:	4b2c      	ldr	r3, [pc, #176]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040f6:	4a29      	ldr	r2, [pc, #164]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d114      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004108:	f7fd f83e 	bl	8001188 <HAL_GetTick>
 800410c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd f83a 	bl	8001188 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e034      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	4b1d      	ldr	r3, [pc, #116]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ee      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413e:	d10d      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004140:	4b16      	ldr	r3, [pc, #88]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004154:	4911      	ldr	r1, [pc, #68]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
 800415a:	e005      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a0e      	ldr	r2, [pc, #56]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004166:	6093      	str	r3, [r2, #8]
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004174:	4909      	ldr	r1, [pc, #36]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	7d1a      	ldrb	r2, [r3, #20]
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800418c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	42470068 	.word	0x42470068
 800419c:	40023800 	.word	0x40023800
 80041a0:	40007000 	.word	0x40007000
 80041a4:	42470e40 	.word	0x42470e40
 80041a8:	424711e0 	.word	0x424711e0

080041ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d13f      	bne.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80041ca:	4b23      	ldr	r3, [pc, #140]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d131      	bne.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80041de:	4b1f      	ldr	r3, [pc, #124]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041e0:	617b      	str	r3, [r7, #20]
          break;
 80041e2:	e031      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041e4:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f0:	d109      	bne.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041fc:	4a18      	ldr	r2, [pc, #96]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e008      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004210:	4a14      	ldr	r2, [pc, #80]	; (8004264 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800421a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800422e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004232:	0f1b      	lsrs	r3, r3, #28
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	617b      	str	r3, [r7, #20]
          break;
 8004240:	e002      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
          break;
 8004246:	bf00      	nop
        }
      }
      break;
 8004248:	bf00      	nop
    }
  }
  return frequency;
 800424a:	697b      	ldr	r3, [r7, #20]
}
 800424c:	4618      	mov	r0, r3
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40023800 	.word	0x40023800
 800425c:	00bb8000 	.word	0x00bb8000
 8004260:	007a1200 	.word	0x007a1200
 8004264:	00f42400 	.word	0x00f42400

08004268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e056      	b.n	8004328 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d106      	bne.n	800429a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fc fdd1 	bl	8000e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	ea42 0103 	orr.w	r1, r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	f003 0104 	and.w	r1, r3, #4
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004316:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e01d      	b.n	800437e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f815 	bl	8004386 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f000 f968 	bl	8004644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d007      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d122      	bne.n	800443e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d11b      	bne.n	800443e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f06f 0202 	mvn.w	r2, #2
 800440e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8ee 	bl	8004606 <HAL_TIM_IC_CaptureCallback>
 800442a:	e005      	b.n	8004438 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f8e0 	bl	80045f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f8f1 	bl	800461a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d122      	bne.n	8004492 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b04      	cmp	r3, #4
 8004458:	d11b      	bne.n	8004492 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0204 	mvn.w	r2, #4
 8004462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f8c4 	bl	8004606 <HAL_TIM_IC_CaptureCallback>
 800447e:	e005      	b.n	800448c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8b6 	bl	80045f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8c7 	bl	800461a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d122      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d11b      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f06f 0208 	mvn.w	r2, #8
 80044b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2204      	movs	r2, #4
 80044bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f89a 	bl	8004606 <HAL_TIM_IC_CaptureCallback>
 80044d2:	e005      	b.n	80044e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f88c 	bl	80045f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f89d 	bl	800461a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d122      	bne.n	800453a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b10      	cmp	r3, #16
 8004500:	d11b      	bne.n	800453a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f06f 0210 	mvn.w	r2, #16
 800450a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2208      	movs	r2, #8
 8004510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f870 	bl	8004606 <HAL_TIM_IC_CaptureCallback>
 8004526:	e005      	b.n	8004534 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f862 	bl	80045f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f873 	bl	800461a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10e      	bne.n	8004566 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f06f 0201 	mvn.w	r2, #1
 800455e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fc fb0f 	bl	8000b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d10e      	bne.n	8004592 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	2b80      	cmp	r3, #128	; 0x80
 8004580:	d107      	bne.n	8004592 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800458a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f8e3 	bl	8004758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d10e      	bne.n	80045be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d107      	bne.n	80045be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f838 	bl	800462e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d10e      	bne.n	80045ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d107      	bne.n	80045ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0220 	mvn.w	r2, #32
 80045e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8ad 	bl	8004744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a34      	ldr	r2, [pc, #208]	; (8004728 <TIM_Base_SetConfig+0xe4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00f      	beq.n	800467c <TIM_Base_SetConfig+0x38>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d00b      	beq.n	800467c <TIM_Base_SetConfig+0x38>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a31      	ldr	r2, [pc, #196]	; (800472c <TIM_Base_SetConfig+0xe8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d007      	beq.n	800467c <TIM_Base_SetConfig+0x38>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a30      	ldr	r2, [pc, #192]	; (8004730 <TIM_Base_SetConfig+0xec>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0x38>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2f      	ldr	r2, [pc, #188]	; (8004734 <TIM_Base_SetConfig+0xf0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d108      	bne.n	800468e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a25      	ldr	r2, [pc, #148]	; (8004728 <TIM_Base_SetConfig+0xe4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01b      	beq.n	80046ce <TIM_Base_SetConfig+0x8a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469c:	d017      	beq.n	80046ce <TIM_Base_SetConfig+0x8a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a22      	ldr	r2, [pc, #136]	; (800472c <TIM_Base_SetConfig+0xe8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <TIM_Base_SetConfig+0x8a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <TIM_Base_SetConfig+0xec>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00f      	beq.n	80046ce <TIM_Base_SetConfig+0x8a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <TIM_Base_SetConfig+0xf0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_Base_SetConfig+0x8a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <TIM_Base_SetConfig+0xf4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_Base_SetConfig+0x8a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1e      	ldr	r2, [pc, #120]	; (800473c <TIM_Base_SetConfig+0xf8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_Base_SetConfig+0x8a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <TIM_Base_SetConfig+0xfc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d108      	bne.n	80046e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <TIM_Base_SetConfig+0xe4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d103      	bne.n	8004714 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	615a      	str	r2, [r3, #20]
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40010000 	.word	0x40010000
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40014000 	.word	0x40014000
 800473c:	40014400 	.word	0x40014400
 8004740:	40014800 	.word	0x40014800

08004744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800476c:	b084      	sub	sp, #16
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	f107 001c 	add.w	r0, r7, #28
 800477a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	2b01      	cmp	r3, #1
 8004782:	d122      	bne.n	80047ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d105      	bne.n	80047be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f902 	bl	80049c8 <USB_CoreReset>
 80047c4:	4603      	mov	r3, r0
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e01a      	b.n	8004800 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f8f6 	bl	80049c8 <USB_CoreReset>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
 80047f2:	e005      	b.n	8004800 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	2b01      	cmp	r3, #1
 8004804:	d10b      	bne.n	800481e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f043 0206 	orr.w	r2, r3, #6
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800482a:	b004      	add	sp, #16
 800482c:	4770      	bx	lr

0800482e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 0201 	bic.w	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d106      	bne.n	800487c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60da      	str	r2, [r3, #12]
 800487a:	e00b      	b.n	8004894 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	e001      	b.n	8004894 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e003      	b.n	800489c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004894:	2032      	movs	r0, #50	; 0x32
 8004896:	f7fc fc83 	bl	80011a0 <HAL_Delay>

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	019b      	lsls	r3, r3, #6
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <USB_FlushTxFifo+0x48>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e006      	b.n	80048de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d0f0      	beq.n	80048be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	00030d40 	.word	0x00030d40

080048f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2210      	movs	r2, #16
 8004900:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <USB_FlushRxFifo+0x40>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e006      	b.n	8004922 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b10      	cmp	r3, #16
 800491e:	d0f0      	beq.n	8004902 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	00030d40 	.word	0x00030d40

08004934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	3303      	adds	r3, #3
 800494e:	089b      	lsrs	r3, r3, #2
 8004950:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e00b      	b.n	8004970 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	601a      	str	r2, [r3, #0]
    pDest++;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	3304      	adds	r3, #4
 8004968:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	3301      	adds	r3, #1
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	429a      	cmp	r2, r3
 8004976:	d3ef      	bcc.n	8004958 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004978:	69fb      	ldr	r3, [r7, #28]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3724      	adds	r7, #36	; 0x24
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4013      	ands	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0301 	and.w	r3, r3, #1
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <USB_CoreReset+0x64>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e01b      	b.n	8004a1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	daf2      	bge.n	80049d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3301      	adds	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <USB_CoreReset+0x64>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e006      	b.n	8004a1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d0f0      	beq.n	80049fe <USB_CoreReset+0x36>

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	00030d40 	.word	0x00030d40

08004a30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a30:	b084      	sub	sp, #16
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	f107 001c 	add.w	r0, r7, #28
 8004a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d018      	beq.n	8004ab4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d10a      	bne.n	8004a9e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a96:	f043 0304 	orr.w	r3, r3, #4
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e014      	b.n	8004ac8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e009      	b.n	8004ac8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ac2:	f023 0304 	bic.w	r3, r3, #4
 8004ac6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004ac8:	2110      	movs	r1, #16
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff feea 	bl	80048a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff0d 	bl	80048f0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	e015      	b.n	8004b08 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f04f 33ff 	mov.w	r3, #4294967295
 8004aee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d3e5      	bcc.n	8004adc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004b10:	2101      	movs	r1, #1
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f882 	bl	8004c1c <USB_DriveVbus>

  HAL_Delay(200U);
 8004b18:	20c8      	movs	r0, #200	; 0xc8
 8004b1a:	f7fc fb41 	bl	80011a0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <USB_HostInit+0x164>)
 8004b44:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <USB_HostInit+0x168>)
 8004b4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b4e:	e009      	b.n	8004b64 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2280      	movs	r2, #128	; 0x80
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <USB_HostInit+0x16c>)
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <USB_HostInit+0x170>)
 8004b60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f043 0210 	orr.w	r2, r3, #16
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <USB_HostInit+0x174>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b8e:	b004      	add	sp, #16
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	01000200 	.word	0x01000200
 8004b98:	00e00300 	.word	0x00e00300
 8004b9c:	00600080 	.word	0x00600080
 8004ba0:	004000e0 	.word	0x004000e0
 8004ba4:	a3200008 	.word	0xa3200008

08004ba8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bf6:	6053      	str	r3, [r2, #4]
 8004bf8:	e009      	b.n	8004c0e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d106      	bne.n	8004c0e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c06:	461a      	mov	r2, r3
 8004c08:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c0c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c40:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <USB_DriveVbus+0x44>
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d106      	bne.n	8004c60 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c5e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	d109      	bne.n	8004c80 <USB_DriveVbus+0x64>
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c7e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	b29b      	uxth	r3, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	0c9b      	lsrs	r3, r3, #18
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <USB_HC_Halt+0x3a>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d16c      	bne.n	8004dc4 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d08:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d143      	bne.n	8004d9e <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d34:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d54:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d74:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d82:	d81d      	bhi.n	8004dc0 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d9a:	d0ec      	beq.n	8004d76 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d9c:	e080      	b.n	8004ea0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dbc:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004dbe:	e06f      	b.n	8004ea0 <USB_HC_Halt+0x1f0>
          break;
 8004dc0:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004dc2:	e06d      	b.n	8004ea0 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d143      	bne.n	8004e7c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e52:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	3301      	adds	r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e60:	d81d      	bhi.n	8004e9e <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e78:	d0ec      	beq.n	8004e54 <USB_HC_Halt+0x1a4>
 8004e7a:	e011      	b.n	8004ea0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	e000      	b.n	8004ea0 <USB_HC_Halt+0x1f0>
          break;
 8004e9e:	bf00      	nop
    }
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec0:	2b84      	cmp	r3, #132	; 0x84
 8004ec2:	d005      	beq.n	8004ed0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ec4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	3303      	adds	r3, #3
 8004ece:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ee4:	f3ef 8305 	mrs	r3, IPSR
 8004ee8:	607b      	str	r3, [r7, #4]
  return(result);
 8004eea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f06:	f001 f923 	bl	8006150 <vTaskStartScheduler>
  
  return osOK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f12:	b089      	sub	sp, #36	; 0x24
 8004f14:	af04      	add	r7, sp, #16
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <osThreadCreate+0x54>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01c      	beq.n	8004f64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685c      	ldr	r4, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681d      	ldr	r5, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691e      	ldr	r6, [r3, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff ffb6 	bl	8004eae <makeFreeRtosPriority>
 8004f42:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f4c:	9202      	str	r2, [sp, #8]
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	9100      	str	r1, [sp, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	4632      	mov	r2, r6
 8004f56:	4629      	mov	r1, r5
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 ff3e 	bl	8005dda <xTaskCreateStatic>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e01c      	b.n	8004f9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685c      	ldr	r4, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f70:	b29e      	uxth	r6, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff ff98 	bl	8004eae <makeFreeRtosPriority>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	f107 030c 	add.w	r3, r7, #12
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	9200      	str	r2, [sp, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4632      	mov	r2, r6
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 ff7c 	bl	8005e8c <xTaskCreate>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d001      	beq.n	8004f9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e000      	b.n	8004fa0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fa8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <osDelay+0x16>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	e000      	b.n	8004fc0 <osDelay+0x18>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 f891 	bl	80060e8 <vTaskDelay>
  
  return osOK;
 8004fc6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	f000 faaa 	bl	8005540 <xQueueCreateMutexStatic>
 8004fec:	4603      	mov	r3, r0
 8004fee:	e003      	b.n	8004ff8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	f000 fa8d 	bl	8005510 <xQueueCreateMutex>
 8004ff6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <osMutexWait+0x18>
    return osErrorParameter;
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	e03a      	b.n	800508e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d103      	bne.n	800502c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005024:	f04f 33ff 	mov.w	r3, #4294967295
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e009      	b.n	8005040 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d006      	beq.n	8005040 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <osMutexWait+0x40>
      ticks = 1;
 800503c:	2301      	movs	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005040:	f7ff ff4d 	bl	8004ede <inHandlerMode>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d017      	beq.n	800507a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800504a:	f107 0308 	add.w	r3, r7, #8
 800504e:	461a      	mov	r2, r3
 8005050:	2100      	movs	r1, #0
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fd1c 	bl	8005a90 <xQueueReceiveFromISR>
 8005058:	4603      	mov	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d001      	beq.n	8005062 <osMutexWait+0x62>
      return osErrorOS;
 800505e:	23ff      	movs	r3, #255	; 0xff
 8005060:	e015      	b.n	800508e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d011      	beq.n	800508c <osMutexWait+0x8c>
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <osMutexWait+0x98>)
 800506a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	e008      	b.n	800508c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fbff 	bl	8005880 <xQueueSemaphoreTake>
 8005082:	4603      	mov	r3, r0
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <osMutexWait+0x8c>
    return osErrorOS;
 8005088:	23ff      	movs	r3, #255	; 0xff
 800508a:	e000      	b.n	800508e <osMutexWait+0x8e>
  }
  
  return osOK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80050ac:	f7ff ff17 	bl	8004ede <inHandlerMode>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80050b6:	f107 0308 	add.w	r3, r7, #8
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fb55 	bl	800576c <xQueueGiveFromISR>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <osMutexRelease+0x30>
      return osErrorOS;
 80050c8:	23ff      	movs	r3, #255	; 0xff
 80050ca:	e017      	b.n	80050fc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d013      	beq.n	80050fa <osMutexRelease+0x5e>
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <osMutexRelease+0x68>)
 80050d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	e00a      	b.n	80050fa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80050e4:	2300      	movs	r3, #0
 80050e6:	2200      	movs	r2, #0
 80050e8:	2100      	movs	r1, #0
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fa44 	bl	8005578 <xQueueGenericSend>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d001      	beq.n	80050fa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80050f6:	23ff      	movs	r3, #255	; 0xff
 80050f8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80050fa:	68fb      	ldr	r3, [r7, #12]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f103 0208 	add.w	r2, r3, #8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f04f 32ff 	mov.w	r2, #4294967295
 8005120:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f103 0208 	add.w	r2, r3, #8
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f103 0208 	add.w	r2, r3, #8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d103      	bne.n	80051ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e00c      	b.n	80051e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3308      	adds	r3, #8
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e002      	b.n	80051d8 <vListInsert+0x2e>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d2f6      	bcs.n	80051d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	601a      	str	r2, [r3, #0]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6892      	ldr	r2, [r2, #8]
 8005232:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6852      	ldr	r2, [r2, #4]
 800523c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d103      	bne.n	8005250 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	1e5a      	subs	r2, r3, #1
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d109      	bne.n	8005298 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	e7fe      	b.n	8005296 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005298:	f001 fec0 	bl	800701c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	441a      	add	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	3b01      	subs	r3, #1
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	441a      	add	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	22ff      	movs	r2, #255	; 0xff
 80052dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	22ff      	movs	r2, #255	; 0xff
 80052e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d114      	bne.n	8005318 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d01a      	beq.n	800532c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3310      	adds	r3, #16
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 f96a 	bl	80065d4 <xTaskRemoveFromEventList>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d012      	beq.n	800532c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <xQueueGenericReset+0xcc>)
 8005308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	e009      	b.n	800532c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3310      	adds	r3, #16
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fef3 	bl	8005108 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3324      	adds	r3, #36	; 0x24
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff feee 	bl	8005108 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800532c:	f001 fea4 	bl	8007078 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005330:	2301      	movs	r3, #1
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	e000ed04 	.word	0xe000ed04

08005340 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08e      	sub	sp, #56	; 0x38
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <xQueueGenericCreateStatic+0x28>
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
 8005366:	e7fe      	b.n	8005366 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <xQueueGenericCreateStatic+0x42>
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
 8005380:	e7fe      	b.n	8005380 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <xQueueGenericCreateStatic+0x4e>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <xQueueGenericCreateStatic+0x52>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <xQueueGenericCreateStatic+0x54>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d109      	bne.n	80053ac <xQueueGenericCreateStatic+0x6c>
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	e7fe      	b.n	80053aa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <xQueueGenericCreateStatic+0x78>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <xQueueGenericCreateStatic+0x7c>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <xQueueGenericCreateStatic+0x7e>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <xQueueGenericCreateStatic+0x96>
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	e7fe      	b.n	80053d4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053d6:	2348      	movs	r3, #72	; 0x48
 80053d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b48      	cmp	r3, #72	; 0x48
 80053de:	d009      	beq.n	80053f4 <xQueueGenericCreateStatic+0xb4>
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e7fe      	b.n	80053f2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00d      	beq.n	800541a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005406:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	4613      	mov	r3, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f842 	bl	800549e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800541c:	4618      	mov	r0, r3
 800541e:	3730      	adds	r7, #48	; 0x30
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	4613      	mov	r3, r2
 8005430:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d109      	bne.n	800544c <xQueueGenericCreate+0x28>
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e7fe      	b.n	800544a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	e004      	b.n	8005462 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	fb02 f303 	mul.w	r3, r2, r3
 8005460:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3348      	adds	r3, #72	; 0x48
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fef2 	bl	8007250 <pvPortMalloc>
 800546c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	3348      	adds	r3, #72	; 0x48
 8005478:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005482:	79fa      	ldrb	r2, [r7, #7]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f805 	bl	800549e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005494:	69bb      	ldr	r3, [r7, #24]
	}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e002      	b.n	80054c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054cc:	2101      	movs	r1, #1
 80054ce:	69b8      	ldr	r0, [r7, #24]
 80054d0:	f7ff fece 	bl	8005270 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00e      	beq.n	8005508 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80054fc:	2300      	movs	r3, #0
 80054fe:	2200      	movs	r2, #0
 8005500:	2100      	movs	r1, #0
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f838 	bl	8005578 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005508:	bf00      	nop
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800551a:	2301      	movs	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	461a      	mov	r2, r3
 8005526:	6939      	ldr	r1, [r7, #16]
 8005528:	6978      	ldr	r0, [r7, #20]
 800552a:	f7ff ff7b 	bl	8005424 <xQueueGenericCreate>
 800552e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ffd3 	bl	80054dc <prvInitialiseMutex>

		return pxNewQueue;
 8005536:	68fb      	ldr	r3, [r7, #12]
	}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af02      	add	r7, sp, #8
 8005546:	4603      	mov	r3, r0
 8005548:	6039      	str	r1, [r7, #0]
 800554a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2200      	movs	r2, #0
 800555c:	6939      	ldr	r1, [r7, #16]
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f7ff feee 	bl	8005340 <xQueueGenericCreateStatic>
 8005564:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7ff ffb8 	bl	80054dc <prvInitialiseMutex>

		return pxNewQueue;
 800556c:	68fb      	ldr	r3, [r7, #12]
	}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08e      	sub	sp, #56	; 0x38
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005586:	2300      	movs	r3, #0
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	2b00      	cmp	r3, #0
 8005592:	d109      	bne.n	80055a8 <xQueueGenericSend+0x30>
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a6:	e7fe      	b.n	80055a6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <xQueueGenericSend+0x3e>
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <xQueueGenericSend+0x42>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueGenericSend+0x44>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <xQueueGenericSend+0x5c>
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	e7fe      	b.n	80055d2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d103      	bne.n	80055e2 <xQueueGenericSend+0x6a>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <xQueueGenericSend+0x6e>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueGenericSend+0x70>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d109      	bne.n	8005600 <xQueueGenericSend+0x88>
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	623b      	str	r3, [r7, #32]
 80055fe:	e7fe      	b.n	80055fe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005600:	f001 f9a4 	bl	800694c <xTaskGetSchedulerState>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d102      	bne.n	8005610 <xQueueGenericSend+0x98>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <xQueueGenericSend+0x9c>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <xQueueGenericSend+0x9e>
 8005614:	2300      	movs	r3, #0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <xQueueGenericSend+0xb6>
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	e7fe      	b.n	800562c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800562e:	f001 fcf5 	bl	800701c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <xQueueGenericSend+0xcc>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d129      	bne.n	8005698 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800564a:	f000 fab6 	bl	8005bba <prvCopyDataToQueue>
 800564e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d010      	beq.n	800567a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	3324      	adds	r3, #36	; 0x24
 800565c:	4618      	mov	r0, r3
 800565e:	f000 ffb9 	bl	80065d4 <xTaskRemoveFromEventList>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d013      	beq.n	8005690 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005668:	4b3f      	ldr	r3, [pc, #252]	; (8005768 <xQueueGenericSend+0x1f0>)
 800566a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	e00a      	b.n	8005690 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005680:	4b39      	ldr	r3, [pc, #228]	; (8005768 <xQueueGenericSend+0x1f0>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005690:	f001 fcf2 	bl	8007078 <vPortExitCritical>
				return pdPASS;
 8005694:	2301      	movs	r3, #1
 8005696:	e063      	b.n	8005760 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800569e:	f001 fceb 	bl	8007078 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e05c      	b.n	8005760 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ac:	f107 0314 	add.w	r3, r7, #20
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fff1 	bl	8006698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056b6:	2301      	movs	r3, #1
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056ba:	f001 fcdd 	bl	8007078 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056be:	f000 fda5 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c2:	f001 fcab 	bl	800701c <vPortEnterCritical>
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056cc:	b25b      	sxtb	r3, r3
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d103      	bne.n	80056dc <xQueueGenericSend+0x164>
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e2:	b25b      	sxtb	r3, r3
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d103      	bne.n	80056f2 <xQueueGenericSend+0x17a>
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056f2:	f001 fcc1 	bl	8007078 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056f6:	1d3a      	adds	r2, r7, #4
 80056f8:	f107 0314 	add.w	r3, r7, #20
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 ffe0 	bl	80066c4 <xTaskCheckForTimeOut>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d124      	bne.n	8005754 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800570a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570c:	f000 fb4d 	bl	8005daa <prvIsQueueFull>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d018      	beq.n	8005748 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	3310      	adds	r3, #16
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4611      	mov	r1, r2
 800571e:	4618      	mov	r0, r3
 8005720:	f000 ff34 	bl	800658c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005726:	f000 fad8 	bl	8005cda <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800572a:	f000 fd7d 	bl	8006228 <xTaskResumeAll>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	f47f af7c 	bne.w	800562e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005736:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <xQueueGenericSend+0x1f0>)
 8005738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	e772      	b.n	800562e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800574a:	f000 fac6 	bl	8005cda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800574e:	f000 fd6b 	bl	8006228 <xTaskResumeAll>
 8005752:	e76c      	b.n	800562e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005756:	f000 fac0 	bl	8005cda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800575a:	f000 fd65 	bl	8006228 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800575e:	2300      	movs	r3, #0
		}
	}
}
 8005760:	4618      	mov	r0, r3
 8005762:	3738      	adds	r7, #56	; 0x38
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08e      	sub	sp, #56	; 0x38
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <xQueueGiveFromISR+0x28>
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	e7fe      	b.n	8005792 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <xQueueGiveFromISR+0x44>
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e7fe      	b.n	80057ae <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <xQueueGiveFromISR+0x54>
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <xQueueGiveFromISR+0x58>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <xQueueGiveFromISR+0x5a>
 80057c4:	2300      	movs	r3, #0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <xQueueGiveFromISR+0x72>
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	e7fe      	b.n	80057dc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057de:	f001 fcf9 	bl	80071d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057e2:	f3ef 8211 	mrs	r2, BASEPRI
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	617a      	str	r2, [r7, #20]
 80057f8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800580a:	429a      	cmp	r2, r3
 800580c:	d22b      	bcs.n	8005866 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005820:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d112      	bne.n	8005850 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	d016      	beq.n	8005860 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	3324      	adds	r3, #36	; 0x24
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fecc 	bl	80065d4 <xTaskRemoveFromEventList>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00e      	beq.n	8005860 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00b      	beq.n	8005860 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e007      	b.n	8005860 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005854:	3301      	adds	r3, #1
 8005856:	b2db      	uxtb	r3, r3
 8005858:	b25a      	sxtb	r2, r3
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005860:	2301      	movs	r3, #1
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
 8005864:	e001      	b.n	800586a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005866:	2300      	movs	r3, #0
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005876:	4618      	mov	r0, r3
 8005878:	3738      	adds	r7, #56	; 0x38
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08e      	sub	sp, #56	; 0x38
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <xQueueSemaphoreTake+0x30>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	623b      	str	r3, [r7, #32]
 80058ae:	e7fe      	b.n	80058ae <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <xQueueSemaphoreTake+0x4c>
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	e7fe      	b.n	80058ca <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058cc:	f001 f83e 	bl	800694c <xTaskGetSchedulerState>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <xQueueSemaphoreTake+0x5c>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <xQueueSemaphoreTake+0x60>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <xQueueSemaphoreTake+0x62>
 80058e0:	2300      	movs	r3, #0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <xQueueSemaphoreTake+0x7a>
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	e7fe      	b.n	80058f8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80058fa:	f001 fb8f 	bl	800701c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d024      	beq.n	8005954 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	1e5a      	subs	r2, r3, #1
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d104      	bne.n	8005924 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800591a:	f001 f9dd 	bl	8006cd8 <pvTaskIncrementMutexHeldCount>
 800591e:	4602      	mov	r2, r0
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00f      	beq.n	800594c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	3310      	adds	r3, #16
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fe4f 	bl	80065d4 <xTaskRemoveFromEventList>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800593c:	4b53      	ldr	r3, [pc, #332]	; (8005a8c <xQueueSemaphoreTake+0x20c>)
 800593e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800594c:	f001 fb94 	bl	8007078 <vPortExitCritical>
				return pdPASS;
 8005950:	2301      	movs	r3, #1
 8005952:	e096      	b.n	8005a82 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d110      	bne.n	800597c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <xQueueSemaphoreTake+0xf4>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e7fe      	b.n	8005972 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005974:	f001 fb80 	bl	8007078 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005978:	2300      	movs	r3, #0
 800597a:	e082      	b.n	8005a82 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005982:	f107 030c 	add.w	r3, r7, #12
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fe86 	bl	8006698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005990:	f001 fb72 	bl	8007078 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005994:	f000 fc3a 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005998:	f001 fb40 	bl	800701c <vPortEnterCritical>
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a2:	b25b      	sxtb	r3, r3
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d103      	bne.n	80059b2 <xQueueSemaphoreTake+0x132>
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b8:	b25b      	sxtb	r3, r3
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d103      	bne.n	80059c8 <xQueueSemaphoreTake+0x148>
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059c8:	f001 fb56 	bl	8007078 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059cc:	463a      	mov	r2, r7
 80059ce:	f107 030c 	add.w	r3, r7, #12
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fe75 	bl	80066c4 <xTaskCheckForTimeOut>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d132      	bne.n	8005a46 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059e2:	f000 f9cc 	bl	8005d7e <prvIsQueueEmpty>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d026      	beq.n	8005a3a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80059f4:	f001 fb12 	bl	800701c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 ffc3 	bl	8006988 <xTaskPriorityInherit>
 8005a02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005a04:	f001 fb38 	bl	8007078 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	3324      	adds	r3, #36	; 0x24
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fdbb 	bl	800658c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a18:	f000 f95f 	bl	8005cda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a1c:	f000 fc04 	bl	8006228 <xTaskResumeAll>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f47f af69 	bne.w	80058fa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005a28:	4b18      	ldr	r3, [pc, #96]	; (8005a8c <xQueueSemaphoreTake+0x20c>)
 8005a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	e75f      	b.n	80058fa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a3c:	f000 f94d 	bl	8005cda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a40:	f000 fbf2 	bl	8006228 <xTaskResumeAll>
 8005a44:	e759      	b.n	80058fa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a48:	f000 f947 	bl	8005cda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a4c:	f000 fbec 	bl	8006228 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a52:	f000 f994 	bl	8005d7e <prvIsQueueEmpty>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f43f af4e 	beq.w	80058fa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005a64:	f001 fada 	bl	800701c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a6a:	f000 f88e 	bl	8005b8a <prvGetDisinheritPriorityAfterTimeout>
 8005a6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a76:	4618      	mov	r0, r3
 8005a78:	f001 f890 	bl	8006b9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a7c:	f001 fafc 	bl	8007078 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3738      	adds	r7, #56	; 0x38
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08e      	sub	sp, #56	; 0x38
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <xQueueReceiveFromISR+0x2a>
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	e7fe      	b.n	8005ab8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d103      	bne.n	8005ac8 <xQueueReceiveFromISR+0x38>
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <xQueueReceiveFromISR+0x3c>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <xQueueReceiveFromISR+0x3e>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <xQueueReceiveFromISR+0x56>
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e7fe      	b.n	8005ae4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ae6:	f001 fb75 	bl	80071d4 <vPortValidateInterruptPriority>
	__asm volatile
 8005aea:	f3ef 8211 	mrs	r2, BASEPRI
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	61ba      	str	r2, [r7, #24]
 8005b00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d02f      	beq.n	8005b72 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b20:	f000 f8b5 	bl	8005c8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	1e5a      	subs	r2, r3, #1
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005b2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d112      	bne.n	8005b5c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d016      	beq.n	8005b6c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	3310      	adds	r3, #16
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fd46 	bl	80065d4 <xTaskRemoveFromEventList>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e007      	b.n	8005b6c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b60:	3301      	adds	r3, #1
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	b25a      	sxtb	r2, r3
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b70:	e001      	b.n	8005b76 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3738      	adds	r7, #56	; 0x38
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d006      	beq.n	8005ba8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f1c3 0307 	rsb	r3, r3, #7
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e001      	b.n	8005bac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005bac:	68fb      	ldr	r3, [r7, #12]
	}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b086      	sub	sp, #24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10d      	bne.n	8005bf4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d14d      	bne.n	8005c7c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 ff55 	bl	8006a94 <xTaskPriorityDisinherit>
 8005bea:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	605a      	str	r2, [r3, #4]
 8005bf2:	e043      	b.n	8005c7c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d119      	bne.n	8005c2e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6898      	ldr	r0, [r3, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	461a      	mov	r2, r3
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	f001 fd1d 	bl	8007644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	441a      	add	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d32b      	bcc.n	8005c7c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	e026      	b.n	8005c7c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	68d8      	ldr	r0, [r3, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	461a      	mov	r2, r3
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	f001 fd03 	bl	8007644 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	425b      	negs	r3, r3
 8005c48:	441a      	add	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d207      	bcs.n	8005c6a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	425b      	negs	r3, r3
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d105      	bne.n	8005c7c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c84:	697b      	ldr	r3, [r7, #20]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d018      	beq.n	8005cd2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	441a      	add	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d303      	bcc.n	8005cc2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68d9      	ldr	r1, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6838      	ldr	r0, [r7, #0]
 8005cce:	f001 fcb9 	bl	8007644 <memcpy>
	}
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ce2:	f001 f99b 	bl	800701c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cee:	e011      	b.n	8005d14 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d012      	beq.n	8005d1e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fc69 	bl	80065d4 <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d08:	f000 fd3c 	bl	8006784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dce9      	bgt.n	8005cf0 <prvUnlockQueue+0x16>
 8005d1c:	e000      	b.n	8005d20 <prvUnlockQueue+0x46>
					break;
 8005d1e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	22ff      	movs	r2, #255	; 0xff
 8005d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d28:	f001 f9a6 	bl	8007078 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d2c:	f001 f976 	bl	800701c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d36:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d38:	e011      	b.n	8005d5e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d012      	beq.n	8005d68 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3310      	adds	r3, #16
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fc44 	bl	80065d4 <xTaskRemoveFromEventList>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d52:	f000 fd17 	bl	8006784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	dce9      	bgt.n	8005d3a <prvUnlockQueue+0x60>
 8005d66:	e000      	b.n	8005d6a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d68:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	22ff      	movs	r2, #255	; 0xff
 8005d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d72:	f001 f981 	bl	8007078 <vPortExitCritical>
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d86:	f001 f949 	bl	800701c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d92:	2301      	movs	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e001      	b.n	8005d9c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d9c:	f001 f96c 	bl	8007078 <vPortExitCritical>

	return xReturn;
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005db2:	f001 f933 	bl	800701c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d102      	bne.n	8005dc8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e001      	b.n	8005dcc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dcc:	f001 f954 	bl	8007078 <vPortExitCritical>

	return xReturn;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b08e      	sub	sp, #56	; 0x38
 8005dde:	af04      	add	r7, sp, #16
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <xTaskCreateStatic+0x28>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	623b      	str	r3, [r7, #32]
 8005e00:	e7fe      	b.n	8005e00 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d109      	bne.n	8005e1c <xTaskCreateStatic+0x42>
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e7fe      	b.n	8005e1a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e1c:	2354      	movs	r3, #84	; 0x54
 8005e1e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b54      	cmp	r3, #84	; 0x54
 8005e24:	d009      	beq.n	8005e3a <xTaskCreateStatic+0x60>
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	61bb      	str	r3, [r7, #24]
 8005e38:	e7fe      	b.n	8005e38 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <xTaskCreateStatic+0xa4>
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01b      	beq.n	8005e7e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9303      	str	r3, [sp, #12]
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	9302      	str	r3, [sp, #8]
 8005e60:	f107 0314 	add.w	r3, r7, #20
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f850 	bl	8005f16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e78:	f000 f8cc 	bl	8006014 <prvAddNewTaskToReadyList>
 8005e7c:	e001      	b.n	8005e82 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e82:	697b      	ldr	r3, [r7, #20]
	}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3728      	adds	r7, #40	; 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08c      	sub	sp, #48	; 0x30
 8005e90:	af04      	add	r7, sp, #16
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f001 f9d5 	bl	8007250 <pvPortMalloc>
 8005ea6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00e      	beq.n	8005ecc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005eae:	2054      	movs	r0, #84	; 0x54
 8005eb0:	f001 f9ce 	bl	8007250 <pvPortMalloc>
 8005eb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ec2:	e005      	b.n	8005ed0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ec4:	6978      	ldr	r0, [r7, #20]
 8005ec6:	f001 fa85 	bl	80073d4 <vPortFree>
 8005eca:	e001      	b.n	8005ed0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d017      	beq.n	8005f06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9303      	str	r3, [sp, #12]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	9302      	str	r3, [sp, #8]
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f80e 	bl	8005f16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efa:	69f8      	ldr	r0, [r7, #28]
 8005efc:	f000 f88a 	bl	8006014 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f00:	2301      	movs	r3, #1
 8005f02:	61bb      	str	r3, [r7, #24]
 8005f04:	e002      	b.n	8005f0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
	}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b088      	sub	sp, #32
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f023 0307 	bic.w	r3, r3, #7
 8005f3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d009      	beq.n	8005f5c <prvInitialiseNewTask+0x46>
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e7fe      	b.n	8005f5a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	e012      	b.n	8005f88 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	7819      	ldrb	r1, [r3, #0]
 8005f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	3334      	adds	r3, #52	; 0x34
 8005f72:	460a      	mov	r2, r1
 8005f74:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d006      	beq.n	8005f90 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	3301      	adds	r3, #1
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	2b0f      	cmp	r3, #15
 8005f8c:	d9e9      	bls.n	8005f62 <prvInitialiseNewTask+0x4c>
 8005f8e:	e000      	b.n	8005f92 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005f90:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	2b06      	cmp	r3, #6
 8005f9e:	d901      	bls.n	8005fa4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fa0:	2306      	movs	r3, #6
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff f8c4 	bl	8005148 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	3318      	adds	r3, #24
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff f8bf 	bl	8005148 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	f1c3 0207 	rsb	r2, r3, #7
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	68f9      	ldr	r1, [r7, #12]
 8005ff2:	69b8      	ldr	r0, [r7, #24]
 8005ff4:	f000 feea 	bl	8006dcc <pxPortInitialiseStack>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800600a:	bf00      	nop
 800600c:	3720      	adds	r7, #32
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800601c:	f000 fffe 	bl	800701c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006020:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <prvAddNewTaskToReadyList+0xb8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3301      	adds	r3, #1
 8006026:	4a29      	ldr	r2, [pc, #164]	; (80060cc <prvAddNewTaskToReadyList+0xb8>)
 8006028:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800602a:	4b29      	ldr	r3, [pc, #164]	; (80060d0 <prvAddNewTaskToReadyList+0xbc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d109      	bne.n	8006046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006032:	4a27      	ldr	r2, [pc, #156]	; (80060d0 <prvAddNewTaskToReadyList+0xbc>)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006038:	4b24      	ldr	r3, [pc, #144]	; (80060cc <prvAddNewTaskToReadyList+0xb8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d110      	bne.n	8006062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006040:	f000 fbc4 	bl	80067cc <prvInitialiseTaskLists>
 8006044:	e00d      	b.n	8006062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006046:	4b23      	ldr	r3, [pc, #140]	; (80060d4 <prvAddNewTaskToReadyList+0xc0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d109      	bne.n	8006062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800604e:	4b20      	ldr	r3, [pc, #128]	; (80060d0 <prvAddNewTaskToReadyList+0xbc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	429a      	cmp	r2, r3
 800605a:	d802      	bhi.n	8006062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800605c:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <prvAddNewTaskToReadyList+0xbc>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006062:	4b1d      	ldr	r3, [pc, #116]	; (80060d8 <prvAddNewTaskToReadyList+0xc4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3301      	adds	r3, #1
 8006068:	4a1b      	ldr	r2, [pc, #108]	; (80060d8 <prvAddNewTaskToReadyList+0xc4>)
 800606a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	2201      	movs	r2, #1
 8006072:	409a      	lsls	r2, r3
 8006074:	4b19      	ldr	r3, [pc, #100]	; (80060dc <prvAddNewTaskToReadyList+0xc8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4313      	orrs	r3, r2
 800607a:	4a18      	ldr	r2, [pc, #96]	; (80060dc <prvAddNewTaskToReadyList+0xc8>)
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <prvAddNewTaskToReadyList+0xcc>)
 800608c:	441a      	add	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3304      	adds	r3, #4
 8006092:	4619      	mov	r1, r3
 8006094:	4610      	mov	r0, r2
 8006096:	f7ff f864 	bl	8005162 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800609a:	f000 ffed 	bl	8007078 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800609e:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <prvAddNewTaskToReadyList+0xc0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00e      	beq.n	80060c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060a6:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <prvAddNewTaskToReadyList+0xbc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d207      	bcs.n	80060c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <prvAddNewTaskToReadyList+0xd0>)
 80060b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20000384 	.word	0x20000384
 80060d0:	20000284 	.word	0x20000284
 80060d4:	20000390 	.word	0x20000390
 80060d8:	200003a0 	.word	0x200003a0
 80060dc:	2000038c 	.word	0x2000038c
 80060e0:	20000288 	.word	0x20000288
 80060e4:	e000ed04 	.word	0xe000ed04

080060e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d016      	beq.n	8006128 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060fa:	4b13      	ldr	r3, [pc, #76]	; (8006148 <vTaskDelay+0x60>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <vTaskDelay+0x2e>
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60bb      	str	r3, [r7, #8]
 8006114:	e7fe      	b.n	8006114 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006116:	f000 f879 	bl	800620c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800611a:	2100      	movs	r1, #0
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fdef 	bl	8006d00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006122:	f000 f881 	bl	8006228 <xTaskResumeAll>
 8006126:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d107      	bne.n	800613e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800612e:	4b07      	ldr	r3, [pc, #28]	; (800614c <vTaskDelay+0x64>)
 8006130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	200003ac 	.word	0x200003ac
 800614c:	e000ed04 	.word	0xe000ed04

08006150 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800615e:	463a      	mov	r2, r7
 8006160:	1d39      	adds	r1, r7, #4
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	4618      	mov	r0, r3
 8006168:	f7fa f9ba 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	9202      	str	r2, [sp, #8]
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	2300      	movs	r3, #0
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	2300      	movs	r3, #0
 800617c:	460a      	mov	r2, r1
 800617e:	491d      	ldr	r1, [pc, #116]	; (80061f4 <vTaskStartScheduler+0xa4>)
 8006180:	481d      	ldr	r0, [pc, #116]	; (80061f8 <vTaskStartScheduler+0xa8>)
 8006182:	f7ff fe2a 	bl	8005dda <xTaskCreateStatic>
 8006186:	4602      	mov	r2, r0
 8006188:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <vTaskStartScheduler+0xac>)
 800618a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800618c:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <vTaskStartScheduler+0xac>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006194:	2301      	movs	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e001      	b.n	800619e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d115      	bne.n	80061d0 <vTaskStartScheduler+0x80>
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <vTaskStartScheduler+0xb0>)
 80061b8:	f04f 32ff 	mov.w	r2, #4294967295
 80061bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <vTaskStartScheduler+0xb4>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061c4:	4b10      	ldr	r3, [pc, #64]	; (8006208 <vTaskStartScheduler+0xb8>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061ca:	f000 fe89 	bl	8006ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061ce:	e00d      	b.n	80061ec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d109      	bne.n	80061ec <vTaskStartScheduler+0x9c>
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e7fe      	b.n	80061ea <vTaskStartScheduler+0x9a>
}
 80061ec:	bf00      	nop
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	08007704 	.word	0x08007704
 80061f8:	0800679d 	.word	0x0800679d
 80061fc:	200003a8 	.word	0x200003a8
 8006200:	200003a4 	.word	0x200003a4
 8006204:	20000390 	.word	0x20000390
 8006208:	20000388 	.word	0x20000388

0800620c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <vTaskSuspendAll+0x18>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	4a03      	ldr	r2, [pc, #12]	; (8006224 <vTaskSuspendAll+0x18>)
 8006218:	6013      	str	r3, [r2, #0]
}
 800621a:	bf00      	nop
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	200003ac 	.word	0x200003ac

08006228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006236:	4b41      	ldr	r3, [pc, #260]	; (800633c <xTaskResumeAll+0x114>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <xTaskResumeAll+0x2a>
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	e7fe      	b.n	8006250 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006252:	f000 fee3 	bl	800701c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006256:	4b39      	ldr	r3, [pc, #228]	; (800633c <xTaskResumeAll+0x114>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3b01      	subs	r3, #1
 800625c:	4a37      	ldr	r2, [pc, #220]	; (800633c <xTaskResumeAll+0x114>)
 800625e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006260:	4b36      	ldr	r3, [pc, #216]	; (800633c <xTaskResumeAll+0x114>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d161      	bne.n	800632c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006268:	4b35      	ldr	r3, [pc, #212]	; (8006340 <xTaskResumeAll+0x118>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d05d      	beq.n	800632c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006270:	e02e      	b.n	80062d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006272:	4b34      	ldr	r3, [pc, #208]	; (8006344 <xTaskResumeAll+0x11c>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3318      	adds	r3, #24
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe ffcc 	bl	800521c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3304      	adds	r3, #4
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe ffc7 	bl	800521c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	2201      	movs	r2, #1
 8006294:	409a      	lsls	r2, r3
 8006296:	4b2c      	ldr	r3, [pc, #176]	; (8006348 <xTaskResumeAll+0x120>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4313      	orrs	r3, r2
 800629c:	4a2a      	ldr	r2, [pc, #168]	; (8006348 <xTaskResumeAll+0x120>)
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4a27      	ldr	r2, [pc, #156]	; (800634c <xTaskResumeAll+0x124>)
 80062ae:	441a      	add	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f7fe ff53 	bl	8005162 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c0:	4b23      	ldr	r3, [pc, #140]	; (8006350 <xTaskResumeAll+0x128>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d302      	bcc.n	80062d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80062ca:	4b22      	ldr	r3, [pc, #136]	; (8006354 <xTaskResumeAll+0x12c>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <xTaskResumeAll+0x11c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1cc      	bne.n	8006272 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062de:	f000 fb0f 	bl	8006900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062e2:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <xTaskResumeAll+0x130>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d010      	beq.n	8006310 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062ee:	f000 f837 	bl	8006360 <xTaskIncrementTick>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80062f8:	4b16      	ldr	r3, [pc, #88]	; (8006354 <xTaskResumeAll+0x12c>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3b01      	subs	r3, #1
 8006302:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f1      	bne.n	80062ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <xTaskResumeAll+0x130>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006310:	4b10      	ldr	r3, [pc, #64]	; (8006354 <xTaskResumeAll+0x12c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800631c:	4b0f      	ldr	r3, [pc, #60]	; (800635c <xTaskResumeAll+0x134>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800632c:	f000 fea4 	bl	8007078 <vPortExitCritical>

	return xAlreadyYielded;
 8006330:	68bb      	ldr	r3, [r7, #8]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	200003ac 	.word	0x200003ac
 8006340:	20000384 	.word	0x20000384
 8006344:	20000344 	.word	0x20000344
 8006348:	2000038c 	.word	0x2000038c
 800634c:	20000288 	.word	0x20000288
 8006350:	20000284 	.word	0x20000284
 8006354:	20000398 	.word	0x20000398
 8006358:	20000394 	.word	0x20000394
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636a:	4b50      	ldr	r3, [pc, #320]	; (80064ac <xTaskIncrementTick+0x14c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 808c 	bne.w	800648c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006374:	4b4e      	ldr	r3, [pc, #312]	; (80064b0 <xTaskIncrementTick+0x150>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800637c:	4a4c      	ldr	r2, [pc, #304]	; (80064b0 <xTaskIncrementTick+0x150>)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d11f      	bne.n	80063c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006388:	4b4a      	ldr	r3, [pc, #296]	; (80064b4 <xTaskIncrementTick+0x154>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <xTaskIncrementTick+0x46>
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	e7fe      	b.n	80063a4 <xTaskIncrementTick+0x44>
 80063a6:	4b43      	ldr	r3, [pc, #268]	; (80064b4 <xTaskIncrementTick+0x154>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	4b42      	ldr	r3, [pc, #264]	; (80064b8 <xTaskIncrementTick+0x158>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a40      	ldr	r2, [pc, #256]	; (80064b4 <xTaskIncrementTick+0x154>)
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4a40      	ldr	r2, [pc, #256]	; (80064b8 <xTaskIncrementTick+0x158>)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4b40      	ldr	r3, [pc, #256]	; (80064bc <xTaskIncrementTick+0x15c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	4a3e      	ldr	r2, [pc, #248]	; (80064bc <xTaskIncrementTick+0x15c>)
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	f000 fa9c 	bl	8006900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063c8:	4b3d      	ldr	r3, [pc, #244]	; (80064c0 <xTaskIncrementTick+0x160>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d34d      	bcc.n	800646e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d2:	4b38      	ldr	r3, [pc, #224]	; (80064b4 <xTaskIncrementTick+0x154>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <xTaskIncrementTick+0x80>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <xTaskIncrementTick+0x82>
 80063e0:	2300      	movs	r3, #0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e6:	4b36      	ldr	r3, [pc, #216]	; (80064c0 <xTaskIncrementTick+0x160>)
 80063e8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ec:	601a      	str	r2, [r3, #0]
					break;
 80063ee:	e03e      	b.n	800646e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063f0:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <xTaskIncrementTick+0x154>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	429a      	cmp	r2, r3
 8006406:	d203      	bcs.n	8006410 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006408:	4a2d      	ldr	r2, [pc, #180]	; (80064c0 <xTaskIncrementTick+0x160>)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6013      	str	r3, [r2, #0]
						break;
 800640e:	e02e      	b.n	800646e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	3304      	adds	r3, #4
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe ff01 	bl	800521c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	3318      	adds	r3, #24
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe fef8 	bl	800521c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	2201      	movs	r2, #1
 8006432:	409a      	lsls	r2, r3
 8006434:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <xTaskIncrementTick+0x164>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4313      	orrs	r3, r2
 800643a:	4a22      	ldr	r2, [pc, #136]	; (80064c4 <xTaskIncrementTick+0x164>)
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <xTaskIncrementTick+0x168>)
 800644c:	441a      	add	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fe fe84 	bl	8005162 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645e:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <xTaskIncrementTick+0x16c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	429a      	cmp	r2, r3
 8006466:	d3b4      	bcc.n	80063d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006468:	2301      	movs	r3, #1
 800646a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800646c:	e7b1      	b.n	80063d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800646e:	4b17      	ldr	r3, [pc, #92]	; (80064cc <xTaskIncrementTick+0x16c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	4914      	ldr	r1, [pc, #80]	; (80064c8 <xTaskIncrementTick+0x168>)
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	440b      	add	r3, r1
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d907      	bls.n	8006496 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006486:	2301      	movs	r3, #1
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e004      	b.n	8006496 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800648c:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <xTaskIncrementTick+0x170>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3301      	adds	r3, #1
 8006492:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <xTaskIncrementTick+0x170>)
 8006494:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006496:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <xTaskIncrementTick+0x174>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800649e:	2301      	movs	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064a2:	697b      	ldr	r3, [r7, #20]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	200003ac 	.word	0x200003ac
 80064b0:	20000388 	.word	0x20000388
 80064b4:	2000033c 	.word	0x2000033c
 80064b8:	20000340 	.word	0x20000340
 80064bc:	2000039c 	.word	0x2000039c
 80064c0:	200003a4 	.word	0x200003a4
 80064c4:	2000038c 	.word	0x2000038c
 80064c8:	20000288 	.word	0x20000288
 80064cc:	20000284 	.word	0x20000284
 80064d0:	20000394 	.word	0x20000394
 80064d4:	20000398 	.word	0x20000398

080064d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064de:	4b26      	ldr	r3, [pc, #152]	; (8006578 <vTaskSwitchContext+0xa0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064e6:	4b25      	ldr	r3, [pc, #148]	; (800657c <vTaskSwitchContext+0xa4>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064ec:	e03e      	b.n	800656c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80064ee:	4b23      	ldr	r3, [pc, #140]	; (800657c <vTaskSwitchContext+0xa4>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064f4:	4b22      	ldr	r3, [pc, #136]	; (8006580 <vTaskSwitchContext+0xa8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	fab3 f383 	clz	r3, r3
 8006500:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	f1c3 031f 	rsb	r3, r3, #31
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	491e      	ldr	r1, [pc, #120]	; (8006584 <vTaskSwitchContext+0xac>)
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <vTaskSwitchContext+0x5a>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	607b      	str	r3, [r7, #4]
 8006530:	e7fe      	b.n	8006530 <vTaskSwitchContext+0x58>
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4a11      	ldr	r2, [pc, #68]	; (8006584 <vTaskSwitchContext+0xac>)
 800653e:	4413      	add	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	605a      	str	r2, [r3, #4]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	3308      	adds	r3, #8
 8006554:	429a      	cmp	r2, r3
 8006556:	d104      	bne.n	8006562 <vTaskSwitchContext+0x8a>
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	4a07      	ldr	r2, [pc, #28]	; (8006588 <vTaskSwitchContext+0xb0>)
 800656a:	6013      	str	r3, [r2, #0]
}
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	200003ac 	.word	0x200003ac
 800657c:	20000398 	.word	0x20000398
 8006580:	2000038c 	.word	0x2000038c
 8006584:	20000288 	.word	0x20000288
 8006588:	20000284 	.word	0x20000284

0800658c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <vTaskPlaceOnEventList+0x24>
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e7fe      	b.n	80065ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <vTaskPlaceOnEventList+0x44>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3318      	adds	r3, #24
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7fe fdf6 	bl	80051aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065be:	2101      	movs	r1, #1
 80065c0:	6838      	ldr	r0, [r7, #0]
 80065c2:	f000 fb9d 	bl	8006d00 <prvAddCurrentTaskToDelayedList>
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000284 	.word	0x20000284

080065d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <xTaskRemoveFromEventList+0x2a>
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e7fe      	b.n	80065fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3318      	adds	r3, #24
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fe0a 	bl	800521c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006608:	4b1d      	ldr	r3, [pc, #116]	; (8006680 <xTaskRemoveFromEventList+0xac>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11c      	bne.n	800664a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3304      	adds	r3, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe fe01 	bl	800521c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	2201      	movs	r2, #1
 8006620:	409a      	lsls	r2, r3
 8006622:	4b18      	ldr	r3, [pc, #96]	; (8006684 <xTaskRemoveFromEventList+0xb0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4313      	orrs	r3, r2
 8006628:	4a16      	ldr	r2, [pc, #88]	; (8006684 <xTaskRemoveFromEventList+0xb0>)
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4a13      	ldr	r2, [pc, #76]	; (8006688 <xTaskRemoveFromEventList+0xb4>)
 800663a:	441a      	add	r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7fe fd8d 	bl	8005162 <vListInsertEnd>
 8006648:	e005      	b.n	8006656 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3318      	adds	r3, #24
 800664e:	4619      	mov	r1, r3
 8006650:	480e      	ldr	r0, [pc, #56]	; (800668c <xTaskRemoveFromEventList+0xb8>)
 8006652:	f7fe fd86 	bl	8005162 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665a:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <xTaskRemoveFromEventList+0xbc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	429a      	cmp	r2, r3
 8006662:	d905      	bls.n	8006670 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006664:	2301      	movs	r3, #1
 8006666:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <xTaskRemoveFromEventList+0xc0>)
 800666a:	2201      	movs	r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e001      	b.n	8006674 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006674:	697b      	ldr	r3, [r7, #20]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200003ac 	.word	0x200003ac
 8006684:	2000038c 	.word	0x2000038c
 8006688:	20000288 	.word	0x20000288
 800668c:	20000344 	.word	0x20000344
 8006690:	20000284 	.word	0x20000284
 8006694:	20000398 	.word	0x20000398

08006698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <vTaskInternalSetTimeOutState+0x24>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <vTaskInternalSetTimeOutState+0x28>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	605a      	str	r2, [r3, #4]
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	2000039c 	.word	0x2000039c
 80066c0:	20000388 	.word	0x20000388

080066c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d109      	bne.n	80066e8 <xTaskCheckForTimeOut+0x24>
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	e7fe      	b.n	80066e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <xTaskCheckForTimeOut+0x3e>
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	e7fe      	b.n	8006700 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006702:	f000 fc8b 	bl	800701c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006706:	4b1d      	ldr	r3, [pc, #116]	; (800677c <xTaskCheckForTimeOut+0xb8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671e:	d102      	bne.n	8006726 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	e023      	b.n	800676e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <xTaskCheckForTimeOut+0xbc>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d007      	beq.n	8006742 <xTaskCheckForTimeOut+0x7e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	429a      	cmp	r2, r3
 800673a:	d302      	bcc.n	8006742 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
 8006740:	e015      	b.n	800676e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	429a      	cmp	r2, r3
 800674a:	d20b      	bcs.n	8006764 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad2      	subs	r2, r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff ff9d 	bl	8006698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	e004      	b.n	800676e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800676e:	f000 fc83 	bl	8007078 <vPortExitCritical>

	return xReturn;
 8006772:	69fb      	ldr	r3, [r7, #28]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3720      	adds	r7, #32
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20000388 	.word	0x20000388
 8006780:	2000039c 	.word	0x2000039c

08006784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006788:	4b03      	ldr	r3, [pc, #12]	; (8006798 <vTaskMissedYield+0x14>)
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]
}
 800678e:	bf00      	nop
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	20000398 	.word	0x20000398

0800679c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067a4:	f000 f852 	bl	800684c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067a8:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <prvIdleTask+0x28>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d9f9      	bls.n	80067a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <prvIdleTask+0x2c>)
 80067b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067c0:	e7f0      	b.n	80067a4 <prvIdleTask+0x8>
 80067c2:	bf00      	nop
 80067c4:	20000288 	.word	0x20000288
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067d2:	2300      	movs	r3, #0
 80067d4:	607b      	str	r3, [r7, #4]
 80067d6:	e00c      	b.n	80067f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <prvInitialiseTaskLists+0x60>)
 80067e4:	4413      	add	r3, r2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fc8e 	bl	8005108 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3301      	adds	r3, #1
 80067f0:	607b      	str	r3, [r7, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b06      	cmp	r3, #6
 80067f6:	d9ef      	bls.n	80067d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067f8:	480d      	ldr	r0, [pc, #52]	; (8006830 <prvInitialiseTaskLists+0x64>)
 80067fa:	f7fe fc85 	bl	8005108 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067fe:	480d      	ldr	r0, [pc, #52]	; (8006834 <prvInitialiseTaskLists+0x68>)
 8006800:	f7fe fc82 	bl	8005108 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006804:	480c      	ldr	r0, [pc, #48]	; (8006838 <prvInitialiseTaskLists+0x6c>)
 8006806:	f7fe fc7f 	bl	8005108 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800680a:	480c      	ldr	r0, [pc, #48]	; (800683c <prvInitialiseTaskLists+0x70>)
 800680c:	f7fe fc7c 	bl	8005108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006810:	480b      	ldr	r0, [pc, #44]	; (8006840 <prvInitialiseTaskLists+0x74>)
 8006812:	f7fe fc79 	bl	8005108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006816:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <prvInitialiseTaskLists+0x78>)
 8006818:	4a05      	ldr	r2, [pc, #20]	; (8006830 <prvInitialiseTaskLists+0x64>)
 800681a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <prvInitialiseTaskLists+0x7c>)
 800681e:	4a05      	ldr	r2, [pc, #20]	; (8006834 <prvInitialiseTaskLists+0x68>)
 8006820:	601a      	str	r2, [r3, #0]
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000288 	.word	0x20000288
 8006830:	20000314 	.word	0x20000314
 8006834:	20000328 	.word	0x20000328
 8006838:	20000344 	.word	0x20000344
 800683c:	20000358 	.word	0x20000358
 8006840:	20000370 	.word	0x20000370
 8006844:	2000033c 	.word	0x2000033c
 8006848:	20000340 	.word	0x20000340

0800684c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006852:	e019      	b.n	8006888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006854:	f000 fbe2 	bl	800701c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006858:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <prvCheckTasksWaitingTermination+0x4c>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe fcd9 	bl	800521c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800686a:	4b0c      	ldr	r3, [pc, #48]	; (800689c <prvCheckTasksWaitingTermination+0x50>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3b01      	subs	r3, #1
 8006870:	4a0a      	ldr	r2, [pc, #40]	; (800689c <prvCheckTasksWaitingTermination+0x50>)
 8006872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <prvCheckTasksWaitingTermination+0x54>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3b01      	subs	r3, #1
 800687a:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <prvCheckTasksWaitingTermination+0x54>)
 800687c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800687e:	f000 fbfb 	bl	8007078 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f80e 	bl	80068a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006888:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <prvCheckTasksWaitingTermination+0x54>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e1      	bne.n	8006854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20000358 	.word	0x20000358
 800689c:	20000384 	.word	0x20000384
 80068a0:	2000036c 	.word	0x2000036c

080068a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d108      	bne.n	80068c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fd8a 	bl	80073d4 <vPortFree>
				vPortFree( pxTCB );
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fd87 	bl	80073d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068c6:	e017      	b.n	80068f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d103      	bne.n	80068da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fd7e 	bl	80073d4 <vPortFree>
	}
 80068d8:	e00e      	b.n	80068f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d009      	beq.n	80068f8 <prvDeleteTCB+0x54>
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e7fe      	b.n	80068f6 <prvDeleteTCB+0x52>
	}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006906:	4b0f      	ldr	r3, [pc, #60]	; (8006944 <prvResetNextTaskUnblockTime+0x44>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <prvResetNextTaskUnblockTime+0x14>
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <prvResetNextTaskUnblockTime+0x16>
 8006914:	2300      	movs	r3, #0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d004      	beq.n	8006924 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800691a:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <prvResetNextTaskUnblockTime+0x48>)
 800691c:	f04f 32ff 	mov.w	r2, #4294967295
 8006920:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006922:	e008      	b.n	8006936 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006924:	4b07      	ldr	r3, [pc, #28]	; (8006944 <prvResetNextTaskUnblockTime+0x44>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4a05      	ldr	r2, [pc, #20]	; (8006948 <prvResetNextTaskUnblockTime+0x48>)
 8006934:	6013      	str	r3, [r2, #0]
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	2000033c 	.word	0x2000033c
 8006948:	200003a4 	.word	0x200003a4

0800694c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006952:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <xTaskGetSchedulerState+0x34>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800695a:	2301      	movs	r3, #1
 800695c:	607b      	str	r3, [r7, #4]
 800695e:	e008      	b.n	8006972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006960:	4b08      	ldr	r3, [pc, #32]	; (8006984 <xTaskGetSchedulerState+0x38>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006968:	2302      	movs	r3, #2
 800696a:	607b      	str	r3, [r7, #4]
 800696c:	e001      	b.n	8006972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800696e:	2300      	movs	r3, #0
 8006970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006972:	687b      	ldr	r3, [r7, #4]
	}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20000390 	.word	0x20000390
 8006984:	200003ac 	.word	0x200003ac

08006988 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d06e      	beq.n	8006a7c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a2:	4b39      	ldr	r3, [pc, #228]	; (8006a88 <xTaskPriorityInherit+0x100>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d25e      	bcs.n	8006a6a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	db06      	blt.n	80069c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b4:	4b34      	ldr	r3, [pc, #208]	; (8006a88 <xTaskPriorityInherit+0x100>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	f1c3 0207 	rsb	r2, r3, #7
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6959      	ldr	r1, [r3, #20]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4a2e      	ldr	r2, [pc, #184]	; (8006a8c <xTaskPriorityInherit+0x104>)
 80069d4:	4413      	add	r3, r2
 80069d6:	4299      	cmp	r1, r3
 80069d8:	d101      	bne.n	80069de <xTaskPriorityInherit+0x56>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xTaskPriorityInherit+0x58>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d03a      	beq.n	8006a5a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe fc17 	bl	800521c <uxListRemove>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d115      	bne.n	8006a20 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f8:	4924      	ldr	r1, [pc, #144]	; (8006a8c <xTaskPriorityInherit+0x104>)
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <xTaskPriorityInherit+0x98>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	2201      	movs	r2, #1
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	43da      	mvns	r2, r3
 8006a16:	4b1e      	ldr	r3, [pc, #120]	; (8006a90 <xTaskPriorityInherit+0x108>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <xTaskPriorityInherit+0x108>)
 8006a1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a20:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <xTaskPriorityInherit+0x100>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	2201      	movs	r2, #1
 8006a30:	409a      	lsls	r2, r3
 8006a32:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <xTaskPriorityInherit+0x108>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	4a15      	ldr	r2, [pc, #84]	; (8006a90 <xTaskPriorityInherit+0x108>)
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <xTaskPriorityInherit+0x104>)
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4619      	mov	r1, r3
 8006a52:	4610      	mov	r0, r2
 8006a54:	f7fe fb85 	bl	8005162 <vListInsertEnd>
 8006a58:	e004      	b.n	8006a64 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <xTaskPriorityInherit+0x100>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a64:	2301      	movs	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	e008      	b.n	8006a7c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6e:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <xTaskPriorityInherit+0x100>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d201      	bcs.n	8006a7c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
	}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000284 	.word	0x20000284
 8006a8c:	20000288 	.word	0x20000288
 8006a90:	2000038c 	.word	0x2000038c

08006a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d06c      	beq.n	8006b84 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aaa:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <xTaskPriorityDisinherit+0xfc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d009      	beq.n	8006ac8 <xTaskPriorityDisinherit+0x34>
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	e7fe      	b.n	8006ac6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <xTaskPriorityDisinherit+0x50>
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	e7fe      	b.n	8006ae2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae8:	1e5a      	subs	r2, r3, #1
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d044      	beq.n	8006b84 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d140      	bne.n	8006b84 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fb88 	bl	800521c <uxListRemove>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d115      	bne.n	8006b3e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b16:	491f      	ldr	r1, [pc, #124]	; (8006b94 <xTaskPriorityDisinherit+0x100>)
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xTaskPriorityDisinherit+0xaa>
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	43da      	mvns	r2, r3
 8006b34:	4b18      	ldr	r3, [pc, #96]	; (8006b98 <xTaskPriorityDisinherit+0x104>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <xTaskPriorityDisinherit+0x104>)
 8006b3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	f1c3 0207 	rsb	r2, r3, #7
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	2201      	movs	r2, #1
 8006b58:	409a      	lsls	r2, r3
 8006b5a:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <xTaskPriorityDisinherit+0x104>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	4a0d      	ldr	r2, [pc, #52]	; (8006b98 <xTaskPriorityDisinherit+0x104>)
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <xTaskPriorityDisinherit+0x100>)
 8006b72:	441a      	add	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	f7fe faf1 	bl	8005162 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b80:	2301      	movs	r3, #1
 8006b82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b84:	697b      	ldr	r3, [r7, #20]
	}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20000284 	.word	0x20000284
 8006b94:	20000288 	.word	0x20000288
 8006b98:	2000038c 	.word	0x2000038c

08006b9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006baa:	2301      	movs	r3, #1
 8006bac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8086 	beq.w	8006cc2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e7fe      	b.n	8006bd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d902      	bls.n	8006be2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	61fb      	str	r3, [r7, #28]
 8006be0:	e002      	b.n	8006be8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d067      	beq.n	8006cc2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d162      	bne.n	8006cc2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006bfc:	4b33      	ldr	r3, [pc, #204]	; (8006ccc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d109      	bne.n	8006c1a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	60bb      	str	r3, [r7, #8]
 8006c18:	e7fe      	b.n	8006c18 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	db04      	blt.n	8006c38 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f1c3 0207 	rsb	r2, r3, #7
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	6959      	ldr	r1, [r3, #20]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4a22      	ldr	r2, [pc, #136]	; (8006cd0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006c48:	4413      	add	r3, r2
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	d101      	bne.n	8006c52 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006c52:	2300      	movs	r3, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d034      	beq.n	8006cc2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fadd 	bl	800521c <uxListRemove>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d115      	bne.n	8006c94 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6c:	4918      	ldr	r1, [pc, #96]	; (8006cd0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	440b      	add	r3, r1
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10a      	bne.n	8006c94 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	2201      	movs	r2, #1
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	43da      	mvns	r2, r3
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	4a10      	ldr	r2, [pc, #64]	; (8006cd4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006c92:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	2201      	movs	r2, #1
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	4a0c      	ldr	r2, [pc, #48]	; (8006cd4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4a07      	ldr	r2, [pc, #28]	; (8006cd0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006cb4:	441a      	add	r2, r3
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	f7fe fa50 	bl	8005162 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cc2:	bf00      	nop
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000284 	.word	0x20000284
 8006cd0:	20000288 	.word	0x20000288
 8006cd4:	2000038c 	.word	0x2000038c

08006cd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006cdc:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <pvTaskIncrementMutexHeldCount+0x24>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <pvTaskIncrementMutexHeldCount+0x24>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cea:	3201      	adds	r2, #1
 8006cec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006cee:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <pvTaskIncrementMutexHeldCount+0x24>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
	}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20000284 	.word	0x20000284

08006d00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d0a:	4b29      	ldr	r3, [pc, #164]	; (8006db0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d10:	4b28      	ldr	r3, [pc, #160]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3304      	adds	r3, #4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fa80 	bl	800521c <uxListRemove>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006d22:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	2201      	movs	r2, #1
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43da      	mvns	r2, r3
 8006d30:	4b21      	ldr	r3, [pc, #132]	; (8006db8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4013      	ands	r3, r2
 8006d36:	4a20      	ldr	r2, [pc, #128]	; (8006db8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d10a      	bne.n	8006d58 <prvAddCurrentTaskToDelayedList+0x58>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d48:	4b1a      	ldr	r3, [pc, #104]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4619      	mov	r1, r3
 8006d50:	481a      	ldr	r0, [pc, #104]	; (8006dbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d52:	f7fe fa06 	bl	8005162 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d56:	e026      	b.n	8006da6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d60:	4b14      	ldr	r3, [pc, #80]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d209      	bcs.n	8006d84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d70:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	f7fe fa14 	bl	80051aa <vListInsert>
}
 8006d82:	e010      	b.n	8006da6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f7fe fa0a 	bl	80051aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d96:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d202      	bcs.n	8006da6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006da0:	4a09      	ldr	r2, [pc, #36]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6013      	str	r3, [r2, #0]
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000388 	.word	0x20000388
 8006db4:	20000284 	.word	0x20000284
 8006db8:	2000038c 	.word	0x2000038c
 8006dbc:	20000370 	.word	0x20000370
 8006dc0:	20000340 	.word	0x20000340
 8006dc4:	2000033c 	.word	0x2000033c
 8006dc8:	200003a4 	.word	0x200003a4

08006dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3b04      	subs	r3, #4
 8006ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3b04      	subs	r3, #4
 8006dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f023 0201 	bic.w	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3b04      	subs	r3, #4
 8006dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dfc:	4a0c      	ldr	r2, [pc, #48]	; (8006e30 <pxPortInitialiseStack+0x64>)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3b14      	subs	r3, #20
 8006e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3b04      	subs	r3, #4
 8006e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f06f 0202 	mvn.w	r2, #2
 8006e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3b20      	subs	r3, #32
 8006e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e22:	68fb      	ldr	r3, [r7, #12]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	08006e35 	.word	0x08006e35

08006e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e3e:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <prvTaskExitError+0x50>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d009      	beq.n	8006e5c <prvTaskExitError+0x28>
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e7fe      	b.n	8006e5a <prvTaskExitError+0x26>
 8006e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e6e:	bf00      	nop
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0fc      	beq.n	8006e70 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20000010 	.word	0x20000010
	...

08006e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <pxCurrentTCBConst2>)
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	f380 8809 	msr	PSP, r0
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	4770      	bx	lr
 8006eac:	f3af 8000 	nop.w

08006eb0 <pxCurrentTCBConst2>:
 8006eb0:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006eb8:	4808      	ldr	r0, [pc, #32]	; (8006edc <prvPortStartFirstTask+0x24>)
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	6800      	ldr	r0, [r0, #0]
 8006ebe:	f380 8808 	msr	MSP, r0
 8006ec2:	f04f 0000 	mov.w	r0, #0
 8006ec6:	f380 8814 	msr	CONTROL, r0
 8006eca:	b662      	cpsie	i
 8006ecc:	b661      	cpsie	f
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	df00      	svc	0
 8006ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eda:	bf00      	nop
 8006edc:	e000ed08 	.word	0xe000ed08

08006ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ee6:	4b44      	ldr	r3, [pc, #272]	; (8006ff8 <xPortStartScheduler+0x118>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a44      	ldr	r2, [pc, #272]	; (8006ffc <xPortStartScheduler+0x11c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d109      	bne.n	8006f04 <xPortStartScheduler+0x24>
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	e7fe      	b.n	8006f02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f04:	4b3c      	ldr	r3, [pc, #240]	; (8006ff8 <xPortStartScheduler+0x118>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a3d      	ldr	r2, [pc, #244]	; (8007000 <xPortStartScheduler+0x120>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d109      	bne.n	8006f22 <xPortStartScheduler+0x42>
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e7fe      	b.n	8006f20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f22:	4b38      	ldr	r3, [pc, #224]	; (8007004 <xPortStartScheduler+0x124>)
 8006f24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	22ff      	movs	r2, #255	; 0xff
 8006f32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	4b30      	ldr	r3, [pc, #192]	; (8007008 <xPortStartScheduler+0x128>)
 8006f48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f4a:	4b30      	ldr	r3, [pc, #192]	; (800700c <xPortStartScheduler+0x12c>)
 8006f4c:	2207      	movs	r2, #7
 8006f4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f50:	e009      	b.n	8006f66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006f52:	4b2e      	ldr	r3, [pc, #184]	; (800700c <xPortStartScheduler+0x12c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	4a2c      	ldr	r2, [pc, #176]	; (800700c <xPortStartScheduler+0x12c>)
 8006f5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6e:	2b80      	cmp	r3, #128	; 0x80
 8006f70:	d0ef      	beq.n	8006f52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f72:	4b26      	ldr	r3, [pc, #152]	; (800700c <xPortStartScheduler+0x12c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1c3 0307 	rsb	r3, r3, #7
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d009      	beq.n	8006f92 <xPortStartScheduler+0xb2>
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60bb      	str	r3, [r7, #8]
 8006f90:	e7fe      	b.n	8006f90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f92:	4b1e      	ldr	r3, [pc, #120]	; (800700c <xPortStartScheduler+0x12c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	021b      	lsls	r3, r3, #8
 8006f98:	4a1c      	ldr	r2, [pc, #112]	; (800700c <xPortStartScheduler+0x12c>)
 8006f9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f9c:	4b1b      	ldr	r3, [pc, #108]	; (800700c <xPortStartScheduler+0x12c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fa4:	4a19      	ldr	r2, [pc, #100]	; (800700c <xPortStartScheduler+0x12c>)
 8006fa6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fb0:	4b17      	ldr	r3, [pc, #92]	; (8007010 <xPortStartScheduler+0x130>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a16      	ldr	r2, [pc, #88]	; (8007010 <xPortStartScheduler+0x130>)
 8006fb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fbc:	4b14      	ldr	r3, [pc, #80]	; (8007010 <xPortStartScheduler+0x130>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a13      	ldr	r2, [pc, #76]	; (8007010 <xPortStartScheduler+0x130>)
 8006fc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fc8:	f000 f8d6 	bl	8007178 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fcc:	4b11      	ldr	r3, [pc, #68]	; (8007014 <xPortStartScheduler+0x134>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fd2:	f000 f8f5 	bl	80071c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <xPortStartScheduler+0x138>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a0f      	ldr	r2, [pc, #60]	; (8007018 <xPortStartScheduler+0x138>)
 8006fdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fe0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fe2:	f7ff ff69 	bl	8006eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fe6:	f7ff fa77 	bl	80064d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006fea:	f7ff ff23 	bl	8006e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	e000ed00 	.word	0xe000ed00
 8006ffc:	410fc271 	.word	0x410fc271
 8007000:	410fc270 	.word	0x410fc270
 8007004:	e000e400 	.word	0xe000e400
 8007008:	200003b0 	.word	0x200003b0
 800700c:	200003b4 	.word	0x200003b4
 8007010:	e000ed20 	.word	0xe000ed20
 8007014:	20000010 	.word	0x20000010
 8007018:	e000ef34 	.word	0xe000ef34

0800701c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007034:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <vPortEnterCritical+0x54>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3301      	adds	r3, #1
 800703a:	4a0d      	ldr	r2, [pc, #52]	; (8007070 <vPortEnterCritical+0x54>)
 800703c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <vPortEnterCritical+0x54>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d10e      	bne.n	8007064 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <vPortEnterCritical+0x58>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d009      	beq.n	8007064 <vPortEnterCritical+0x48>
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	603b      	str	r3, [r7, #0]
 8007062:	e7fe      	b.n	8007062 <vPortEnterCritical+0x46>
	}
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	20000010 	.word	0x20000010
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800707e:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <vPortExitCritical+0x4c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <vPortExitCritical+0x22>
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	607b      	str	r3, [r7, #4]
 8007098:	e7fe      	b.n	8007098 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <vPortExitCritical+0x4c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3b01      	subs	r3, #1
 80070a0:	4a08      	ldr	r2, [pc, #32]	; (80070c4 <vPortExitCritical+0x4c>)
 80070a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070a4:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <vPortExitCritical+0x4c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <vPortExitCritical+0x3e>
 80070ac:	2300      	movs	r3, #0
 80070ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000010 	.word	0x20000010
	...

080070d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070d0:	f3ef 8009 	mrs	r0, PSP
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	4b15      	ldr	r3, [pc, #84]	; (8007130 <pxCurrentTCBConst>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	f01e 0f10 	tst.w	lr, #16
 80070e0:	bf08      	it	eq
 80070e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ea:	6010      	str	r0, [r2, #0]
 80070ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070f4:	f380 8811 	msr	BASEPRI, r0
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f7ff f9ea 	bl	80064d8 <vTaskSwitchContext>
 8007104:	f04f 0000 	mov.w	r0, #0
 8007108:	f380 8811 	msr	BASEPRI, r0
 800710c:	bc09      	pop	{r0, r3}
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	6808      	ldr	r0, [r1, #0]
 8007112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007116:	f01e 0f10 	tst.w	lr, #16
 800711a:	bf08      	it	eq
 800711c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007120:	f380 8809 	msr	PSP, r0
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	f3af 8000 	nop.w

08007130 <pxCurrentTCBConst>:
 8007130:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop

08007138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007150:	f7ff f906 	bl	8006360 <xTaskIncrementTick>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <SysTick_Handler+0x3c>)
 800715c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	e000ed04 	.word	0xe000ed04

08007178 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <vPortSetupTimerInterrupt+0x34>)
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007182:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <vPortSetupTimerInterrupt+0x38>)
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007188:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <vPortSetupTimerInterrupt+0x3c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <vPortSetupTimerInterrupt+0x40>)
 800718e:	fba2 2303 	umull	r2, r3, r2, r3
 8007192:	099b      	lsrs	r3, r3, #6
 8007194:	4a09      	ldr	r2, [pc, #36]	; (80071bc <vPortSetupTimerInterrupt+0x44>)
 8007196:	3b01      	subs	r3, #1
 8007198:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800719a:	4b04      	ldr	r3, [pc, #16]	; (80071ac <vPortSetupTimerInterrupt+0x34>)
 800719c:	2207      	movs	r2, #7
 800719e:	601a      	str	r2, [r3, #0]
}
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	e000e010 	.word	0xe000e010
 80071b0:	e000e018 	.word	0xe000e018
 80071b4:	20000004 	.word	0x20000004
 80071b8:	10624dd3 	.word	0x10624dd3
 80071bc:	e000e014 	.word	0xe000e014

080071c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071d0 <vPortEnableVFP+0x10>
 80071c4:	6801      	ldr	r1, [r0, #0]
 80071c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071ca:	6001      	str	r1, [r0, #0]
 80071cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071ce:	bf00      	nop
 80071d0:	e000ed88 	.word	0xe000ed88

080071d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071da:	f3ef 8305 	mrs	r3, IPSR
 80071de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b0f      	cmp	r3, #15
 80071e4:	d913      	bls.n	800720e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071e6:	4a16      	ldr	r2, [pc, #88]	; (8007240 <vPortValidateInterruptPriority+0x6c>)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071f0:	4b14      	ldr	r3, [pc, #80]	; (8007244 <vPortValidateInterruptPriority+0x70>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	7afa      	ldrb	r2, [r7, #11]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d209      	bcs.n	800720e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	e7fe      	b.n	800720c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800720e:	4b0e      	ldr	r3, [pc, #56]	; (8007248 <vPortValidateInterruptPriority+0x74>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <vPortValidateInterruptPriority+0x78>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d909      	bls.n	8007232 <vPortValidateInterruptPriority+0x5e>
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	e7fe      	b.n	8007230 <vPortValidateInterruptPriority+0x5c>
	}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	e000e3f0 	.word	0xe000e3f0
 8007244:	200003b0 	.word	0x200003b0
 8007248:	e000ed0c 	.word	0xe000ed0c
 800724c:	200003b4 	.word	0x200003b4

08007250 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007258:	2300      	movs	r3, #0
 800725a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800725c:	f7fe ffd6 	bl	800620c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007260:	4b57      	ldr	r3, [pc, #348]	; (80073c0 <pvPortMalloc+0x170>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007268:	f000 f90c 	bl	8007484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800726c:	4b55      	ldr	r3, [pc, #340]	; (80073c4 <pvPortMalloc+0x174>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4013      	ands	r3, r2
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 808c 	bne.w	8007392 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01c      	beq.n	80072ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007280:	2208      	movs	r2, #8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4413      	add	r3, r2
 8007286:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	2b00      	cmp	r3, #0
 8007290:	d013      	beq.n	80072ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f023 0307 	bic.w	r3, r3, #7
 8007298:	3308      	adds	r3, #8
 800729a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d009      	beq.n	80072ba <pvPortMalloc+0x6a>
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	e7fe      	b.n	80072b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d068      	beq.n	8007392 <pvPortMalloc+0x142>
 80072c0:	4b41      	ldr	r3, [pc, #260]	; (80073c8 <pvPortMalloc+0x178>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d863      	bhi.n	8007392 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072ca:	4b40      	ldr	r3, [pc, #256]	; (80073cc <pvPortMalloc+0x17c>)
 80072cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072ce:	4b3f      	ldr	r3, [pc, #252]	; (80073cc <pvPortMalloc+0x17c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072d4:	e004      	b.n	80072e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d903      	bls.n	80072f2 <pvPortMalloc+0xa2>
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f1      	bne.n	80072d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072f2:	4b33      	ldr	r3, [pc, #204]	; (80073c0 <pvPortMalloc+0x170>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d04a      	beq.n	8007392 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2208      	movs	r2, #8
 8007302:	4413      	add	r3, r2
 8007304:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	1ad2      	subs	r2, r2, r3
 8007316:	2308      	movs	r3, #8
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	429a      	cmp	r2, r3
 800731c:	d91e      	bls.n	800735c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800731e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4413      	add	r3, r2
 8007324:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <pvPortMalloc+0xf4>
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	e7fe      	b.n	8007342 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007356:	69b8      	ldr	r0, [r7, #24]
 8007358:	f000 f8f6 	bl	8007548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800735c:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <pvPortMalloc+0x178>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	4a18      	ldr	r2, [pc, #96]	; (80073c8 <pvPortMalloc+0x178>)
 8007368:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800736a:	4b17      	ldr	r3, [pc, #92]	; (80073c8 <pvPortMalloc+0x178>)
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4b18      	ldr	r3, [pc, #96]	; (80073d0 <pvPortMalloc+0x180>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d203      	bcs.n	800737e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <pvPortMalloc+0x178>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <pvPortMalloc+0x180>)
 800737c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	4b10      	ldr	r3, [pc, #64]	; (80073c4 <pvPortMalloc+0x174>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	431a      	orrs	r2, r3
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007392:	f7fe ff49 	bl	8006228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	2b00      	cmp	r3, #0
 800739e:	d009      	beq.n	80073b4 <pvPortMalloc+0x164>
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	e7fe      	b.n	80073b2 <pvPortMalloc+0x162>
	return pvReturn;
 80073b4:	69fb      	ldr	r3, [r7, #28]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3728      	adds	r7, #40	; 0x28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20003fc0 	.word	0x20003fc0
 80073c4:	20003fcc 	.word	0x20003fcc
 80073c8:	20003fc4 	.word	0x20003fc4
 80073cc:	20003fb8 	.word	0x20003fb8
 80073d0:	20003fc8 	.word	0x20003fc8

080073d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d046      	beq.n	8007474 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073e6:	2308      	movs	r3, #8
 80073e8:	425b      	negs	r3, r3
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	4413      	add	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	4b20      	ldr	r3, [pc, #128]	; (800747c <vPortFree+0xa8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4013      	ands	r3, r2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <vPortFree+0x42>
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e7fe      	b.n	8007414 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <vPortFree+0x5e>
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	60bb      	str	r3, [r7, #8]
 8007430:	e7fe      	b.n	8007430 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <vPortFree+0xa8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4013      	ands	r3, r2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d019      	beq.n	8007474 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d115      	bne.n	8007474 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	4b0b      	ldr	r3, [pc, #44]	; (800747c <vPortFree+0xa8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	43db      	mvns	r3, r3
 8007452:	401a      	ands	r2, r3
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007458:	f7fe fed8 	bl	800620c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4b07      	ldr	r3, [pc, #28]	; (8007480 <vPortFree+0xac>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4413      	add	r3, r2
 8007466:	4a06      	ldr	r2, [pc, #24]	; (8007480 <vPortFree+0xac>)
 8007468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800746a:	6938      	ldr	r0, [r7, #16]
 800746c:	f000 f86c 	bl	8007548 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007470:	f7fe feda 	bl	8006228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007474:	bf00      	nop
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20003fcc 	.word	0x20003fcc
 8007480:	20003fc4 	.word	0x20003fc4

08007484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800748a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800748e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007490:	4b27      	ldr	r3, [pc, #156]	; (8007530 <prvHeapInit+0xac>)
 8007492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00c      	beq.n	80074b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3307      	adds	r3, #7
 80074a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0307 	bic.w	r3, r3, #7
 80074aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	4a1f      	ldr	r2, [pc, #124]	; (8007530 <prvHeapInit+0xac>)
 80074b4:	4413      	add	r3, r2
 80074b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074bc:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <prvHeapInit+0xb0>)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074c2:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <prvHeapInit+0xb0>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	4413      	add	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074d0:	2208      	movs	r2, #8
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	1a9b      	subs	r3, r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0307 	bic.w	r3, r3, #7
 80074de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4a15      	ldr	r2, [pc, #84]	; (8007538 <prvHeapInit+0xb4>)
 80074e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074e6:	4b14      	ldr	r3, [pc, #80]	; (8007538 <prvHeapInit+0xb4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2200      	movs	r2, #0
 80074ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074ee:	4b12      	ldr	r3, [pc, #72]	; (8007538 <prvHeapInit+0xb4>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007504:	4b0c      	ldr	r3, [pc, #48]	; (8007538 <prvHeapInit+0xb4>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	4a0a      	ldr	r2, [pc, #40]	; (800753c <prvHeapInit+0xb8>)
 8007512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	4a09      	ldr	r2, [pc, #36]	; (8007540 <prvHeapInit+0xbc>)
 800751a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800751c:	4b09      	ldr	r3, [pc, #36]	; (8007544 <prvHeapInit+0xc0>)
 800751e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007522:	601a      	str	r2, [r3, #0]
}
 8007524:	bf00      	nop
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	200003b8 	.word	0x200003b8
 8007534:	20003fb8 	.word	0x20003fb8
 8007538:	20003fc0 	.word	0x20003fc0
 800753c:	20003fc8 	.word	0x20003fc8
 8007540:	20003fc4 	.word	0x20003fc4
 8007544:	20003fcc 	.word	0x20003fcc

08007548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007550:	4b28      	ldr	r3, [pc, #160]	; (80075f4 <prvInsertBlockIntoFreeList+0xac>)
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e002      	b.n	800755c <prvInsertBlockIntoFreeList+0x14>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	429a      	cmp	r2, r3
 8007564:	d8f7      	bhi.n	8007556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4413      	add	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	429a      	cmp	r2, r3
 8007576:	d108      	bne.n	800758a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	441a      	add	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	441a      	add	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d118      	bne.n	80075d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <prvInsertBlockIntoFreeList+0xb0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d00d      	beq.n	80075c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	441a      	add	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	e008      	b.n	80075d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075c6:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <prvInsertBlockIntoFreeList+0xb0>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e003      	b.n	80075d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d002      	beq.n	80075e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20003fb8 	.word	0x20003fb8
 80075f8:	20003fc0 	.word	0x20003fc0

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	4e0d      	ldr	r6, [pc, #52]	; (8007634 <__libc_init_array+0x38>)
 8007600:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007602:	1ba4      	subs	r4, r4, r6
 8007604:	10a4      	asrs	r4, r4, #2
 8007606:	2500      	movs	r5, #0
 8007608:	42a5      	cmp	r5, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	4e0b      	ldr	r6, [pc, #44]	; (800763c <__libc_init_array+0x40>)
 800760e:	4c0c      	ldr	r4, [pc, #48]	; (8007640 <__libc_init_array+0x44>)
 8007610:	f000 f82c 	bl	800766c <_init>
 8007614:	1ba4      	subs	r4, r4, r6
 8007616:	10a4      	asrs	r4, r4, #2
 8007618:	2500      	movs	r5, #0
 800761a:	42a5      	cmp	r5, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007624:	4798      	blx	r3
 8007626:	3501      	adds	r5, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800762e:	4798      	blx	r3
 8007630:	3501      	adds	r5, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	0800772c 	.word	0x0800772c
 8007638:	0800772c 	.word	0x0800772c
 800763c:	0800772c 	.word	0x0800772c
 8007640:	08007730 	.word	0x08007730

08007644 <memcpy>:
 8007644:	b510      	push	{r4, lr}
 8007646:	1e43      	subs	r3, r0, #1
 8007648:	440a      	add	r2, r1
 800764a:	4291      	cmp	r1, r2
 800764c:	d100      	bne.n	8007650 <memcpy+0xc>
 800764e:	bd10      	pop	{r4, pc}
 8007650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007654:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007658:	e7f7      	b.n	800764a <memcpy+0x6>

0800765a <memset>:
 800765a:	4402      	add	r2, r0
 800765c:	4603      	mov	r3, r0
 800765e:	4293      	cmp	r3, r2
 8007660:	d100      	bne.n	8007664 <memset+0xa>
 8007662:	4770      	bx	lr
 8007664:	f803 1b01 	strb.w	r1, [r3], #1
 8007668:	e7f9      	b.n	800765e <memset+0x4>
	...

0800766c <_init>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr

08007678 <_fini>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr
