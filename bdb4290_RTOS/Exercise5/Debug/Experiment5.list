
Experiment5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006110  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080062b0  080062b0  000162b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006324  08006324  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800632c  0800632c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800632c  0800632c  0001632c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004408  20000014  08006348  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000441c  08006348  0002441c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c75  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003456  00000000  00000000  00038cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001718  00000000  00000000  0003c110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  0003d828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018839  00000000  00000000  0003edd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011906  00000000  00000000  00057611  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000994c8  00000000  00000000  00068f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001023df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006220  00000000  00000000  0010245c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006298 	.word	0x08006298

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08006298 	.word	0x08006298

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000030 	.word	0x20000030
 8000510:	20000084 	.word	0x20000084

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08e      	sub	sp, #56	; 0x38
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fda5 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f83b 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9a1 	bl	8000868 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8bb 	bl	80006a0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f8e7 	bl	80006fc <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f913 	bl	8000758 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f941 	bl	80007b8 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000536:	f000 f975 	bl	8000824 <MX_USB_OTG_FS_HCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GreenLEDTask */
  osThreadDef(GreenLEDTask, StartGreenLED, osPriorityNormal, 0, 128);
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <main+0x74>)
 800053c:	f107 041c 	add.w	r4, r7, #28
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenLEDTaskHandle = osThreadCreate(osThread(GreenLEDTask), NULL);
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f004 fc6f 	bl	8004e38 <osThreadCreate>
 800055a:	4602      	mov	r2, r0
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <main+0x78>)
 800055e:	601a      	str	r2, [r3, #0]

  /* definition and creation of RedLEDTask */
  osThreadDef(RedLEDTask, StartRedLED, osPriorityAboveNormal, 0, 128);
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <main+0x7c>)
 8000562:	463c      	mov	r4, r7
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RedLEDTaskHandle = osThreadCreate(osThread(RedLEDTask), NULL);
 8000572:	463b      	mov	r3, r7
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fc5e 	bl	8004e38 <osThreadCreate>
 800057c:	4602      	mov	r2, r0
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <main+0x80>)
 8000580:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000582:	f004 fc52 	bl	8004e2a <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000586:	e7fe      	b.n	8000586 <main+0x72>
 8000588:	080062c0 	.word	0x080062c0
 800058c:	20004028 	.word	0x20004028
 8000590:	080062e8 	.word	0x080062e8
 8000594:	20004024 	.word	0x20004024

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 fe6e 	bl	8006288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b31      	ldr	r3, [pc, #196]	; (8000698 <SystemClock_Config+0x100>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	4a30      	ldr	r2, [pc, #192]	; (8000698 <SystemClock_Config+0x100>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	6413      	str	r3, [r2, #64]	; 0x40
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <SystemClock_Config+0x100>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemClock_Config+0x104>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemClock_Config+0x104>)
 80005f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0x104>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000614:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000618:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061a:	2304      	movs	r3, #4
 800061c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800061e:	23c0      	movs	r3, #192	; 0xc0
 8000620:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000622:	2304      	movs	r3, #4
 8000624:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000626:	2308      	movs	r3, #8
 8000628:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800062e:	4618      	mov	r0, r3
 8000630:	f002 ffde 	bl	80035f0 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800063a:	f000 fa5b 	bl	8000af4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000658:	2103      	movs	r1, #3
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fa38 	bl	8003ad0 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000666:	f000 fa45 	bl	8000af4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800066a:	2301      	movs	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800066e:	23c8      	movs	r3, #200	; 0xc8
 8000670:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000672:	2305      	movs	r3, #5
 8000674:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fc4a 	bl	8003f18 <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800068a:	f000 fa33 	bl	8000af4 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3768      	adds	r7, #104	; 0x68
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f002 f9af 	bl	8002a40 <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 fa04 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20003fd0 	.word	0x20003fd0
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2S2_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2S2_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2S2_Init+0x50>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2S2_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_I2S2_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2S2_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2S2_Init+0x50>)
 8000722:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <MX_I2S2_Init+0x58>)
 8000724:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2S2_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2S2_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2S2_Init+0x50>)
 8000734:	2201      	movs	r2, #1
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2S2_Init+0x50>)
 800073a:	f002 fab9 	bl	8002cb0 <HAL_I2S_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f9d6 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20004348 	.word	0x20004348
 8000750:	40003800 	.word	0x40003800
 8000754:	00017700 	.word	0x00017700

08000758 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_I2S3_Init+0x54>)
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <MX_I2S3_Init+0x58>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2S3_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_I2S3_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_I2S3_Init+0x54>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_I2S3_Init+0x54>)
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <MX_I2S3_Init+0x5c>)
 8000782:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_I2S3_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_I2S3_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_I2S3_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_I2S3_Init+0x54>)
 8000798:	f002 fa8a 	bl	8002cb0 <HAL_I2S_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007a2:	f000 f9a7 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20004390 	.word	0x20004390
 80007b0:	40003c00 	.word	0x40003c00
 80007b4:	00017700 	.word	0x00017700

080007b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_SPI1_Init+0x64>)
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_SPI1_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_SPI1_Init+0x64>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI1_Init+0x64>)
 8000804:	220a      	movs	r2, #10
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_SPI1_Init+0x64>)
 800080a:	f003 fcd3 	bl	80041b4 <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 f96e 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000402c 	.word	0x2000402c
 8000820:	40013000 	.word	0x40013000

08000824 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800082a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000832:	2208      	movs	r2, #8
 8000834:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000844:	2202      	movs	r2, #2
 8000846:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000850:	f000 ff06 	bl	8001660 <HAL_HCD_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 800085a:	f000 f94b 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20004084 	.word	0x20004084

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	4b60      	ldr	r3, [pc, #384]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a5f      	ldr	r2, [pc, #380]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b5d      	ldr	r3, [pc, #372]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4b59      	ldr	r3, [pc, #356]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b56      	ldr	r3, [pc, #344]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a51      	ldr	r2, [pc, #324]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b4f      	ldr	r3, [pc, #316]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a4a      	ldr	r2, [pc, #296]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a43      	ldr	r2, [pc, #268]	; (8000a04 <MX_GPIO_Init+0x19c>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a3c      	ldr	r2, [pc, #240]	; (8000a04 <MX_GPIO_Init+0x19c>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <MX_GPIO_Init+0x19c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2108      	movs	r1, #8
 800092a:	4837      	ldr	r0, [pc, #220]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 800092c:	f000 fe64 	bl	80015f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2101      	movs	r1, #1
 8000934:	4835      	ldr	r0, [pc, #212]	; (8000a0c <MX_GPIO_Init+0x1a4>)
 8000936:	f000 fe5f 	bl	80015f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800093a:	2200      	movs	r2, #0
 800093c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000940:	4833      	ldr	r0, [pc, #204]	; (8000a10 <MX_GPIO_Init+0x1a8>)
 8000942:	f000 fe59 	bl	80015f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000946:	2304      	movs	r3, #4
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	482b      	ldr	r0, [pc, #172]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 800095a:	f000 fccb 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800095e:	2308      	movs	r3, #8
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4824      	ldr	r0, [pc, #144]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000976:	f000 fcbd 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800097a:	2332      	movs	r3, #50	; 0x32
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <MX_GPIO_Init+0x1ac>)
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	481e      	ldr	r0, [pc, #120]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 800098e:	f000 fcb1 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4818      	ldr	r0, [pc, #96]	; (8000a0c <MX_GPIO_Init+0x1a4>)
 80009aa:	f000 fca3 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_GPIO_Init+0x1ac>)
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4815      	ldr	r0, [pc, #84]	; (8000a18 <MX_GPIO_Init+0x1b0>)
 80009c2:	f000 fc97 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80009c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_GPIO_Init+0x1a8>)
 80009e0:	f000 fc88 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e4:	2320      	movs	r3, #32
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <MX_GPIO_Init+0x1a8>)
 80009f8:	f000 fc7c 	bl	80012f4 <HAL_GPIO_Init>

}
 80009fc:	bf00      	nop
 80009fe:	3730      	adds	r7, #48	; 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	10120000 	.word	0x10120000
 8000a18:	40020000 	.word	0x40020000

08000a1c <Access_Function>:

/* USER CODE BEGIN 4 */
int Start_Flag = 1;
void Access_Function()
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	if (Start_Flag == 1)
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <Access_Function+0x44>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d103      	bne.n	8000a32 <Access_Function+0x16>
	{
		Start_Flag = 0;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <Access_Function+0x44>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	e004      	b.n	8000a3c <Access_Function+0x20>
	}
	else
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);//Toggle Blue LED @ every resource contention
 8000a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <Access_Function+0x48>)
 8000a38:	f000 fdf7 	bl	800162a <HAL_GPIO_TogglePin>
	}
	for(int i = 0; i < 2000000; ++i); // ~ 0.5 second delay
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	e002      	b.n	8000a48 <Access_Function+0x2c>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3301      	adds	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <Access_Function+0x4c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	ddf8      	ble.n	8000a42 <Access_Function+0x26>
	Start_Flag = 1;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <Access_Function+0x44>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
	return;
 8000a56:	bf00      	nop
}
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000000 	.word	0x20000000
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	001e847f 	.word	0x001e847f

08000a6c <StartGreenLED>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartGreenLED */
void StartGreenLED(void const * argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // turn on green LED
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7a:	4808      	ldr	r0, [pc, #32]	; (8000a9c <StartGreenLED+0x30>)
 8000a7c:	f000 fdbc 	bl	80015f8 <HAL_GPIO_WritePin>
    Access_Function(); //
 8000a80:	f7ff ffcc 	bl	8000a1c <Access_Function>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); //turn off green LED
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8a:	4804      	ldr	r0, [pc, #16]	; (8000a9c <StartGreenLED+0x30>)
 8000a8c:	f000 fdb4 	bl	80015f8 <HAL_GPIO_WritePin>
    osDelay(500);// 500mS Delay
 8000a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a94:	f004 fa1c 	bl	8004ed0 <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // turn on green LED
 8000a98:	e7ec      	b.n	8000a74 <StartGreenLED+0x8>
 8000a9a:	bf00      	nop
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <StartRedLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedLED */
void StartRedLED(void const * argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRedLED */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET); //Turn On Red LED
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <StartRedLED+0x2c>)
 8000ab0:	f000 fda2 	bl	80015f8 <HAL_GPIO_WritePin>
	Access_Function();
 8000ab4:	f7ff ffb2 	bl	8000a1c <Access_Function>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET); //Turn Off Red LED
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <StartRedLED+0x2c>)
 8000ac0:	f000 fd9a 	bl	80015f8 <HAL_GPIO_WritePin>
    osDelay(100);// ~ 0.1 second Delay
 8000ac4:	2064      	movs	r0, #100	; 0x64
 8000ac6:	f004 fa03 	bl	8004ed0 <osDelay>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET); //Turn On Red LED
 8000aca:	e7ed      	b.n	8000aa8 <StartRedLED+0x8>
 8000acc:	40020c00 	.word	0x40020c00

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 fae3 	bl	80010ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40010000 	.word	0x40010000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_MspInit+0x54>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_MspInit+0x54>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_MspInit+0x54>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_MspInit+0x54>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_MspInit+0x54>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_MspInit+0x54>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	210f      	movs	r1, #15
 8000b46:	f06f 0001 	mvn.w	r0, #1
 8000b4a:	f000 fba9 	bl	80012a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_I2C_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12c      	bne.n	8000bd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bac:	2304      	movs	r3, #4
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <HAL_I2C_MspInit+0x8c>)
 8000bb8:	f000 fb9c 	bl	80012f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000bc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bca:	6413      	str	r3, [r2, #64]	; 0x40
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40005400 	.word	0x40005400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020400 	.word	0x40020400

08000bec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	; 0x38
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a59      	ldr	r2, [pc, #356]	; (8000d70 <HAL_I2S_MspInit+0x184>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d15b      	bne.n	8000cc6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
 8000c12:	4b58      	ldr	r3, [pc, #352]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a57      	ldr	r2, [pc, #348]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	4b51      	ldr	r3, [pc, #324]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a50      	ldr	r2, [pc, #320]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b4e      	ldr	r3, [pc, #312]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	61fb      	str	r3, [r7, #28]
 8000c44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a49      	ldr	r2, [pc, #292]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c62:	2304      	movs	r3, #4
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c72:	2306      	movs	r3, #6
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	483e      	ldr	r0, [pc, #248]	; (8000d78 <HAL_I2S_MspInit+0x18c>)
 8000c7e:	f000 fb39 	bl	80012f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c82:	2308      	movs	r3, #8
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c92:	2305      	movs	r3, #5
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4836      	ldr	r0, [pc, #216]	; (8000d78 <HAL_I2S_MspInit+0x18c>)
 8000c9e:	f000 fb29 	bl	80012f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ca2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	482f      	ldr	r0, [pc, #188]	; (8000d7c <HAL_I2S_MspInit+0x190>)
 8000cc0:	f000 fb18 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cc4:	e04f      	b.n	8000d66 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a2d      	ldr	r2, [pc, #180]	; (8000d80 <HAL_I2S_MspInit+0x194>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d14a      	bne.n	8000d66 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_I2S_MspInit+0x188>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d24:	2310      	movs	r3, #16
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d34:	2306      	movs	r3, #6
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4811      	ldr	r0, [pc, #68]	; (8000d84 <HAL_I2S_MspInit+0x198>)
 8000d40:	f000 fad8 	bl	80012f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d44:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d56:	2306      	movs	r3, #6
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_I2S_MspInit+0x18c>)
 8000d62:	f000 fac7 	bl	80012f4 <HAL_GPIO_Init>
}
 8000d66:	bf00      	nop
 8000d68:	3738      	adds	r7, #56	; 0x38
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40003800 	.word	0x40003800
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40003c00 	.word	0x40003c00
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_SPI_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12b      	bne.n	8000e02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000de2:	23e0      	movs	r3, #224	; 0xe0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df2:	2305      	movs	r3, #5
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_SPI_MspInit+0x8c>)
 8000dfe:	f000 fa79 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40013000 	.word	0x40013000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e38:	d147      	bne.n	8000eca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <HAL_HCD_MspInit+0xbc>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <HAL_HCD_MspInit+0xbc>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_HCD_MspInit+0xbc>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481b      	ldr	r0, [pc, #108]	; (8000ed8 <HAL_HCD_MspInit+0xc0>)
 8000e6c:	f000 fa42 	bl	80012f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e70:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e82:	230a      	movs	r3, #10
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <HAL_HCD_MspInit+0xc0>)
 8000e8e:	f000 fa31 	bl	80012f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_HCD_MspInit+0xbc>)
 8000e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_HCD_MspInit+0xbc>)
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_HCD_MspInit+0xbc>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_HCD_MspInit+0xbc>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_HCD_MspInit+0xbc>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	2043      	movs	r0, #67	; 0x43
 8000ec0:	f000 f9ee 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000ec4:	2043      	movs	r0, #67	; 0x43
 8000ec6:	f000 fa07 	bl	80012d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000

08000edc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	2019      	movs	r0, #25
 8000ef2:	f000 f9d5 	bl	80012a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000ef6:	2019      	movs	r0, #25
 8000ef8:	f000 f9ee 	bl	80012d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_InitTick+0xa0>)
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_InitTick+0xa0>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_InitTick+0xa0>)
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f18:	f107 0210 	add.w	r2, r7, #16
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 ffc6 	bl	8003eb4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f28:	f002 ffb0 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 8000f2c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f30:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <HAL_InitTick+0xa4>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0c9b      	lsrs	r3, r3, #18
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_InitTick+0xa8>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <HAL_InitTick+0xac>)
 8000f40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_InitTick+0xa8>)
 8000f44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_InitTick+0xa8>)
 8000f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_InitTick+0xa8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_InitTick+0xa8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <HAL_InitTick+0xa8>)
 8000f5e:	f003 f98d 	bl	800427c <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <HAL_InitTick+0xa8>)
 8000f6a:	f003 f9bc 	bl	80042e6 <HAL_TIM_Base_Start_IT>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3730      	adds	r7, #48	; 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	431bde83 	.word	0x431bde83
 8000f84:	200043d8 	.word	0x200043d8
 8000f88:	40010000 	.word	0x40010000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fc6:	f003 f9b2 	bl	800432e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200043d8 	.word	0x200043d8

08000fd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <OTG_FS_IRQHandler+0x10>)
 8000fda:	f000 fba3 	bl	8001724 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20004084 	.word	0x20004084

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <SystemInit+0x28>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a07      	ldr	r2, [pc, #28]	; (8001010 <SystemInit+0x28>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SystemInit+0x28>)
 8000ffe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001002:	609a      	str	r2, [r3, #8]
#endif
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001018:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800101a:	e003      	b.n	8001024 <LoopCopyDataInit>

0800101c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800101e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001020:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001022:	3104      	adds	r1, #4

08001024 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001028:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800102a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800102c:	d3f6      	bcc.n	800101c <CopyDataInit>
  ldr  r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001030:	e002      	b.n	8001038 <LoopFillZerobss>

08001032 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001032:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001034:	f842 3b04 	str.w	r3, [r2], #4

08001038 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800103a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800103c:	d3f9      	bcc.n	8001032 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800103e:	f7ff ffd3 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f005 f8fd 	bl	8006240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fa65 	bl	8000514 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001050:	08006334 	.word	0x08006334
  ldr  r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001058:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800105c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001060:	2000441c 	.word	0x2000441c

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f8fa 	bl	800128a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff20 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fd32 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000000c 	.word	0x2000000c
 80010d0:	20004418 	.word	0x20004418

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20004418 	.word	0x20004418

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_Delay+0x40>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000000c 	.word	0x2000000c

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff4c 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b2:	f7ff ff61 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	6978      	ldr	r0, [r7, #20]
 80012be:	f7ff ffb1 	bl	8001224 <NVIC_EncodePriority>
 80012c2:	4602      	mov	r2, r0
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff80 	bl	80011d0 <__NVIC_SetPriority>
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff54 	bl	8001194 <__NVIC_EnableIRQ>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	e159      	b.n	80015c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	429a      	cmp	r2, r3
 800132a:	f040 8148 	bne.w	80015be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d00b      	beq.n	800134e <HAL_GPIO_Init+0x5a>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d007      	beq.n	800134e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001342:	2b11      	cmp	r3, #17
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b12      	cmp	r3, #18
 800134c:	d130      	bne.n	80013b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68da      	ldr	r2, [r3, #12]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	f003 0201 	and.w	r2, r3, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0xfc>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b12      	cmp	r3, #18
 80013ee:	d123      	bne.n	8001438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a2 	beq.w	80015be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b56      	ldr	r3, [pc, #344]	; (80015d8 <HAL_GPIO_Init+0x2e4>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a55      	ldr	r2, [pc, #340]	; (80015d8 <HAL_GPIO_Init+0x2e4>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_GPIO_Init+0x2e4>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001496:	4a51      	ldr	r2, [pc, #324]	; (80015dc <HAL_GPIO_Init+0x2e8>)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a48      	ldr	r2, [pc, #288]	; (80015e0 <HAL_GPIO_Init+0x2ec>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x202>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a47      	ldr	r2, [pc, #284]	; (80015e4 <HAL_GPIO_Init+0x2f0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x1fe>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a46      	ldr	r2, [pc, #280]	; (80015e8 <HAL_GPIO_Init+0x2f4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x1fa>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a45      	ldr	r2, [pc, #276]	; (80015ec <HAL_GPIO_Init+0x2f8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x1f6>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a44      	ldr	r2, [pc, #272]	; (80015f0 <HAL_GPIO_Init+0x2fc>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x1f2>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e008      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014ea:	2303      	movs	r3, #3
 80014ec:	e004      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014f6:	2300      	movs	r3, #0
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	f002 0203 	and.w	r2, r2, #3
 80014fe:	0092      	lsls	r2, r2, #2
 8001500:	4093      	lsls	r3, r2
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001508:	4934      	ldr	r1, [pc, #208]	; (80015dc <HAL_GPIO_Init+0x2e8>)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_GPIO_Init+0x300>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800153a:	4a2e      	ldr	r2, [pc, #184]	; (80015f4 <HAL_GPIO_Init+0x300>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001540:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <HAL_GPIO_Init+0x300>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <HAL_GPIO_Init+0x300>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_GPIO_Init+0x300>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_GPIO_Init+0x300>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_GPIO_Init+0x300>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_GPIO_Init+0x300>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	f67f aea2 	bls.w	8001310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015cc:	bf00      	nop
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40013c00 	.word	0x40013c00

080015f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001608:	787b      	ldrb	r3, [r7, #1]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001614:	e003      	b.n	800161e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001616:	887b      	ldrh	r3, [r7, #2]
 8001618:	041a      	lsls	r2, r3, #16
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	619a      	str	r2, [r3, #24]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	401a      	ands	r2, r3
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	429a      	cmp	r2, r3
 8001642:	d104      	bne.n	800164e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	041a      	lsls	r2, r3, #16
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800164c:	e002      	b.n	8001654 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	b08f      	sub	sp, #60	; 0x3c
 8001664:	af0a      	add	r7, sp, #40	; 0x28
 8001666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e054      	b.n	800171c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d106      	bne.n	8001692 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fbc3 	bl	8000e18 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2203      	movs	r2, #3
 8001696:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 f862 	bl	800477a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	687e      	ldr	r6, [r7, #4]
 80016be:	466d      	mov	r5, sp
 80016c0:	f106 0410 	add.w	r4, r6, #16
 80016c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016d4:	1d33      	adds	r3, r6, #4
 80016d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f002 ffed 	bl	80046b8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2101      	movs	r1, #1
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 f859 	bl	800479c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	687e      	ldr	r6, [r7, #4]
 80016f2:	466d      	mov	r5, sp
 80016f4:	f106 0410 	add.w	r4, r6, #16
 80016f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001704:	e885 0003 	stmia.w	r5, {r0, r1}
 8001708:	1d33      	adds	r3, r6, #4
 800170a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f003 f935 	bl	800497c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001724 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 f8dc 	bl	80048f8 <USB_GetMode>
 8001740:	4603      	mov	r3, r0
 8001742:	2b01      	cmp	r3, #1
 8001744:	f040 80f1 	bne.w	800192a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f8c0 	bl	80048d2 <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80e7 	beq.w	8001928 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f003 f8b7 	bl	80048d2 <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800176e:	d104      	bne.n	800177a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001778:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f003 f8a7 	bl	80048d2 <USB_ReadInterrupts>
 8001784:	4603      	mov	r3, r0
 8001786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800178e:	d104      	bne.n	800179a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001798:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 f897 	bl	80048d2 <USB_ReadInterrupts>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017ae:	d104      	bne.n	80017ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 f887 	bl	80048d2 <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d103      	bne.n	80017d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2202      	movs	r2, #2
 80017d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 f879 	bl	80048d2 <USB_ReadInterrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ea:	d117      	bne.n	800181c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80017fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80017fe:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f8a9 	bl	8001958 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2101      	movs	r1, #1
 800180c:	4618      	mov	r0, r3
 800180e:	f003 f971 	bl	8004af4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800181a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f003 f856 	bl	80048d2 <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d102      	bne.n	8001838 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f001 f874 	bl	8002920 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f003 f848 	bl	80048d2 <USB_ReadInterrupts>
 8001842:	4603      	mov	r3, r0
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b08      	cmp	r3, #8
 800184a:	d106      	bne.n	800185a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f86f 	bl	8001930 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2208      	movs	r2, #8
 8001858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 f837 	bl	80048d2 <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800186e:	d138      	bne.n	80018e2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 f9b0 	bl	8004bda <USB_HC_ReadInterrupt>
 800187a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e025      	b.n	80018ce <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d018      	beq.n	80018c8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018ac:	d106      	bne.n	80018bc <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4619      	mov	r1, r3
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f87b 	bl	80019b0 <HCD_HC_IN_IRQHandler>
 80018ba:	e005      	b.n	80018c8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4619      	mov	r1, r3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fc0b 	bl	80020de <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d3d4      	bcc.n	8001882 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fff3 	bl	80048d2 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d101      	bne.n	80018fa <HAL_HCD_IRQHandler+0x1d6>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_HCD_IRQHandler+0x1d8>
 80018fa:	2300      	movs	r3, #0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d014      	beq.n	800192a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0210 	bic.w	r2, r2, #16
 800190e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 ff59 	bl	80027c8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0210 	orr.w	r2, r2, #16
 8001924:	619a      	str	r2, [r3, #24]
 8001926:	e000      	b.n	800192a <HAL_HCD_IRQHandler+0x206>
      return;
 8001928:	bf00      	nop
    }
  }
}
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
 80019a0:	4613      	mov	r3, r2
 80019a2:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d119      	bne.n	8001a14 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	015a      	lsls	r2, r3, #5
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ec:	461a      	mov	r2, r3
 80019ee:	2304      	movs	r3, #4
 80019f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	0151      	lsls	r1, r2, #5
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	440a      	add	r2, r1
 8001a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	60d3      	str	r3, [r2, #12]
 8001a12:	e095      	b.n	8001b40 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	015a      	lsls	r2, r3, #5
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	d109      	bne.n	8001a3e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a36:	461a      	mov	r2, r3
 8001a38:	2320      	movs	r3, #32
 8001a3a:	6093      	str	r3, [r2, #8]
 8001a3c:	e080      	b.n	8001b40 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d134      	bne.n	8001abe <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	0151      	lsls	r1, r2, #5
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	440a      	add	r2, r1
 8001a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	335d      	adds	r3, #93	; 0x5d
 8001a84:	2205      	movs	r2, #5
 8001a86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	015a      	lsls	r2, r3, #5
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a94:	461a      	mov	r2, r3
 8001a96:	2310      	movs	r3, #16
 8001a98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 f8a0 	bl	8004bfc <USB_HC_Halt>
 8001abc:	e040      	b.n	8001b40 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad4:	d134      	bne.n	8001b40 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	0151      	lsls	r1, r2, #5
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	440a      	add	r2, r1
 8001aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 f87b 	bl	8004bfc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	461a      	mov	r2, r3
 8001b14:	2310      	movs	r3, #16
 8001b16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	335d      	adds	r3, #93	; 0x5d
 8001b28:	2208      	movs	r2, #8
 8001b2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b56:	d122      	bne.n	8001b9e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	0151      	lsls	r1, r2, #5
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	440a      	add	r2, r1
 8001b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 f83a 	bl	8004bfc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	015a      	lsls	r2, r3, #5
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b94:	461a      	mov	r2, r3
 8001b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001b9c:	e29b      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	f040 80c1 	bne.w	8001d38 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d01b      	beq.n	8001bf6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3348      	adds	r3, #72	; 0x48
 8001bce:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0159      	lsls	r1, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001be2:	1ad1      	subs	r1, r2, r3
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4403      	add	r3, r0
 8001bf2:	334c      	adds	r3, #76	; 0x4c
 8001bf4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	335d      	adds	r3, #93	; 0x5d
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	3358      	adds	r3, #88	; 0x58
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	333f      	adds	r3, #63	; 0x3f
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00a      	beq.n	8001c5c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	440b      	add	r3, r1
 8001c54:	333f      	adds	r3, #63	; 0x3f
 8001c56:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d121      	bne.n	8001ca0 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	0151      	lsls	r1, r2, #5
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	440a      	add	r2, r1
 8001c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 ffb8 	bl	8004bfc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2310      	movs	r3, #16
 8001c9c:	6093      	str	r3, [r2, #8]
 8001c9e:	e034      	b.n	8001d0a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	333f      	adds	r3, #63	; 0x3f
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d129      	bne.n	8001d0a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	0151      	lsls	r1, r2, #5
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	440a      	add	r2, r1
 8001ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cd4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	335c      	adds	r3, #92	; 0x5c
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	b2d8      	uxtb	r0, r3
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	335c      	adds	r3, #92	; 0x5c
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4601      	mov	r1, r0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fe45 	bl	8001994 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	3350      	adds	r3, #80	; 0x50
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2d8      	uxtb	r0, r3
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	3350      	adds	r3, #80	; 0x50
 8001d32:	4602      	mov	r2, r0
 8001d34:	701a      	strb	r2, [r3, #0]
}
 8001d36:	e1ce      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	f040 80f1 	bne.w	8001f32 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	0151      	lsls	r1, r2, #5
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	440a      	add	r2, r1
 8001d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d6a:	f023 0302 	bic.w	r3, r3, #2
 8001d6e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	335d      	adds	r3, #93	; 0x5d
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d10a      	bne.n	8001d9c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	335c      	adds	r3, #92	; 0x5c
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e0b0      	b.n	8001efe <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	335d      	adds	r3, #93	; 0x5d
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10a      	bne.n	8001dc8 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	335c      	adds	r3, #92	; 0x5c
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e09a      	b.n	8001efe <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	335d      	adds	r3, #93	; 0x5d
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d00a      	beq.n	8001df4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	335d      	adds	r3, #93	; 0x5d
 8001dee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d156      	bne.n	8001ea2 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	3358      	adds	r3, #88	; 0x58
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1c59      	adds	r1, r3, #1
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4403      	add	r3, r0
 8001e16:	3358      	adds	r3, #88	; 0x58
 8001e18:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	3358      	adds	r3, #88	; 0x58
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d914      	bls.n	8001e5a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3358      	adds	r3, #88	; 0x58
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	335c      	adds	r3, #92	; 0x5c
 8001e54:	2204      	movs	r2, #4
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e009      	b.n	8001e6e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	335c      	adds	r3, #92	; 0x5c
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e84:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e8c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e02d      	b.n	8001efe <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	335d      	adds	r3, #93	; 0x5d
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d122      	bne.n	8001efe <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	335c      	adds	r3, #92	; 0x5c
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ee2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001eea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	b2d8      	uxtb	r0, r3
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	335c      	adds	r3, #92	; 0x5c
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	4601      	mov	r1, r0
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fd32 	bl	8001994 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001f30:	e0d1      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	2b80      	cmp	r3, #128	; 0x80
 8001f46:	d13e      	bne.n	8001fc6 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	0151      	lsls	r1, r2, #5
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	440a      	add	r2, r1
 8001f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	3358      	adds	r3, #88	; 0x58
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4403      	add	r3, r0
 8001f8a:	3358      	adds	r3, #88	; 0x58
 8001f8c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	335d      	adds	r3, #93	; 0x5d
 8001f9e:	2206      	movs	r2, #6
 8001fa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 fe25 	bl	8004bfc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	6093      	str	r3, [r2, #8]
}
 8001fc4:	e087      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d17c      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	333f      	adds	r3, #63	; 0x3f
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d122      	bne.n	8002038 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	3358      	adds	r3, #88	; 0x58
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	0151      	lsls	r1, r2, #5
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	440a      	add	r2, r1
 800201c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f002 fde3 	bl	8004bfc <USB_HC_Halt>
 8002036:	e045      	b.n	80020c4 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	333f      	adds	r3, #63	; 0x3f
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	333f      	adds	r3, #63	; 0x3f
 800205e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002060:	2b02      	cmp	r3, #2
 8002062:	d12f      	bne.n	80020c4 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3358      	adds	r3, #88	; 0x58
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d121      	bne.n	80020c4 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	335d      	adds	r3, #93	; 0x5d
 8002090:	2203      	movs	r2, #3
 8002092:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	0151      	lsls	r1, r2, #5
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	440a      	add	r2, r1
 80020aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f002 fd9c 	bl	8004bfc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d0:	461a      	mov	r2, r3
 80020d2:	2310      	movs	r3, #16
 80020d4:	6093      	str	r3, [r2, #8]
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b04      	cmp	r3, #4
 800210c:	d119      	bne.n	8002142 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	461a      	mov	r2, r3
 800211c:	2304      	movs	r3, #4
 800211e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	0151      	lsls	r1, r2, #5
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	440a      	add	r2, r1
 8002136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002140:	e33e      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b20      	cmp	r3, #32
 8002156:	d141      	bne.n	80021dc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	461a      	mov	r2, r3
 8002166:	2320      	movs	r3, #32
 8002168:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	333d      	adds	r3, #61	; 0x3d
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	f040 831f 	bne.w	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	333d      	adds	r3, #61	; 0x3d
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	335c      	adds	r3, #92	; 0x5c
 80021a6:	2202      	movs	r2, #2
 80021a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	0151      	lsls	r1, r2, #5
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	440a      	add	r2, r1
 80021c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fd11 	bl	8004bfc <USB_HC_Halt>
}
 80021da:	e2f1      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b40      	cmp	r3, #64	; 0x40
 80021f0:	d13f      	bne.n	8002272 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	335d      	adds	r3, #93	; 0x5d
 8002202:	2204      	movs	r2, #4
 8002204:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	333d      	adds	r3, #61	; 0x3d
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	3358      	adds	r3, #88	; 0x58
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	0151      	lsls	r1, r2, #5
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	440a      	add	r2, r1
 8002244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fccf 	bl	8004bfc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	461a      	mov	r2, r3
 800226c:	2340      	movs	r3, #64	; 0x40
 800226e:	6093      	str	r3, [r2, #8]
}
 8002270:	e2a6      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002288:	d122      	bne.n	80022d0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	0151      	lsls	r1, r2, #5
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	440a      	add	r2, r1
 80022a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fca1 	bl	8004bfc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	461a      	mov	r2, r3
 80022c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022cc:	6093      	str	r3, [r2, #8]
}
 80022ce:	e277      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d135      	bne.n	8002352 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	3358      	adds	r3, #88	; 0x58
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	0151      	lsls	r1, r2, #5
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	440a      	add	r2, r1
 8002310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fc69 	bl	8004bfc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	461a      	mov	r2, r3
 8002338:	2301      	movs	r3, #1
 800233a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	335d      	adds	r3, #93	; 0x5d
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
}
 8002350:	e236      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b08      	cmp	r3, #8
 8002366:	d12b      	bne.n	80023c0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	461a      	mov	r2, r3
 8002376:	2308      	movs	r3, #8
 8002378:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	0151      	lsls	r1, r2, #5
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	440a      	add	r2, r1
 8002390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 fc29 	bl	8004bfc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	335d      	adds	r3, #93	; 0x5d
 80023ba:	2205      	movs	r2, #5
 80023bc:	701a      	strb	r2, [r3, #0]
}
 80023be:	e1ff      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d155      	bne.n	8002482 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	3358      	adds	r3, #88	; 0x58
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	335d      	adds	r3, #93	; 0x5d
 80023fa:	2203      	movs	r2, #3
 80023fc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	333d      	adds	r3, #61	; 0x3d
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d114      	bne.n	800243e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	333c      	adds	r3, #60	; 0x3c
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	333d      	adds	r3, #61	; 0x3d
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	0151      	lsls	r1, r2, #5
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	440a      	add	r2, r1
 8002454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f002 fbc7 	bl	8004bfc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	2310      	movs	r3, #16
 800247e:	6093      	str	r3, [r2, #8]
}
 8002480:	e19e      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002494:	2b80      	cmp	r3, #128	; 0x80
 8002496:	d12b      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	0151      	lsls	r1, r2, #5
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	440a      	add	r2, r1
 80024ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f002 fb9a 	bl	8004bfc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	335d      	adds	r3, #93	; 0x5d
 80024d8:	2206      	movs	r2, #6
 80024da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	461a      	mov	r2, r3
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	6093      	str	r3, [r2, #8]
}
 80024ee:	e167      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002506:	d135      	bne.n	8002574 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	440a      	add	r2, r1
 800251e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fb62 	bl	8004bfc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	461a      	mov	r2, r3
 8002546:	2310      	movs	r3, #16
 8002548:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	461a      	mov	r2, r3
 8002558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800255c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	335d      	adds	r3, #93	; 0x5d
 800256e:	2208      	movs	r2, #8
 8002570:	701a      	strb	r2, [r3, #0]
}
 8002572:	e125      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b02      	cmp	r3, #2
 8002588:	f040 811a 	bne.w	80027c0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	0151      	lsls	r1, r2, #5
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	440a      	add	r2, r1
 80025a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a6:	f023 0302 	bic.w	r3, r3, #2
 80025aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	335d      	adds	r3, #93	; 0x5d
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d137      	bne.n	8002632 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	335c      	adds	r3, #92	; 0x5c
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	333f      	adds	r3, #63	; 0x3f
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d00b      	beq.n	8002604 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	333f      	adds	r3, #63	; 0x3f
 80025fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025fe:	2b03      	cmp	r3, #3
 8002600:	f040 80c5 	bne.w	800278e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3351      	adds	r3, #81	; 0x51
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2d8      	uxtb	r0, r3
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	3351      	adds	r3, #81	; 0x51
 800262c:	4602      	mov	r2, r0
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e0ad      	b.n	800278e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	335d      	adds	r3, #93	; 0x5d
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d10a      	bne.n	800265e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	335c      	adds	r3, #92	; 0x5c
 8002658:	2202      	movs	r2, #2
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e097      	b.n	800278e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	335d      	adds	r3, #93	; 0x5d
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d10a      	bne.n	800268a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	335c      	adds	r3, #92	; 0x5c
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e081      	b.n	800278e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	335d      	adds	r3, #93	; 0x5d
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b05      	cmp	r3, #5
 800269e:	d10a      	bne.n	80026b6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	335c      	adds	r3, #92	; 0x5c
 80026b0:	2205      	movs	r2, #5
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e06b      	b.n	800278e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	335d      	adds	r3, #93	; 0x5d
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d00a      	beq.n	80026e2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	335d      	adds	r3, #93	; 0x5d
 80026dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d155      	bne.n	800278e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	3358      	adds	r3, #88	; 0x58
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1c59      	adds	r1, r3, #1
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4403      	add	r3, r0
 8002704:	3358      	adds	r3, #88	; 0x58
 8002706:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	440b      	add	r3, r1
 8002716:	3358      	adds	r3, #88	; 0x58
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d914      	bls.n	8002748 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	3358      	adds	r3, #88	; 0x58
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	335c      	adds	r3, #92	; 0x5c
 8002742:	2204      	movs	r2, #4
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e009      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	335c      	adds	r3, #92	; 0x5c
 8002758:	2202      	movs	r2, #2
 800275a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002772:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800277a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	2302      	movs	r3, #2
 800279e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	b2d8      	uxtb	r0, r3
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	335c      	adds	r3, #92	; 0x5c
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4601      	mov	r1, r0
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff f8ea 	bl	8001994 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027c0:	bf00      	nop
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	0c5b      	lsrs	r3, r3, #17
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027fc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d003      	beq.n	800280c <HCD_RXQLVL_IRQHandler+0x44>
 8002804:	2b05      	cmp	r3, #5
 8002806:	f000 8082 	beq.w	800290e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800280a:	e083      	b.n	8002914 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d07f      	beq.n	8002912 <HCD_RXQLVL_IRQHandler+0x14a>
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	3344      	adds	r3, #68	; 0x44
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d074      	beq.n	8002912 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	3344      	adds	r3, #68	; 0x44
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	b292      	uxth	r2, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f002 f81c 	bl	8004880 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	3344      	adds	r3, #68	; 0x44
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	18d1      	adds	r1, r2, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4403      	add	r3, r0
 800286c:	3344      	adds	r3, #68	; 0x44
 800286e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	334c      	adds	r3, #76	; 0x4c
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	18d1      	adds	r1, r2, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4403      	add	r3, r0
 8002894:	334c      	adds	r3, #76	; 0x4c
 8002896:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HCD_RXQLVL_IRQHandler+0x154>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d031      	beq.n	8002912 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3350      	adds	r3, #80	; 0x50
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2d8      	uxtb	r0, r3
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3350      	adds	r3, #80	; 0x50
 8002908:	4602      	mov	r2, r0
 800290a:	701a      	strb	r2, [r3, #0]
      break;
 800290c:	e001      	b.n	8002912 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002912:	bf00      	nop
  }
}
 8002914:	bf00      	nop
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	1ff80000 	.word	0x1ff80000

08002920 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800294c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b02      	cmp	r3, #2
 8002956:	d113      	bne.n	8002980 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10a      	bne.n	8002978 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002970:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe ffe6 	bl	8001944 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b08      	cmp	r3, #8
 8002988:	d147      	bne.n	8002a1a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b04      	cmp	r3, #4
 800299a:	d129      	bne.n	80029f0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d113      	bne.n	80029cc <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80029aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ae:	d106      	bne.n	80029be <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2102      	movs	r1, #2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 f89c 	bl	8004af4 <USB_InitFSLSPClkSel>
 80029bc:	e011      	b.n	80029e2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 f895 	bl	8004af4 <USB_InitFSLSPClkSel>
 80029ca:	e00a      	b.n	80029e2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d106      	bne.n	80029e2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029da:	461a      	mov	r2, r3
 80029dc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80029e0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe ffc2 	bl	800196c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fe ffab 	bl	8001944 <HAL_HCD_Connect_Callback>
 80029ee:	e014      	b.n	8002a1a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fe ffc5 	bl	8001980 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002a04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a08:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a18:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d103      	bne.n	8002a2c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f043 0320 	orr.w	r3, r3, #32
 8002a2a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e11f      	b.n	8002c92 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe f878 	bl	8000b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	; 0x24
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aa4:	f001 f9de 	bl	8003e64 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a7b      	ldr	r2, [pc, #492]	; (8002c9c <HAL_I2C_Init+0x25c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d807      	bhi.n	8002ac4 <HAL_I2C_Init+0x84>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a7a      	ldr	r2, [pc, #488]	; (8002ca0 <HAL_I2C_Init+0x260>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	bf94      	ite	ls
 8002abc:	2301      	movls	r3, #1
 8002abe:	2300      	movhi	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e006      	b.n	8002ad2 <HAL_I2C_Init+0x92>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a77      	ldr	r2, [pc, #476]	; (8002ca4 <HAL_I2C_Init+0x264>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	bf94      	ite	ls
 8002acc:	2301      	movls	r3, #1
 8002ace:	2300      	movhi	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0db      	b.n	8002c92 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a72      	ldr	r2, [pc, #456]	; (8002ca8 <HAL_I2C_Init+0x268>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a64      	ldr	r2, [pc, #400]	; (8002c9c <HAL_I2C_Init+0x25c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d802      	bhi.n	8002b14 <HAL_I2C_Init+0xd4>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3301      	adds	r3, #1
 8002b12:	e009      	b.n	8002b28 <HAL_I2C_Init+0xe8>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	4a63      	ldr	r2, [pc, #396]	; (8002cac <HAL_I2C_Init+0x26c>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	3301      	adds	r3, #1
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4956      	ldr	r1, [pc, #344]	; (8002c9c <HAL_I2C_Init+0x25c>)
 8002b44:	428b      	cmp	r3, r1
 8002b46:	d80d      	bhi.n	8002b64 <HAL_I2C_Init+0x124>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e59      	subs	r1, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	bf38      	it	cc
 8002b60:	2304      	movcc	r3, #4
 8002b62:	e04f      	b.n	8002c04 <HAL_I2C_Init+0x1c4>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <HAL_I2C_Init+0x150>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	440b      	add	r3, r1
 8002b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	e012      	b.n	8002bb6 <HAL_I2C_Init+0x176>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	0099      	lsls	r1, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Init+0x17e>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e022      	b.n	8002c04 <HAL_I2C_Init+0x1c4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10e      	bne.n	8002be4 <HAL_I2C_Init+0x1a4>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e58      	subs	r0, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	440b      	add	r3, r1
 8002bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be2:	e00f      	b.n	8002c04 <HAL_I2C_Init+0x1c4>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1e58      	subs	r0, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	0099      	lsls	r1, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	6809      	ldr	r1, [r1, #0]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6911      	ldr	r1, [r2, #16]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68d2      	ldr	r2, [r2, #12]
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	000186a0 	.word	0x000186a0
 8002ca0:	001e847f 	.word	0x001e847f
 8002ca4:	003d08ff 	.word	0x003d08ff
 8002ca8:	431bde83 	.word	0x431bde83
 8002cac:	10624dd3 	.word	0x10624dd3

08002cb0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e128      	b.n	8002f14 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a90      	ldr	r2, [pc, #576]	; (8002f1c <HAL_I2S_Init+0x26c>)
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fd ff85 	bl	8000bec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002cf8:	f023 030f 	bic.w	r3, r3, #15
 8002cfc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2202      	movs	r2, #2
 8002d04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d060      	beq.n	8002dd0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d16:	2310      	movs	r3, #16
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e001      	b.n	8002d20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d802      	bhi.n	8002d2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f001 f9e2 	bl	80040f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d34:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3e:	d125      	bne.n	8002d8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	3305      	adds	r3, #5
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e01f      	b.n	8002daa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	3305      	adds	r3, #5
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	e00e      	b.n	8002daa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da6:	3305      	adds	r3, #5
 8002da8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4a5c      	ldr	r2, [pc, #368]	; (8002f20 <HAL_I2S_Init+0x270>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	e003      	b.n	8002dd8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d902      	bls.n	8002de4 <HAL_I2S_Init+0x134>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2bff      	cmp	r3, #255	; 0xff
 8002de2:	d907      	bls.n	8002df4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f043 0210 	orr.w	r2, r3, #16
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e08f      	b.n	8002f14 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	ea42 0103 	orr.w	r1, r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e12:	f023 030f 	bic.w	r3, r3, #15
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6851      	ldr	r1, [r2, #4]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68d2      	ldr	r2, [r2, #12]
 8002e24:	4311      	orrs	r1, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6992      	ldr	r2, [r2, #24]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e36:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d161      	bne.n	8002f04 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a38      	ldr	r2, [pc, #224]	; (8002f24 <HAL_I2S_Init+0x274>)
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a37      	ldr	r2, [pc, #220]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_I2S_Init+0x1a4>
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002e52:	e001      	b.n	8002e58 <HAL_I2S_Init+0x1a8>
 8002e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	4932      	ldr	r1, [pc, #200]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002e60:	428a      	cmp	r2, r1
 8002e62:	d101      	bne.n	8002e68 <HAL_I2S_Init+0x1b8>
 8002e64:	4a31      	ldr	r2, [pc, #196]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002e66:	e001      	b.n	8002e6c <HAL_I2S_Init+0x1bc>
 8002e68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002e6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e70:	f023 030f 	bic.w	r3, r3, #15
 8002e74:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_I2S_Init+0x1d4>
 8002e80:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002e82:	e001      	b.n	8002e88 <HAL_I2S_Init+0x1d8>
 8002e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e88:	2202      	movs	r2, #2
 8002e8a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_I2S_Init+0x1ea>
 8002e96:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002e98:	e001      	b.n	8002e9e <HAL_I2S_Init+0x1ee>
 8002e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eaa:	d003      	beq.n	8002eb4 <HAL_I2S_Init+0x204>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	e001      	b.n	8002ec0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	b299      	uxth	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002ed6:	4303      	orrs	r3, r0
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	430b      	orrs	r3, r1
 8002edc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <HAL_I2S_Init+0x24c>
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002efa:	e001      	b.n	8002f00 <HAL_I2S_Init+0x250>
 8002efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f00:	897a      	ldrh	r2, [r7, #10]
 8002f02:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	08003027 	.word	0x08003027
 8002f20:	cccccccd 	.word	0xcccccccd
 8002f24:	0800313d 	.word	0x0800313d
 8002f28:	40003800 	.word	0x40003800
 8002f2c:	40003400 	.word	0x40003400

08002f30 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c9a      	adds	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10e      	bne.n	8002fc0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fb0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffb8 	bl	8002f30 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	b292      	uxth	r2, r2
 8002fdc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	1c9a      	adds	r2, r3, #2
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10e      	bne.n	800301e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800300e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff93 	bl	8002f44 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b04      	cmp	r3, #4
 8003040:	d13a      	bne.n	80030b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d109      	bne.n	8003060 <I2S_IRQHandler+0x3a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	d102      	bne.n	8003060 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff ffb4 	bl	8002fc8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d126      	bne.n	80030b8 <I2S_IRQHandler+0x92>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b20      	cmp	r3, #32
 8003076:	d11f      	bne.n	80030b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003086:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ff50 	bl	8002f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d136      	bne.n	8003132 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d109      	bne.n	80030e2 <I2S_IRQHandler+0xbc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d102      	bne.n	80030e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7ff ff45 	bl	8002f6c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d122      	bne.n	8003132 <I2S_IRQHandler+0x10c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d11b      	bne.n	8003132 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003108:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	f043 0204 	orr.w	r2, r3, #4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff13 	bl	8002f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4aa2      	ldr	r2, [pc, #648]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003156:	4ba2      	ldr	r3, [pc, #648]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003158:	e001      	b.n	800315e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800315a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a9b      	ldr	r2, [pc, #620]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d101      	bne.n	8003178 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003174:	4b9a      	ldr	r3, [pc, #616]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003176:	e001      	b.n	800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003188:	d004      	beq.n	8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 8099 	bne.w	80032c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b02      	cmp	r3, #2
 800319c:	d107      	bne.n	80031ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f925 	bl	80033f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d107      	bne.n	80031c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9c8 	bl	8003558 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d13a      	bne.n	8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d035      	beq.n	8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a7e      	ldr	r2, [pc, #504]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80031e6:	4b7e      	ldr	r3, [pc, #504]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031e8:	e001      	b.n	80031ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80031ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4979      	ldr	r1, [pc, #484]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031f6:	428b      	cmp	r3, r1
 80031f8:	d101      	bne.n	80031fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80031fa:	4b79      	ldr	r3, [pc, #484]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031fc:	e001      	b.n	8003202 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80031fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003206:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003216:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f043 0202 	orr.w	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fe88 	bl	8002f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b08      	cmp	r3, #8
 8003250:	f040 80be 	bne.w	80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80b8 	beq.w	80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800326e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a59      	ldr	r2, [pc, #356]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800327a:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800327c:	e001      	b.n	8003282 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800327e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4954      	ldr	r1, [pc, #336]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800328a:	428b      	cmp	r3, r1
 800328c:	d101      	bne.n	8003292 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800328e:	4b54      	ldr	r3, [pc, #336]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003290:	e001      	b.n	8003296 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003296:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800329a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f043 0204 	orr.w	r2, r3, #4
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fe4a 	bl	8002f58 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032c4:	e084      	b.n	80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d107      	bne.n	80032e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8be 	bl	800345c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f8fd 	bl	80034f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d12f      	bne.n	8003364 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02a      	beq.n	8003364 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800331c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003328:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800332a:	e001      	b.n	8003330 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800332c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4929      	ldr	r1, [pc, #164]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003338:	428b      	cmp	r3, r1
 800333a:	d101      	bne.n	8003340 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800333e:	e001      	b.n	8003344 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003344:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003348:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f043 0202 	orr.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fdfa 	bl	8002f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b08      	cmp	r3, #8
 800336c:	d131      	bne.n	80033d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02c      	beq.n	80033d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a17      	ldr	r2, [pc, #92]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d101      	bne.n	8003386 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003384:	e001      	b.n	800338a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003386:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4912      	ldr	r1, [pc, #72]	; (80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003392:	428b      	cmp	r3, r1
 8003394:	d101      	bne.n	800339a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003398:	e001      	b.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800339a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800339e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033b2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	f043 0204 	orr.w	r2, r3, #4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fdc5 	bl	8002f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033ce:	e000      	b.n	80033d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033d0:	bf00      	nop
}
 80033d2:	bf00      	nop
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40003800 	.word	0x40003800
 80033e0:	40003400 	.word	0x40003400

080033e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	1c99      	adds	r1, r3, #2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6251      	str	r1, [r2, #36]	; 0x24
 800340a:	881a      	ldrh	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003438:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d106      	bne.n	8003452 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ffc9 	bl	80033e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	1c99      	adds	r1, r3, #2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6251      	str	r1, [r2, #36]	; 0x24
 800346e:	8819      	ldrh	r1, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <I2SEx_TxISR_I2SExt+0x90>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <I2SEx_TxISR_I2SExt+0x22>
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <I2SEx_TxISR_I2SExt+0x94>)
 800347c:	e001      	b.n	8003482 <I2SEx_TxISR_I2SExt+0x26>
 800347e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003482:	460a      	mov	r2, r1
 8003484:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d121      	bne.n	80034e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <I2SEx_TxISR_I2SExt+0x90>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d101      	bne.n	80034ac <I2SEx_TxISR_I2SExt+0x50>
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <I2SEx_TxISR_I2SExt+0x94>)
 80034aa:	e001      	b.n	80034b0 <I2SEx_TxISR_I2SExt+0x54>
 80034ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	490d      	ldr	r1, [pc, #52]	; (80034ec <I2SEx_TxISR_I2SExt+0x90>)
 80034b8:	428b      	cmp	r3, r1
 80034ba:	d101      	bne.n	80034c0 <I2SEx_TxISR_I2SExt+0x64>
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <I2SEx_TxISR_I2SExt+0x94>)
 80034be:	e001      	b.n	80034c4 <I2SEx_TxISR_I2SExt+0x68>
 80034c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d106      	bne.n	80034e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff81 	bl	80033e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40003800 	.word	0x40003800
 80034f0:	40003400 	.word	0x40003400

080034f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68d8      	ldr	r0, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	1c99      	adds	r1, r3, #2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800350c:	b282      	uxth	r2, r0
 800350e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d113      	bne.n	8003550 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003536:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ff4a 	bl	80033e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <I2SEx_RxISR_I2SExt+0x90>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d101      	bne.n	800356e <I2SEx_RxISR_I2SExt+0x16>
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <I2SEx_RxISR_I2SExt+0x94>)
 800356c:	e001      	b.n	8003572 <I2SEx_RxISR_I2SExt+0x1a>
 800356e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003572:	68d8      	ldr	r0, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	1c99      	adds	r1, r3, #2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800357e:	b282      	uxth	r2, r0
 8003580:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d121      	bne.n	80035de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <I2SEx_RxISR_I2SExt+0x90>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <I2SEx_RxISR_I2SExt+0x50>
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <I2SEx_RxISR_I2SExt+0x94>)
 80035a6:	e001      	b.n	80035ac <I2SEx_RxISR_I2SExt+0x54>
 80035a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	490d      	ldr	r1, [pc, #52]	; (80035e8 <I2SEx_RxISR_I2SExt+0x90>)
 80035b4:	428b      	cmp	r3, r1
 80035b6:	d101      	bne.n	80035bc <I2SEx_RxISR_I2SExt+0x64>
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <I2SEx_RxISR_I2SExt+0x94>)
 80035ba:	e001      	b.n	80035c0 <I2SEx_RxISR_I2SExt+0x68>
 80035bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d106      	bne.n	80035de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff03 	bl	80033e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40003800 	.word	0x40003800
 80035ec:	40003400 	.word	0x40003400

080035f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e25b      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d075      	beq.n	80036fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800360e:	4ba3      	ldr	r3, [pc, #652]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b04      	cmp	r3, #4
 8003618:	d00c      	beq.n	8003634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361a:	4ba0      	ldr	r3, [pc, #640]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003622:	2b08      	cmp	r3, #8
 8003624:	d112      	bne.n	800364c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003626:	4b9d      	ldr	r3, [pc, #628]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003632:	d10b      	bne.n	800364c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	4b99      	ldr	r3, [pc, #612]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05b      	beq.n	80036f8 <HAL_RCC_OscConfig+0x108>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d157      	bne.n	80036f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e236      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d106      	bne.n	8003664 <HAL_RCC_OscConfig+0x74>
 8003656:	4b91      	ldr	r3, [pc, #580]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a90      	ldr	r2, [pc, #576]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e01d      	b.n	80036a0 <HAL_RCC_OscConfig+0xb0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x98>
 800366e:	4b8b      	ldr	r3, [pc, #556]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a8a      	ldr	r2, [pc, #552]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b88      	ldr	r3, [pc, #544]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a87      	ldr	r2, [pc, #540]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e00b      	b.n	80036a0 <HAL_RCC_OscConfig+0xb0>
 8003688:	4b84      	ldr	r3, [pc, #528]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a83      	ldr	r2, [pc, #524]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800368e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b81      	ldr	r3, [pc, #516]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a80      	ldr	r2, [pc, #512]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800369a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800369e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fd fd14 	bl	80010d4 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b0:	f7fd fd10 	bl	80010d4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	; 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e1fb      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b76      	ldr	r3, [pc, #472]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0xc0>
 80036ce:	e014      	b.n	80036fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fd fd00 	bl	80010d4 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d8:	f7fd fcfc 	bl	80010d4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	; 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e1e7      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	4b6c      	ldr	r3, [pc, #432]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0xe8>
 80036f6:	e000      	b.n	80036fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d063      	beq.n	80037ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003706:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003712:	4b62      	ldr	r3, [pc, #392]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800371a:	2b08      	cmp	r3, #8
 800371c:	d11c      	bne.n	8003758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371e:	4b5f      	ldr	r3, [pc, #380]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d116      	bne.n	8003758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	4b5c      	ldr	r3, [pc, #368]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_RCC_OscConfig+0x152>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d001      	beq.n	8003742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e1bb      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003742:	4b56      	ldr	r3, [pc, #344]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4952      	ldr	r1, [pc, #328]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	e03a      	b.n	80037ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003760:	4b4f      	ldr	r3, [pc, #316]	; (80038a0 <HAL_RCC_OscConfig+0x2b0>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003766:	f7fd fcb5 	bl	80010d4 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376e:	f7fd fcb1 	bl	80010d4 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e19c      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003780:	4b46      	ldr	r3, [pc, #280]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4940      	ldr	r1, [pc, #256]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]
 80037a0:	e015      	b.n	80037ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a2:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <HAL_RCC_OscConfig+0x2b0>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fc94 	bl	80010d4 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b0:	f7fd fc90 	bl	80010d4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e17b      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c2:	4b36      	ldr	r3, [pc, #216]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d030      	beq.n	800383c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e2:	4b30      	ldr	r3, [pc, #192]	; (80038a4 <HAL_RCC_OscConfig+0x2b4>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7fd fc74 	bl	80010d4 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f0:	f7fd fc70 	bl	80010d4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e15b      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003802:	4b26      	ldr	r3, [pc, #152]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x200>
 800380e:	e015      	b.n	800383c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003810:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_RCC_OscConfig+0x2b4>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7fd fc5d 	bl	80010d4 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800381e:	f7fd fc59 	bl	80010d4 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e144      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	4b1a      	ldr	r3, [pc, #104]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f0      	bne.n	800381e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80a0 	beq.w	800398a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	6413      	str	r3, [r2, #64]	; 0x40
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_RCC_OscConfig+0x2ac>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_OscConfig+0x2b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d121      	bne.n	80038ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <HAL_RCC_OscConfig+0x2b8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <HAL_RCC_OscConfig+0x2b8>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003892:	f7fd fc1f 	bl	80010d4 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	e011      	b.n	80038be <HAL_RCC_OscConfig+0x2ce>
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	42470000 	.word	0x42470000
 80038a4:	42470e80 	.word	0x42470e80
 80038a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ac:	f7fd fc12 	bl	80010d4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0fd      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b81      	ldr	r3, [pc, #516]	; (8003ac4 <HAL_RCC_OscConfig+0x4d4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d106      	bne.n	80038e0 <HAL_RCC_OscConfig+0x2f0>
 80038d2:	4b7d      	ldr	r3, [pc, #500]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	4a7c      	ldr	r2, [pc, #496]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6713      	str	r3, [r2, #112]	; 0x70
 80038de:	e01c      	b.n	800391a <HAL_RCC_OscConfig+0x32a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d10c      	bne.n	8003902 <HAL_RCC_OscConfig+0x312>
 80038e8:	4b77      	ldr	r3, [pc, #476]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a76      	ldr	r2, [pc, #472]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
 80038f4:	4b74      	ldr	r3, [pc, #464]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	4a73      	ldr	r2, [pc, #460]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003900:	e00b      	b.n	800391a <HAL_RCC_OscConfig+0x32a>
 8003902:	4b71      	ldr	r3, [pc, #452]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a70      	ldr	r2, [pc, #448]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
 800390e:	4b6e      	ldr	r3, [pc, #440]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	4a6d      	ldr	r2, [pc, #436]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d015      	beq.n	800394e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003922:	f7fd fbd7 	bl	80010d4 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fd fbd3 	bl	80010d4 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0bc      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003940:	4b61      	ldr	r3, [pc, #388]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ee      	beq.n	800392a <HAL_RCC_OscConfig+0x33a>
 800394c:	e014      	b.n	8003978 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394e:	f7fd fbc1 	bl	80010d4 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f7fd fbbd 	bl	80010d4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	; 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e0a6      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396c:	4b56      	ldr	r3, [pc, #344]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ee      	bne.n	8003956 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397e:	4b52      	ldr	r3, [pc, #328]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a51      	ldr	r2, [pc, #324]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8092 	beq.w	8003ab8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003994:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b08      	cmp	r3, #8
 800399e:	d05c      	beq.n	8003a5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d141      	bne.n	8003a2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a8:	4b48      	ldr	r3, [pc, #288]	; (8003acc <HAL_RCC_OscConfig+0x4dc>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fd fb91 	bl	80010d4 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fd fb8d 	bl	80010d4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e078      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c8:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f0      	bne.n	80039b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	019b      	lsls	r3, r3, #6
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	3b01      	subs	r3, #1
 80039ee:	041b      	lsls	r3, r3, #16
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	4933      	ldr	r1, [pc, #204]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039fe:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_RCC_OscConfig+0x4dc>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fd fb66 	bl	80010d4 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fd fb62 	bl	80010d4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e04d      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x41c>
 8003a2a:	e045      	b.n	8003ab8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2c:	4b27      	ldr	r3, [pc, #156]	; (8003acc <HAL_RCC_OscConfig+0x4dc>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7fd fb4f 	bl	80010d4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7fd fb4b 	bl	80010d4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e036      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f0      	bne.n	8003a3a <HAL_RCC_OscConfig+0x44a>
 8003a58:	e02e      	b.n	8003ab8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e029      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a66:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <HAL_RCC_OscConfig+0x4d8>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d11c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d115      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a8e:	4013      	ands	r3, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10d      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	42470060 	.word	0x42470060

08003ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0cc      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b68      	ldr	r3, [pc, #416]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d90c      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b65      	ldr	r3, [pc, #404]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b63      	ldr	r3, [pc, #396]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0b8      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b24:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a58      	ldr	r2, [pc, #352]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b3c:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b48:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	494d      	ldr	r1, [pc, #308]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d044      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d119      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e07f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8e:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e06f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e067      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bae:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f023 0203 	bic.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4934      	ldr	r1, [pc, #208]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc0:	f7fd fa88 	bl	80010d4 <HAL_GetTick>
 8003bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc8:	f7fd fa84 	bl	80010d4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e04f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 020c 	and.w	r2, r3, #12
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d1eb      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d20c      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e032      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4916      	ldr	r1, [pc, #88]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	490e      	ldr	r1, [pc, #56]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c56:	f000 f821 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	5cd3      	ldrb	r3, [r2, r3]
 8003c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c6e:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fd f930 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023c00 	.word	0x40023c00
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	0800630c 	.word	0x0800630c
 8003c94:	20000004 	.word	0x20000004
 8003c98:	20000008 	.word	0x20000008

08003c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	2300      	movs	r3, #0
 8003cac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb2:	4b63      	ldr	r3, [pc, #396]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d007      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x32>
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x38>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 80b4 	bne.w	8003e30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b5e      	ldr	r3, [pc, #376]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cca:	60bb      	str	r3, [r7, #8]
       break;
 8003ccc:	e0b3      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cce:	4b5e      	ldr	r3, [pc, #376]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003cd0:	60bb      	str	r3, [r7, #8]
      break;
 8003cd2:	e0b0      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd4:	4b5a      	ldr	r3, [pc, #360]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cde:	4b58      	ldr	r3, [pc, #352]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d04a      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b55      	ldr	r3, [pc, #340]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	f04f 0400 	mov.w	r4, #0
 8003cf4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	ea03 0501 	and.w	r5, r3, r1
 8003d00:	ea04 0602 	and.w	r6, r4, r2
 8003d04:	4629      	mov	r1, r5
 8003d06:	4632      	mov	r2, r6
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	f04f 0400 	mov.w	r4, #0
 8003d10:	0154      	lsls	r4, r2, #5
 8003d12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d16:	014b      	lsls	r3, r1, #5
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	1b49      	subs	r1, r1, r5
 8003d1e:	eb62 0206 	sbc.w	r2, r2, r6
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	f04f 0400 	mov.w	r4, #0
 8003d2a:	0194      	lsls	r4, r2, #6
 8003d2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d30:	018b      	lsls	r3, r1, #6
 8003d32:	1a5b      	subs	r3, r3, r1
 8003d34:	eb64 0402 	sbc.w	r4, r4, r2
 8003d38:	f04f 0100 	mov.w	r1, #0
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	00e2      	lsls	r2, r4, #3
 8003d42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d46:	00d9      	lsls	r1, r3, #3
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4614      	mov	r4, r2
 8003d4c:	195b      	adds	r3, r3, r5
 8003d4e:	eb44 0406 	adc.w	r4, r4, r6
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	0262      	lsls	r2, r4, #9
 8003d5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d60:	0259      	lsls	r1, r3, #9
 8003d62:	460b      	mov	r3, r1
 8003d64:	4614      	mov	r4, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	4621      	mov	r1, r4
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f04f 0400 	mov.w	r4, #0
 8003d70:	461a      	mov	r2, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	f7fc fa34 	bl	80001e0 <__aeabi_uldivmod>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e049      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d80:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	099b      	lsrs	r3, r3, #6
 8003d86:	f04f 0400 	mov.w	r4, #0
 8003d8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	ea03 0501 	and.w	r5, r3, r1
 8003d96:	ea04 0602 	and.w	r6, r4, r2
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	f04f 0400 	mov.w	r4, #0
 8003da6:	0154      	lsls	r4, r2, #5
 8003da8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dac:	014b      	lsls	r3, r1, #5
 8003dae:	4619      	mov	r1, r3
 8003db0:	4622      	mov	r2, r4
 8003db2:	1b49      	subs	r1, r1, r5
 8003db4:	eb62 0206 	sbc.w	r2, r2, r6
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	f04f 0400 	mov.w	r4, #0
 8003dc0:	0194      	lsls	r4, r2, #6
 8003dc2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dc6:	018b      	lsls	r3, r1, #6
 8003dc8:	1a5b      	subs	r3, r3, r1
 8003dca:	eb64 0402 	sbc.w	r4, r4, r2
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	00e2      	lsls	r2, r4, #3
 8003dd8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ddc:	00d9      	lsls	r1, r3, #3
 8003dde:	460b      	mov	r3, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	195b      	adds	r3, r3, r5
 8003de4:	eb44 0406 	adc.w	r4, r4, r6
 8003de8:	f04f 0100 	mov.w	r1, #0
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	02a2      	lsls	r2, r4, #10
 8003df2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003df6:	0299      	lsls	r1, r3, #10
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4614      	mov	r4, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	4621      	mov	r1, r4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f04f 0400 	mov.w	r4, #0
 8003e06:	461a      	mov	r2, r3
 8003e08:	4623      	mov	r3, r4
 8003e0a:	f7fc f9e9 	bl	80001e0 <__aeabi_uldivmod>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	460c      	mov	r4, r1
 8003e12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	60bb      	str	r3, [r7, #8]
      break;
 8003e2e:	e002      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e32:	60bb      	str	r3, [r7, #8]
      break;
 8003e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e36:	68bb      	ldr	r3, [r7, #8]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e40:	40023800 	.word	0x40023800
 8003e44:	00f42400 	.word	0x00f42400
 8003e48:	007a1200 	.word	0x007a1200

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000004 	.word	0x20000004

08003e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e68:	f7ff fff0 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e6c:	4601      	mov	r1, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0a9b      	lsrs	r3, r3, #10
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4a03      	ldr	r2, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7a:	5cd3      	ldrb	r3, [r2, r3]
 8003e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	0800631c 	.word	0x0800631c

08003e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e90:	f7ff ffdc 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e94:	4601      	mov	r1, r0
 8003e96:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	0b5b      	lsrs	r3, r3, #13
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4a03      	ldr	r2, [pc, #12]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	0800631c 	.word	0x0800631c

08003eb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ec4:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_GetClockConfig+0x5c>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0203 	and.w	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_RCC_GetClockConfig+0x5c>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCC_GetClockConfig+0x5c>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_RCC_GetClockConfig+0x5c>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	08db      	lsrs	r3, r3, #3
 8003eee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <HAL_RCC_GetClockConfig+0x60>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 020f 	and.w	r2, r3, #15
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40023c00 	.word	0x40023c00

08003f18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d038      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f40:	4b68      	ldr	r3, [pc, #416]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f46:	f7fd f8c5 	bl	80010d4 <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f4e:	f7fd f8c1 	bl	80010d4 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0bd      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f60:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	071b      	lsls	r3, r3, #28
 8003f7e:	495a      	ldr	r1, [pc, #360]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f8c:	f7fd f8a2 	bl	80010d4 <HAL_GetTick>
 8003f90:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f94:	f7fd f89e 	bl	80010d4 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e09a      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fa6:	4b50      	ldr	r3, [pc, #320]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8083 	beq.w	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	4b48      	ldr	r3, [pc, #288]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	4a47      	ldr	r2, [pc, #284]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd0:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fdc:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a42      	ldr	r2, [pc, #264]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fe8:	f7fd f874 	bl	80010d4 <HAL_GetTick>
 8003fec:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ff0:	f7fd f870 	bl	80010d4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e06c      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004002:	4b3a      	ldr	r3, [pc, #232]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d02f      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	429a      	cmp	r2, r3
 800402a:	d028      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800402c:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004034:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004036:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800403c:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004042:	4a29      	ldr	r2, [pc, #164]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	d114      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004054:	f7fd f83e 	bl	80010d4 <HAL_GetTick>
 8004058:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fd f83a 	bl	80010d4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e034      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ee      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800408a:	d10d      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800408c:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800409c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a0:	4911      	ldr	r1, [pc, #68]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
 80040a6:	e005      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040b2:	6093      	str	r3, [r2, #8]
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c0:	4909      	ldr	r1, [pc, #36]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7d1a      	ldrb	r2, [r3, #20]
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80040d8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	42470068 	.word	0x42470068
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40007000 	.word	0x40007000
 80040f0:	42470e40 	.word	0x42470e40
 80040f4:	424711e0 	.word	0x424711e0

080040f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d13f      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004116:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800411e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004126:	2b01      	cmp	r3, #1
 8004128:	d131      	bne.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800412c:	617b      	str	r3, [r7, #20]
          break;
 800412e:	e031      	b.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004130:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800413c:	d109      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800413e:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004148:	4a18      	ldr	r2, [pc, #96]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e008      	b.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004152:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800417a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800417e:	0f1b      	lsrs	r3, r3, #28
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	617b      	str	r3, [r7, #20]
          break;
 800418c:	e002      	b.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
          break;
 8004192:	bf00      	nop
        }
      }
      break;
 8004194:	bf00      	nop
    }
  }
  return frequency;
 8004196:	697b      	ldr	r3, [r7, #20]
}
 8004198:	4618      	mov	r0, r3
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40023800 	.word	0x40023800
 80041a8:	00bb8000 	.word	0x00bb8000
 80041ac:	007a1200 	.word	0x007a1200
 80041b0:	00f42400 	.word	0x00f42400

080041b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e056      	b.n	8004274 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7fc fdd1 	bl	8000d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	ea42 0103 	orr.w	r1, r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	f003 0104 	and.w	r1, r3, #4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004262:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e01d      	b.n	80042ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f815 	bl	80042d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f000 f968 	bl	8004590 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b06      	cmp	r3, #6
 800430e:	d007      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d122      	bne.n	800438a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d11b      	bne.n	800438a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f06f 0202 	mvn.w	r2, #2
 800435a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8ee 	bl	8004552 <HAL_TIM_IC_CaptureCallback>
 8004376:	e005      	b.n	8004384 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f8e0 	bl	800453e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8f1 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d122      	bne.n	80043de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d11b      	bne.n	80043de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f06f 0204 	mvn.w	r2, #4
 80043ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f8c4 	bl	8004552 <HAL_TIM_IC_CaptureCallback>
 80043ca:	e005      	b.n	80043d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f8b6 	bl	800453e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8c7 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d122      	bne.n	8004432 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d11b      	bne.n	8004432 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f06f 0208 	mvn.w	r2, #8
 8004402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2204      	movs	r2, #4
 8004408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f89a 	bl	8004552 <HAL_TIM_IC_CaptureCallback>
 800441e:	e005      	b.n	800442c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f88c 	bl	800453e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f89d 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b10      	cmp	r3, #16
 800443e:	d122      	bne.n	8004486 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d11b      	bne.n	8004486 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f06f 0210 	mvn.w	r2, #16
 8004456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2208      	movs	r2, #8
 800445c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f870 	bl	8004552 <HAL_TIM_IC_CaptureCallback>
 8004472:	e005      	b.n	8004480 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f862 	bl	800453e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f873 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10e      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0201 	mvn.w	r2, #1
 80044aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fc fb0f 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d10e      	bne.n	80044de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d107      	bne.n	80044de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8e3 	bl	80046a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d10e      	bne.n	800450a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d107      	bne.n	800450a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f838 	bl	800457a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b20      	cmp	r3, #32
 8004516:	d10e      	bne.n	8004536 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b20      	cmp	r3, #32
 8004524:	d107      	bne.n	8004536 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f06f 0220 	mvn.w	r2, #32
 800452e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8ad 	bl	8004690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a34      	ldr	r2, [pc, #208]	; (8004674 <TIM_Base_SetConfig+0xe4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00f      	beq.n	80045c8 <TIM_Base_SetConfig+0x38>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0x38>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a31      	ldr	r2, [pc, #196]	; (8004678 <TIM_Base_SetConfig+0xe8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0x38>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a30      	ldr	r2, [pc, #192]	; (800467c <TIM_Base_SetConfig+0xec>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x38>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a2f      	ldr	r2, [pc, #188]	; (8004680 <TIM_Base_SetConfig+0xf0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a25      	ldr	r2, [pc, #148]	; (8004674 <TIM_Base_SetConfig+0xe4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01b      	beq.n	800461a <TIM_Base_SetConfig+0x8a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d017      	beq.n	800461a <TIM_Base_SetConfig+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <TIM_Base_SetConfig+0xe8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <TIM_Base_SetConfig+0x8a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a21      	ldr	r2, [pc, #132]	; (800467c <TIM_Base_SetConfig+0xec>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00f      	beq.n	800461a <TIM_Base_SetConfig+0x8a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a20      	ldr	r2, [pc, #128]	; (8004680 <TIM_Base_SetConfig+0xf0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00b      	beq.n	800461a <TIM_Base_SetConfig+0x8a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <TIM_Base_SetConfig+0xf4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d007      	beq.n	800461a <TIM_Base_SetConfig+0x8a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <TIM_Base_SetConfig+0xf8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d003      	beq.n	800461a <TIM_Base_SetConfig+0x8a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1d      	ldr	r2, [pc, #116]	; (800468c <TIM_Base_SetConfig+0xfc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d108      	bne.n	800462c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a08      	ldr	r2, [pc, #32]	; (8004674 <TIM_Base_SetConfig+0xe4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d103      	bne.n	8004660 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	615a      	str	r2, [r3, #20]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40010000 	.word	0x40010000
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800
 8004680:	40000c00 	.word	0x40000c00
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046b8:	b084      	sub	sp, #16
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	f107 001c 	add.w	r0, r7, #28
 80046c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d122      	bne.n	8004716 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f902 	bl	8004914 <USB_CoreReset>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e01a      	b.n	800474c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8f6 	bl	8004914 <USB_CoreReset>
 8004728:	4603      	mov	r3, r0
 800472a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
 800473e:	e005      	b.n	800474c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10b      	bne.n	800476a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f043 0206 	orr.w	r2, r3, #6
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f043 0220 	orr.w	r2, r3, #32
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004776:	b004      	add	sp, #16
 8004778:	4770      	bx	lr

0800477a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f023 0201 	bic.w	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d106      	bne.n	80047c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	e00b      	b.n	80047e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	e001      	b.n	80047e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e003      	b.n	80047e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047e0:	2032      	movs	r0, #50	; 0x32
 80047e2:	f7fc fc83 	bl	80010ec <HAL_Delay>

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	019b      	lsls	r3, r3, #6
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <USB_FlushTxFifo+0x48>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e006      	b.n	800482a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b20      	cmp	r3, #32
 8004826:	d0f0      	beq.n	800480a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	00030d40 	.word	0x00030d40

0800483c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2210      	movs	r2, #16
 800484c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3301      	adds	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <USB_FlushRxFifo+0x40>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e006      	b.n	800486e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b10      	cmp	r3, #16
 800486a:	d0f0      	beq.n	800484e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	00030d40 	.word	0x00030d40

08004880 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004880:	b480      	push	{r7}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	3303      	adds	r3, #3
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e00b      	b.n	80048bc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	3304      	adds	r3, #4
 80048b4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d3ef      	bcc.n	80048a4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80048c4:	69fb      	ldr	r3, [r7, #28]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3724      	adds	r7, #36	; 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4013      	ands	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0301 	and.w	r3, r3, #1
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3301      	adds	r3, #1
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a13      	ldr	r2, [pc, #76]	; (8004978 <USB_CoreReset+0x64>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e01b      	b.n	800496a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	daf2      	bge.n	8004920 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f043 0201 	orr.w	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <USB_CoreReset+0x64>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e006      	b.n	800496a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d0f0      	beq.n	800494a <USB_CoreReset+0x36>

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	00030d40 	.word	0x00030d40

0800497c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800497c:	b084      	sub	sp, #16
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	f107 001c 	add.w	r0, r7, #28
 800498a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004998:	461a      	mov	r2, r3
 800499a:	2300      	movs	r3, #0
 800499c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d018      	beq.n	8004a00 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d10a      	bne.n	80049ea <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e014      	b.n	8004a14 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e009      	b.n	8004a14 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a0e:	f023 0304 	bic.w	r3, r3, #4
 8004a12:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004a14:	2110      	movs	r1, #16
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff feea 	bl	80047f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff0d 	bl	800483c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e015      	b.n	8004a54 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	461a      	mov	r2, r3
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3301      	adds	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d3e5      	bcc.n	8004a28 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f882 	bl	8004b68 <USB_DriveVbus>

  HAL_Delay(200U);
 8004a64:	20c8      	movs	r0, #200	; 0xc8
 8004a66:	f7fc fb41 	bl	80010ec <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f04f 32ff 	mov.w	r2, #4294967295
 8004a76:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a14      	ldr	r2, [pc, #80]	; (8004ae0 <USB_HostInit+0x164>)
 8004a90:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <USB_HostInit+0x168>)
 8004a96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a9a:	e009      	b.n	8004ab0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2280      	movs	r2, #128	; 0x80
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <USB_HostInit+0x16c>)
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a10      	ldr	r2, [pc, #64]	; (8004aec <USB_HostInit+0x170>)
 8004aac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f043 0210 	orr.w	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <USB_HostInit+0x174>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ada:	b004      	add	sp, #16
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	01000200 	.word	0x01000200
 8004ae4:	00e00300 	.word	0x00e00300
 8004ae8:	00600080 	.word	0x00600080
 8004aec:	004000e0 	.word	0x004000e0
 8004af0:	a3200008 	.word	0xa3200008

08004af4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d107      	bne.n	8004b46 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b42:	6053      	str	r3, [r2, #4]
 8004b44:	e009      	b.n	8004b5a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d106      	bne.n	8004b5a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b52:	461a      	mov	r2, r3
 8004b54:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b58:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <USB_DriveVbus+0x44>
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d106      	bne.n	8004bac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ba6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004baa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb6:	d109      	bne.n	8004bcc <USB_DriveVbus+0x64>
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	b29b      	uxth	r3, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	0c9b      	lsrs	r3, r3, #18
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <USB_HC_Halt+0x3a>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d16c      	bne.n	8004d10 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	0151      	lsls	r1, r2, #5
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	440a      	add	r2, r1
 8004c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c54:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d143      	bne.n	8004cea <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ca0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cc0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cce:	d81d      	bhi.n	8004d0c <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ce6:	d0ec      	beq.n	8004cc2 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ce8:	e080      	b.n	8004dec <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d08:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d0a:	e06f      	b.n	8004dec <USB_HC_Halt+0x1f0>
          break;
 8004d0c:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d0e:	e06d      	b.n	8004dec <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d2e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d143      	bne.n	8004dc8 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d5e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d9e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	3301      	adds	r3, #1
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dac:	d81d      	bhi.n	8004dea <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc4:	d0ec      	beq.n	8004da0 <USB_HC_Halt+0x1a4>
 8004dc6:	e011      	b.n	8004dec <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	e000      	b.n	8004dec <USB_HC_Halt+0x1f0>
          break;
 8004dea:	bf00      	nop
    }
  }

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	4603      	mov	r3, r0
 8004e02:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e0c:	2b84      	cmp	r3, #132	; 0x84
 8004e0e:	d005      	beq.n	8004e1c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	3303      	adds	r3, #3
 8004e1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e2e:	f000 fad1 	bl	80053d4 <vTaskStartScheduler>
  
  return osOK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3a:	b089      	sub	sp, #36	; 0x24
 8004e3c:	af04      	add	r7, sp, #16
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d020      	beq.n	8004e8c <osThreadCreate+0x54>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01c      	beq.n	8004e8c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685c      	ldr	r4, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681d      	ldr	r5, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691e      	ldr	r6, [r3, #16]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff ffc8 	bl	8004dfa <makeFreeRtosPriority>
 8004e6a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e74:	9202      	str	r2, [sp, #8]
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	9100      	str	r1, [sp, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4620      	mov	r0, r4
 8004e82:	f000 f8ed 	bl	8005060 <xTaskCreateStatic>
 8004e86:	4603      	mov	r3, r0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e01c      	b.n	8004ec6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685c      	ldr	r4, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e98:	b29e      	uxth	r6, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ffaa 	bl	8004dfa <makeFreeRtosPriority>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	f107 030c 	add.w	r3, r7, #12
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	9200      	str	r2, [sp, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	4632      	mov	r2, r6
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f92b 	bl	8005112 <xTaskCreate>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d001      	beq.n	8004ec6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e000      	b.n	8004ec8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ed0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <osDelay+0x16>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	e000      	b.n	8004ee8 <osDelay+0x18>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fa3f 	bl	800536c <vTaskDelay>
  
  return osOK;
 8004eee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f103 0208 	add.w	r2, r3, #8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f103 0208 	add.w	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f103 0208 	add.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d103      	bne.n	8004fba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e00c      	b.n	8004fd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e002      	b.n	8004fc8 <vListInsert+0x2e>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d2f6      	bcs.n	8004fc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	601a      	str	r2, [r3, #0]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6892      	ldr	r2, [r2, #8]
 8005022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6852      	ldr	r2, [r2, #4]
 800502c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	d103      	bne.n	8005040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	; 0x38
 8005064:	af04      	add	r7, sp, #16
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	623b      	str	r3, [r7, #32]
 8005086:	e7fe      	b.n	8005086 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <xTaskCreateStatic+0x42>
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	e7fe      	b.n	80050a0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050a2:	2354      	movs	r3, #84	; 0x54
 80050a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b54      	cmp	r3, #84	; 0x54
 80050aa:	d009      	beq.n	80050c0 <xTaskCreateStatic+0x60>
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	e7fe      	b.n	80050be <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01e      	beq.n	8005104 <xTaskCreateStatic+0xa4>
 80050c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01b      	beq.n	8005104 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050de:	2300      	movs	r3, #0
 80050e0:	9303      	str	r3, [sp, #12]
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	9302      	str	r3, [sp, #8]
 80050e6:	f107 0314 	add.w	r3, r7, #20
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f850 	bl	800519c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050fe:	f000 f8cb 	bl	8005298 <prvAddNewTaskToReadyList>
 8005102:	e001      	b.n	8005108 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005108:	697b      	ldr	r3, [r7, #20]
	}
 800510a:	4618      	mov	r0, r3
 800510c:	3728      	adds	r7, #40	; 0x28
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005112:	b580      	push	{r7, lr}
 8005114:	b08c      	sub	sp, #48	; 0x30
 8005116:	af04      	add	r7, sp, #16
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4618      	mov	r0, r3
 8005128:	f000 feb4 	bl	8005e94 <pvPortMalloc>
 800512c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00e      	beq.n	8005152 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005134:	2054      	movs	r0, #84	; 0x54
 8005136:	f000 fead 	bl	8005e94 <pvPortMalloc>
 800513a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
 8005148:	e005      	b.n	8005156 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800514a:	6978      	ldr	r0, [r7, #20]
 800514c:	f000 ff64 	bl	8006018 <vPortFree>
 8005150:	e001      	b.n	8005156 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d017      	beq.n	800518c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	2300      	movs	r3, #0
 8005168:	9303      	str	r3, [sp, #12]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	9302      	str	r3, [sp, #8]
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f80e 	bl	800519c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005180:	69f8      	ldr	r0, [r7, #28]
 8005182:	f000 f889 	bl	8005298 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005186:	2301      	movs	r3, #1
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	e002      	b.n	8005192 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
 8005190:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005192:	69bb      	ldr	r3, [r7, #24]
	}
 8005194:	4618      	mov	r0, r3
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051b4:	3b01      	subs	r3, #1
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f023 0307 	bic.w	r3, r3, #7
 80051c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <prvInitialiseNewTask+0x46>
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	e7fe      	b.n	80051e0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	e012      	b.n	800520e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	7819      	ldrb	r1, [r3, #0]
 80051f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	3334      	adds	r3, #52	; 0x34
 80051f8:	460a      	mov	r2, r1
 80051fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	3301      	adds	r3, #1
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	2b0f      	cmp	r3, #15
 8005212:	d9e9      	bls.n	80051e8 <prvInitialiseNewTask+0x4c>
 8005214:	e000      	b.n	8005218 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005216:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	2b06      	cmp	r3, #6
 8005224:	d901      	bls.n	800522a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005226:	2306      	movs	r3, #6
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800522e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	2200      	movs	r2, #0
 800523a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	3304      	adds	r3, #4
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fe79 	bl	8004f38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	3318      	adds	r3, #24
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff fe74 	bl	8004f38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005254:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	f1c3 0207 	rsb	r2, r3, #7
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2200      	movs	r2, #0
 800526a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	69b8      	ldr	r0, [r7, #24]
 800527a:	f000 fc07 	bl	8005a8c <pxPortInitialiseStack>
 800527e:	4602      	mov	r2, r0
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005290:	bf00      	nop
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052a0:	f000 fd1c 	bl	8005cdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052a4:	4b2a      	ldr	r3, [pc, #168]	; (8005350 <prvAddNewTaskToReadyList+0xb8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	4a29      	ldr	r2, [pc, #164]	; (8005350 <prvAddNewTaskToReadyList+0xb8>)
 80052ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052ae:	4b29      	ldr	r3, [pc, #164]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052b6:	4a27      	ldr	r2, [pc, #156]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052bc:	4b24      	ldr	r3, [pc, #144]	; (8005350 <prvAddNewTaskToReadyList+0xb8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d110      	bne.n	80052e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052c4:	f000 fabc 	bl	8005840 <prvInitialiseTaskLists>
 80052c8:	e00d      	b.n	80052e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052ca:	4b23      	ldr	r3, [pc, #140]	; (8005358 <prvAddNewTaskToReadyList+0xc0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052d2:	4b20      	ldr	r3, [pc, #128]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	429a      	cmp	r2, r3
 80052de:	d802      	bhi.n	80052e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052e0:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052e6:	4b1d      	ldr	r3, [pc, #116]	; (800535c <prvAddNewTaskToReadyList+0xc4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3301      	adds	r3, #1
 80052ec:	4a1b      	ldr	r2, [pc, #108]	; (800535c <prvAddNewTaskToReadyList+0xc4>)
 80052ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	2201      	movs	r2, #1
 80052f6:	409a      	lsls	r2, r3
 80052f8:	4b19      	ldr	r3, [pc, #100]	; (8005360 <prvAddNewTaskToReadyList+0xc8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	4a18      	ldr	r2, [pc, #96]	; (8005360 <prvAddNewTaskToReadyList+0xc8>)
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4a15      	ldr	r2, [pc, #84]	; (8005364 <prvAddNewTaskToReadyList+0xcc>)
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7ff fe1a 	bl	8004f52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800531e:	f000 fd0b 	bl	8005d38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <prvAddNewTaskToReadyList+0xc0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00e      	beq.n	8005348 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	429a      	cmp	r2, r3
 8005336:	d207      	bcs.n	8005348 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <prvAddNewTaskToReadyList+0xd0>)
 800533a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20000384 	.word	0x20000384
 8005354:	20000284 	.word	0x20000284
 8005358:	20000390 	.word	0x20000390
 800535c:	200003a0 	.word	0x200003a0
 8005360:	2000038c 	.word	0x2000038c
 8005364:	20000288 	.word	0x20000288
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <vTaskDelay+0x60>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <vTaskDelay+0x2e>
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	e7fe      	b.n	8005398 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800539a:	f000 f879 	bl	8005490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800539e:	2100      	movs	r1, #0
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fb0d 	bl	80059c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053a6:	f000 f881 	bl	80054ac <xTaskResumeAll>
 80053aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d107      	bne.n	80053c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80053b2:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <vTaskDelay+0x64>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200003ac 	.word	0x200003ac
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053e2:	463a      	mov	r2, r7
 80053e4:	1d39      	adds	r1, r7, #4
 80053e6:	f107 0308 	add.w	r3, r7, #8
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fb f878 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	9202      	str	r2, [sp, #8]
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2300      	movs	r3, #0
 8005400:	460a      	mov	r2, r1
 8005402:	491d      	ldr	r1, [pc, #116]	; (8005478 <vTaskStartScheduler+0xa4>)
 8005404:	481d      	ldr	r0, [pc, #116]	; (800547c <vTaskStartScheduler+0xa8>)
 8005406:	f7ff fe2b 	bl	8005060 <xTaskCreateStatic>
 800540a:	4602      	mov	r2, r0
 800540c:	4b1c      	ldr	r3, [pc, #112]	; (8005480 <vTaskStartScheduler+0xac>)
 800540e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <vTaskStartScheduler+0xac>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005418:	2301      	movs	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e001      	b.n	8005422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d115      	bne.n	8005454 <vTaskStartScheduler+0x80>
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800543a:	4b12      	ldr	r3, [pc, #72]	; (8005484 <vTaskStartScheduler+0xb0>)
 800543c:	f04f 32ff 	mov.w	r2, #4294967295
 8005440:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <vTaskStartScheduler+0xb4>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <vTaskStartScheduler+0xb8>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800544e:	f000 fba7 	bl	8005ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005452:	e00d      	b.n	8005470 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d109      	bne.n	8005470 <vTaskStartScheduler+0x9c>
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	e7fe      	b.n	800546e <vTaskStartScheduler+0x9a>
}
 8005470:	bf00      	nop
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	08006304 	.word	0x08006304
 800547c:	08005811 	.word	0x08005811
 8005480:	200003a8 	.word	0x200003a8
 8005484:	200003a4 	.word	0x200003a4
 8005488:	20000390 	.word	0x20000390
 800548c:	20000388 	.word	0x20000388

08005490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005494:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <vTaskSuspendAll+0x18>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	4a03      	ldr	r2, [pc, #12]	; (80054a8 <vTaskSuspendAll+0x18>)
 800549c:	6013      	str	r3, [r2, #0]
}
 800549e:	bf00      	nop
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	200003ac 	.word	0x200003ac

080054ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ba:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <xTaskResumeAll+0x114>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <xTaskResumeAll+0x2a>
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	e7fe      	b.n	80054d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054d6:	f000 fc01 	bl	8005cdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054da:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <xTaskResumeAll+0x114>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3b01      	subs	r3, #1
 80054e0:	4a37      	ldr	r2, [pc, #220]	; (80055c0 <xTaskResumeAll+0x114>)
 80054e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054e4:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <xTaskResumeAll+0x114>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d161      	bne.n	80055b0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054ec:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <xTaskResumeAll+0x118>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d05d      	beq.n	80055b0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054f4:	e02e      	b.n	8005554 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054f6:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <xTaskResumeAll+0x11c>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3318      	adds	r3, #24
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fd82 	bl	800500c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3304      	adds	r3, #4
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fd7d 	bl	800500c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	2201      	movs	r2, #1
 8005518:	409a      	lsls	r2, r3
 800551a:	4b2c      	ldr	r3, [pc, #176]	; (80055cc <xTaskResumeAll+0x120>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4313      	orrs	r3, r2
 8005520:	4a2a      	ldr	r2, [pc, #168]	; (80055cc <xTaskResumeAll+0x120>)
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4a27      	ldr	r2, [pc, #156]	; (80055d0 <xTaskResumeAll+0x124>)
 8005532:	441a      	add	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3304      	adds	r3, #4
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f7ff fd09 	bl	8004f52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <xTaskResumeAll+0x128>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800554e:	4b22      	ldr	r3, [pc, #136]	; (80055d8 <xTaskResumeAll+0x12c>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005554:	4b1c      	ldr	r3, [pc, #112]	; (80055c8 <xTaskResumeAll+0x11c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1cc      	bne.n	80054f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005562:	f000 fa07 	bl	8005974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <xTaskResumeAll+0x130>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d010      	beq.n	8005594 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005572:	f000 f837 	bl	80055e4 <xTaskIncrementTick>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800557c:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <xTaskResumeAll+0x12c>)
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3b01      	subs	r3, #1
 8005586:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f1      	bne.n	8005572 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <xTaskResumeAll+0x130>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005594:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <xTaskResumeAll+0x12c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800559c:	2301      	movs	r3, #1
 800559e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055a0:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <xTaskResumeAll+0x134>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055b0:	f000 fbc2 	bl	8005d38 <vPortExitCritical>

	return xAlreadyYielded;
 80055b4:	68bb      	ldr	r3, [r7, #8]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	200003ac 	.word	0x200003ac
 80055c4:	20000384 	.word	0x20000384
 80055c8:	20000344 	.word	0x20000344
 80055cc:	2000038c 	.word	0x2000038c
 80055d0:	20000288 	.word	0x20000288
 80055d4:	20000284 	.word	0x20000284
 80055d8:	20000398 	.word	0x20000398
 80055dc:	20000394 	.word	0x20000394
 80055e0:	e000ed04 	.word	0xe000ed04

080055e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ee:	4b50      	ldr	r3, [pc, #320]	; (8005730 <xTaskIncrementTick+0x14c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f040 808c 	bne.w	8005710 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055f8:	4b4e      	ldr	r3, [pc, #312]	; (8005734 <xTaskIncrementTick+0x150>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3301      	adds	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005600:	4a4c      	ldr	r2, [pc, #304]	; (8005734 <xTaskIncrementTick+0x150>)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d11f      	bne.n	800564c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800560c:	4b4a      	ldr	r3, [pc, #296]	; (8005738 <xTaskIncrementTick+0x154>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <xTaskIncrementTick+0x46>
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	e7fe      	b.n	8005628 <xTaskIncrementTick+0x44>
 800562a:	4b43      	ldr	r3, [pc, #268]	; (8005738 <xTaskIncrementTick+0x154>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	4b42      	ldr	r3, [pc, #264]	; (800573c <xTaskIncrementTick+0x158>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a40      	ldr	r2, [pc, #256]	; (8005738 <xTaskIncrementTick+0x154>)
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	4a40      	ldr	r2, [pc, #256]	; (800573c <xTaskIncrementTick+0x158>)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	4b40      	ldr	r3, [pc, #256]	; (8005740 <xTaskIncrementTick+0x15c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a3e      	ldr	r2, [pc, #248]	; (8005740 <xTaskIncrementTick+0x15c>)
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	f000 f994 	bl	8005974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800564c:	4b3d      	ldr	r3, [pc, #244]	; (8005744 <xTaskIncrementTick+0x160>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	d34d      	bcc.n	80056f2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005656:	4b38      	ldr	r3, [pc, #224]	; (8005738 <xTaskIncrementTick+0x154>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <xTaskIncrementTick+0x80>
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <xTaskIncrementTick+0x82>
 8005664:	2300      	movs	r3, #0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800566a:	4b36      	ldr	r3, [pc, #216]	; (8005744 <xTaskIncrementTick+0x160>)
 800566c:	f04f 32ff 	mov.w	r2, #4294967295
 8005670:	601a      	str	r2, [r3, #0]
					break;
 8005672:	e03e      	b.n	80056f2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005674:	4b30      	ldr	r3, [pc, #192]	; (8005738 <xTaskIncrementTick+0x154>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d203      	bcs.n	8005694 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800568c:	4a2d      	ldr	r2, [pc, #180]	; (8005744 <xTaskIncrementTick+0x160>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6013      	str	r3, [r2, #0]
						break;
 8005692:	e02e      	b.n	80056f2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	3304      	adds	r3, #4
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fcb7 	bl	800500c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d004      	beq.n	80056b0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3318      	adds	r3, #24
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fcae 	bl	800500c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	2201      	movs	r2, #1
 80056b6:	409a      	lsls	r2, r3
 80056b8:	4b23      	ldr	r3, [pc, #140]	; (8005748 <xTaskIncrementTick+0x164>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4313      	orrs	r3, r2
 80056be:	4a22      	ldr	r2, [pc, #136]	; (8005748 <xTaskIncrementTick+0x164>)
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4a1f      	ldr	r2, [pc, #124]	; (800574c <xTaskIncrementTick+0x168>)
 80056d0:	441a      	add	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4619      	mov	r1, r3
 80056d8:	4610      	mov	r0, r2
 80056da:	f7ff fc3a 	bl	8004f52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e2:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <xTaskIncrementTick+0x16c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d3b4      	bcc.n	8005656 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80056ec:	2301      	movs	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056f0:	e7b1      	b.n	8005656 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056f2:	4b17      	ldr	r3, [pc, #92]	; (8005750 <xTaskIncrementTick+0x16c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	4914      	ldr	r1, [pc, #80]	; (800574c <xTaskIncrementTick+0x168>)
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d907      	bls.n	800571a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800570a:	2301      	movs	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	e004      	b.n	800571a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <xTaskIncrementTick+0x170>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <xTaskIncrementTick+0x170>)
 8005718:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <xTaskIncrementTick+0x174>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005722:	2301      	movs	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005726:	697b      	ldr	r3, [r7, #20]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	200003ac 	.word	0x200003ac
 8005734:	20000388 	.word	0x20000388
 8005738:	2000033c 	.word	0x2000033c
 800573c:	20000340 	.word	0x20000340
 8005740:	2000039c 	.word	0x2000039c
 8005744:	200003a4 	.word	0x200003a4
 8005748:	2000038c 	.word	0x2000038c
 800574c:	20000288 	.word	0x20000288
 8005750:	20000284 	.word	0x20000284
 8005754:	20000394 	.word	0x20000394
 8005758:	20000398 	.word	0x20000398

0800575c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005762:	4b26      	ldr	r3, [pc, #152]	; (80057fc <vTaskSwitchContext+0xa0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800576a:	4b25      	ldr	r3, [pc, #148]	; (8005800 <vTaskSwitchContext+0xa4>)
 800576c:	2201      	movs	r2, #1
 800576e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005770:	e03e      	b.n	80057f0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005772:	4b23      	ldr	r3, [pc, #140]	; (8005800 <vTaskSwitchContext+0xa4>)
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005778:	4b22      	ldr	r3, [pc, #136]	; (8005804 <vTaskSwitchContext+0xa8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	fab3 f383 	clz	r3, r3
 8005784:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005786:	7afb      	ldrb	r3, [r7, #11]
 8005788:	f1c3 031f 	rsb	r3, r3, #31
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	491e      	ldr	r1, [pc, #120]	; (8005808 <vTaskSwitchContext+0xac>)
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	607b      	str	r3, [r7, #4]
 80057b4:	e7fe      	b.n	80057b4 <vTaskSwitchContext+0x58>
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4a11      	ldr	r2, [pc, #68]	; (8005808 <vTaskSwitchContext+0xac>)
 80057c2:	4413      	add	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3308      	adds	r3, #8
 80057d8:	429a      	cmp	r2, r3
 80057da:	d104      	bne.n	80057e6 <vTaskSwitchContext+0x8a>
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4a07      	ldr	r2, [pc, #28]	; (800580c <vTaskSwitchContext+0xb0>)
 80057ee:	6013      	str	r3, [r2, #0]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	200003ac 	.word	0x200003ac
 8005800:	20000398 	.word	0x20000398
 8005804:	2000038c 	.word	0x2000038c
 8005808:	20000288 	.word	0x20000288
 800580c:	20000284 	.word	0x20000284

08005810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005818:	f000 f852 	bl	80058c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <prvIdleTask+0x28>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d9f9      	bls.n	8005818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <prvIdleTask+0x2c>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005834:	e7f0      	b.n	8005818 <prvIdleTask+0x8>
 8005836:	bf00      	nop
 8005838:	20000288 	.word	0x20000288
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005846:	2300      	movs	r3, #0
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	e00c      	b.n	8005866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <prvInitialiseTaskLists+0x60>)
 8005858:	4413      	add	r3, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fb4c 	bl	8004ef8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b06      	cmp	r3, #6
 800586a:	d9ef      	bls.n	800584c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800586c:	480d      	ldr	r0, [pc, #52]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800586e:	f7ff fb43 	bl	8004ef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005872:	480d      	ldr	r0, [pc, #52]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005874:	f7ff fb40 	bl	8004ef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005878:	480c      	ldr	r0, [pc, #48]	; (80058ac <prvInitialiseTaskLists+0x6c>)
 800587a:	f7ff fb3d 	bl	8004ef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800587e:	480c      	ldr	r0, [pc, #48]	; (80058b0 <prvInitialiseTaskLists+0x70>)
 8005880:	f7ff fb3a 	bl	8004ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005884:	480b      	ldr	r0, [pc, #44]	; (80058b4 <prvInitialiseTaskLists+0x74>)
 8005886:	f7ff fb37 	bl	8004ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <prvInitialiseTaskLists+0x78>)
 800588c:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800588e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <prvInitialiseTaskLists+0x7c>)
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000288 	.word	0x20000288
 80058a4:	20000314 	.word	0x20000314
 80058a8:	20000328 	.word	0x20000328
 80058ac:	20000344 	.word	0x20000344
 80058b0:	20000358 	.word	0x20000358
 80058b4:	20000370 	.word	0x20000370
 80058b8:	2000033c 	.word	0x2000033c
 80058bc:	20000340 	.word	0x20000340

080058c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058c6:	e019      	b.n	80058fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058c8:	f000 fa08 	bl	8005cdc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <prvCheckTasksWaitingTermination+0x4c>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff fb97 	bl	800500c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <prvCheckTasksWaitingTermination+0x50>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <prvCheckTasksWaitingTermination+0x50>)
 80058e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058f2:	f000 fa21 	bl	8005d38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f80e 	bl	8005918 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e1      	bne.n	80058c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000358 	.word	0x20000358
 8005910:	20000384 	.word	0x20000384
 8005914:	2000036c 	.word	0x2000036c

08005918 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fb72 	bl	8006018 <vPortFree>
				vPortFree( pxTCB );
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fb6f 	bl	8006018 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800593a:	e017      	b.n	800596c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005942:	2b01      	cmp	r3, #1
 8005944:	d103      	bne.n	800594e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fb66 	bl	8006018 <vPortFree>
	}
 800594c:	e00e      	b.n	800596c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005954:	2b02      	cmp	r3, #2
 8005956:	d009      	beq.n	800596c <prvDeleteTCB+0x54>
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	e7fe      	b.n	800596a <prvDeleteTCB+0x52>
	}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800597a:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <prvResetNextTaskUnblockTime+0x44>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <prvResetNextTaskUnblockTime+0x14>
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <prvResetNextTaskUnblockTime+0x16>
 8005988:	2300      	movs	r3, #0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <prvResetNextTaskUnblockTime+0x48>)
 8005990:	f04f 32ff 	mov.w	r2, #4294967295
 8005994:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005996:	e008      	b.n	80059aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005998:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <prvResetNextTaskUnblockTime+0x44>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4a05      	ldr	r2, [pc, #20]	; (80059bc <prvResetNextTaskUnblockTime+0x48>)
 80059a8:	6013      	str	r3, [r2, #0]
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	2000033c 	.word	0x2000033c
 80059bc:	200003a4 	.word	0x200003a4

080059c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ca:	4b29      	ldr	r3, [pc, #164]	; (8005a70 <prvAddCurrentTaskToDelayedList+0xb0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059d0:	4b28      	ldr	r3, [pc, #160]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fb18 	bl	800500c <uxListRemove>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80059e2:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	2201      	movs	r2, #1
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43da      	mvns	r2, r3
 80059f0:	4b21      	ldr	r3, [pc, #132]	; (8005a78 <prvAddCurrentTaskToDelayedList+0xb8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4013      	ands	r3, r2
 80059f6:	4a20      	ldr	r2, [pc, #128]	; (8005a78 <prvAddCurrentTaskToDelayedList+0xb8>)
 80059f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d10a      	bne.n	8005a18 <prvAddCurrentTaskToDelayedList+0x58>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a08:	4b1a      	ldr	r3, [pc, #104]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4619      	mov	r1, r3
 8005a10:	481a      	ldr	r0, [pc, #104]	; (8005a7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a12:	f7ff fa9e 	bl	8004f52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a16:	e026      	b.n	8005a66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a20:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d209      	bcs.n	8005a44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a30:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7ff faac 	bl	8004f9a <vListInsert>
}
 8005a42:	e010      	b.n	8005a66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7ff faa2 	bl	8004f9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a56:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d202      	bcs.n	8005a66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a60:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6013      	str	r3, [r2, #0]
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000388 	.word	0x20000388
 8005a74:	20000284 	.word	0x20000284
 8005a78:	2000038c 	.word	0x2000038c
 8005a7c:	20000370 	.word	0x20000370
 8005a80:	20000340 	.word	0x20000340
 8005a84:	2000033c 	.word	0x2000033c
 8005a88:	200003a4 	.word	0x200003a4

08005a8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3b04      	subs	r3, #4
 8005a9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3b04      	subs	r3, #4
 8005aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3b04      	subs	r3, #4
 8005aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005abc:	4a0c      	ldr	r2, [pc, #48]	; (8005af0 <pxPortInitialiseStack+0x64>)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3b14      	subs	r3, #20
 8005ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3b04      	subs	r3, #4
 8005ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f06f 0202 	mvn.w	r2, #2
 8005ada:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b20      	subs	r3, #32
 8005ae0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	08005af5 	.word	0x08005af5

08005af4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005afe:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <prvTaskExitError+0x50>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b06:	d009      	beq.n	8005b1c <prvTaskExitError+0x28>
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e7fe      	b.n	8005b1a <prvTaskExitError+0x26>
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b2e:	bf00      	nop
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0fc      	beq.n	8005b30 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000010 	.word	0x20000010
	...

08005b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <pxCurrentTCBConst2>)
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	6808      	ldr	r0, [r1, #0]
 8005b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5a:	f380 8809 	msr	PSP, r0
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f380 8811 	msr	BASEPRI, r0
 8005b6a:	4770      	bx	lr
 8005b6c:	f3af 8000 	nop.w

08005b70 <pxCurrentTCBConst2>:
 8005b70:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop

08005b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b78:	4808      	ldr	r0, [pc, #32]	; (8005b9c <prvPortStartFirstTask+0x24>)
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	6800      	ldr	r0, [r0, #0]
 8005b7e:	f380 8808 	msr	MSP, r0
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8814 	msr	CONTROL, r0
 8005b8a:	b662      	cpsie	i
 8005b8c:	b661      	cpsie	f
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	df00      	svc	0
 8005b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b9a:	bf00      	nop
 8005b9c:	e000ed08 	.word	0xe000ed08

08005ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ba6:	4b44      	ldr	r3, [pc, #272]	; (8005cb8 <xPortStartScheduler+0x118>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a44      	ldr	r2, [pc, #272]	; (8005cbc <xPortStartScheduler+0x11c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d109      	bne.n	8005bc4 <xPortStartScheduler+0x24>
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	e7fe      	b.n	8005bc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bc4:	4b3c      	ldr	r3, [pc, #240]	; (8005cb8 <xPortStartScheduler+0x118>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a3d      	ldr	r2, [pc, #244]	; (8005cc0 <xPortStartScheduler+0x120>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d109      	bne.n	8005be2 <xPortStartScheduler+0x42>
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e7fe      	b.n	8005be0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005be2:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <xPortStartScheduler+0x124>)
 8005be4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	22ff      	movs	r2, #255	; 0xff
 8005bf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	4b30      	ldr	r3, [pc, #192]	; (8005cc8 <xPortStartScheduler+0x128>)
 8005c08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c0a:	4b30      	ldr	r3, [pc, #192]	; (8005ccc <xPortStartScheduler+0x12c>)
 8005c0c:	2207      	movs	r2, #7
 8005c0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c10:	e009      	b.n	8005c26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005c12:	4b2e      	ldr	r3, [pc, #184]	; (8005ccc <xPortStartScheduler+0x12c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <xPortStartScheduler+0x12c>)
 8005c1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c26:	78fb      	ldrb	r3, [r7, #3]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	d0ef      	beq.n	8005c12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c32:	4b26      	ldr	r3, [pc, #152]	; (8005ccc <xPortStartScheduler+0x12c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1c3 0307 	rsb	r3, r3, #7
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d009      	beq.n	8005c52 <xPortStartScheduler+0xb2>
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	e7fe      	b.n	8005c50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c52:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <xPortStartScheduler+0x12c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <xPortStartScheduler+0x12c>)
 8005c5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <xPortStartScheduler+0x12c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c64:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <xPortStartScheduler+0x12c>)
 8005c66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c70:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <xPortStartScheduler+0x130>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <xPortStartScheduler+0x130>)
 8005c76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c7c:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <xPortStartScheduler+0x130>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <xPortStartScheduler+0x130>)
 8005c82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c88:	f000 f8d6 	bl	8005e38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c8c:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <xPortStartScheduler+0x134>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c92:	f000 f8f5 	bl	8005e80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <xPortStartScheduler+0x138>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a0f      	ldr	r2, [pc, #60]	; (8005cd8 <xPortStartScheduler+0x138>)
 8005c9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ca0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ca2:	f7ff ff69 	bl	8005b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ca6:	f7ff fd59 	bl	800575c <vTaskSwitchContext>
	prvTaskExitError();
 8005caa:	f7ff ff23 	bl	8005af4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	e000ed00 	.word	0xe000ed00
 8005cbc:	410fc271 	.word	0x410fc271
 8005cc0:	410fc270 	.word	0x410fc270
 8005cc4:	e000e400 	.word	0xe000e400
 8005cc8:	200003b0 	.word	0x200003b0
 8005ccc:	200003b4 	.word	0x200003b4
 8005cd0:	e000ed20 	.word	0xe000ed20
 8005cd4:	20000010 	.word	0x20000010
 8005cd8:	e000ef34 	.word	0xe000ef34

08005cdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <vPortEnterCritical+0x54>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	4a0d      	ldr	r2, [pc, #52]	; (8005d30 <vPortEnterCritical+0x54>)
 8005cfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cfe:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <vPortEnterCritical+0x54>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d10e      	bne.n	8005d24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d06:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <vPortEnterCritical+0x58>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <vPortEnterCritical+0x48>
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	e7fe      	b.n	8005d22 <vPortEnterCritical+0x46>
	}
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000010 	.word	0x20000010
 8005d34:	e000ed04 	.word	0xe000ed04

08005d38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d3e:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <vPortExitCritical+0x4c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <vPortExitCritical+0x22>
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	607b      	str	r3, [r7, #4]
 8005d58:	e7fe      	b.n	8005d58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <vPortExitCritical+0x4c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <vPortExitCritical+0x4c>)
 8005d62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d64:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <vPortExitCritical+0x4c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <vPortExitCritical+0x3e>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000010 	.word	0x20000010
	...

08005d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d90:	f3ef 8009 	mrs	r0, PSP
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <pxCurrentTCBConst>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	f01e 0f10 	tst.w	lr, #16
 8005da0:	bf08      	it	eq
 8005da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005daa:	6010      	str	r0, [r2, #0]
 8005dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005db4:	f380 8811 	msr	BASEPRI, r0
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f7ff fccc 	bl	800575c <vTaskSwitchContext>
 8005dc4:	f04f 0000 	mov.w	r0, #0
 8005dc8:	f380 8811 	msr	BASEPRI, r0
 8005dcc:	bc09      	pop	{r0, r3}
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	6808      	ldr	r0, [r1, #0]
 8005dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd6:	f01e 0f10 	tst.w	lr, #16
 8005dda:	bf08      	it	eq
 8005ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005de0:	f380 8809 	msr	PSP, r0
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	f3af 8000 	nop.w

08005df0 <pxCurrentTCBConst>:
 8005df0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop

08005df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e10:	f7ff fbe8 	bl	80055e4 <xTaskIncrementTick>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e1a:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <SysTick_Handler+0x3c>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	2300      	movs	r3, #0
 8005e24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <vPortSetupTimerInterrupt+0x34>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <vPortSetupTimerInterrupt+0x38>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <vPortSetupTimerInterrupt+0x3c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <vPortSetupTimerInterrupt+0x40>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	099b      	lsrs	r3, r3, #6
 8005e54:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <vPortSetupTimerInterrupt+0x44>)
 8005e56:	3b01      	subs	r3, #1
 8005e58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e5a:	4b04      	ldr	r3, [pc, #16]	; (8005e6c <vPortSetupTimerInterrupt+0x34>)
 8005e5c:	2207      	movs	r2, #7
 8005e5e:	601a      	str	r2, [r3, #0]
}
 8005e60:	bf00      	nop
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	e000e010 	.word	0xe000e010
 8005e70:	e000e018 	.word	0xe000e018
 8005e74:	20000004 	.word	0x20000004
 8005e78:	10624dd3 	.word	0x10624dd3
 8005e7c:	e000e014 	.word	0xe000e014

08005e80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e90 <vPortEnableVFP+0x10>
 8005e84:	6801      	ldr	r1, [r0, #0]
 8005e86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e8a:	6001      	str	r1, [r0, #0]
 8005e8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e8e:	bf00      	nop
 8005e90:	e000ed88 	.word	0xe000ed88

08005e94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08a      	sub	sp, #40	; 0x28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ea0:	f7ff faf6 	bl	8005490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ea4:	4b57      	ldr	r3, [pc, #348]	; (8006004 <pvPortMalloc+0x170>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005eac:	f000 f90c 	bl	80060c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005eb0:	4b55      	ldr	r3, [pc, #340]	; (8006008 <pvPortMalloc+0x174>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 808c 	bne.w	8005fd6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01c      	beq.n	8005efe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d013      	beq.n	8005efe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f023 0307 	bic.w	r3, r3, #7
 8005edc:	3308      	adds	r3, #8
 8005ede:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <pvPortMalloc+0x6a>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e7fe      	b.n	8005efc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d068      	beq.n	8005fd6 <pvPortMalloc+0x142>
 8005f04:	4b41      	ldr	r3, [pc, #260]	; (800600c <pvPortMalloc+0x178>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d863      	bhi.n	8005fd6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f0e:	4b40      	ldr	r3, [pc, #256]	; (8006010 <pvPortMalloc+0x17c>)
 8005f10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f12:	4b3f      	ldr	r3, [pc, #252]	; (8006010 <pvPortMalloc+0x17c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f18:	e004      	b.n	8005f24 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d903      	bls.n	8005f36 <pvPortMalloc+0xa2>
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f1      	bne.n	8005f1a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f36:	4b33      	ldr	r3, [pc, #204]	; (8006004 <pvPortMalloc+0x170>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d04a      	beq.n	8005fd6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2208      	movs	r2, #8
 8005f46:	4413      	add	r3, r2
 8005f48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	1ad2      	subs	r2, r2, r3
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d91e      	bls.n	8005fa0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <pvPortMalloc+0xf4>
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e7fe      	b.n	8005f86 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f9a:	69b8      	ldr	r0, [r7, #24]
 8005f9c:	f000 f8f6 	bl	800618c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fa0:	4b1a      	ldr	r3, [pc, #104]	; (800600c <pvPortMalloc+0x178>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	4a18      	ldr	r2, [pc, #96]	; (800600c <pvPortMalloc+0x178>)
 8005fac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fae:	4b17      	ldr	r3, [pc, #92]	; (800600c <pvPortMalloc+0x178>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b18      	ldr	r3, [pc, #96]	; (8006014 <pvPortMalloc+0x180>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d203      	bcs.n	8005fc2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fba:	4b14      	ldr	r3, [pc, #80]	; (800600c <pvPortMalloc+0x178>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a15      	ldr	r2, [pc, #84]	; (8006014 <pvPortMalloc+0x180>)
 8005fc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <pvPortMalloc+0x174>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fd6:	f7ff fa69 	bl	80054ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d009      	beq.n	8005ff8 <pvPortMalloc+0x164>
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	e7fe      	b.n	8005ff6 <pvPortMalloc+0x162>
	return pvReturn;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	; 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20003fc0 	.word	0x20003fc0
 8006008:	20003fcc 	.word	0x20003fcc
 800600c:	20003fc4 	.word	0x20003fc4
 8006010:	20003fb8 	.word	0x20003fb8
 8006014:	20003fc8 	.word	0x20003fc8

08006018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d046      	beq.n	80060b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800602a:	2308      	movs	r3, #8
 800602c:	425b      	negs	r3, r3
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4413      	add	r3, r2
 8006032:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	4b20      	ldr	r3, [pc, #128]	; (80060c0 <vPortFree+0xa8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <vPortFree+0x42>
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e7fe      	b.n	8006058 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <vPortFree+0x5e>
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	60bb      	str	r3, [r7, #8]
 8006074:	e7fe      	b.n	8006074 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <vPortFree+0xa8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4013      	ands	r3, r2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d019      	beq.n	80060b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d115      	bne.n	80060b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <vPortFree+0xa8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	43db      	mvns	r3, r3
 8006096:	401a      	ands	r2, r3
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800609c:	f7ff f9f8 	bl	8005490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <vPortFree+0xac>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4413      	add	r3, r2
 80060aa:	4a06      	ldr	r2, [pc, #24]	; (80060c4 <vPortFree+0xac>)
 80060ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ae:	6938      	ldr	r0, [r7, #16]
 80060b0:	f000 f86c 	bl	800618c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060b4:	f7ff f9fa 	bl	80054ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060b8:	bf00      	nop
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20003fcc 	.word	0x20003fcc
 80060c4:	20003fc4 	.word	0x20003fc4

080060c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060d4:	4b27      	ldr	r3, [pc, #156]	; (8006174 <prvHeapInit+0xac>)
 80060d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00c      	beq.n	80060fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3307      	adds	r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0307 	bic.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <prvHeapInit+0xac>)
 80060f8:	4413      	add	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006100:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <prvHeapInit+0xb0>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006106:	4b1c      	ldr	r3, [pc, #112]	; (8006178 <prvHeapInit+0xb0>)
 8006108:	2200      	movs	r2, #0
 800610a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4413      	add	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006114:	2208      	movs	r2, #8
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0307 	bic.w	r3, r3, #7
 8006122:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a15      	ldr	r2, [pc, #84]	; (800617c <prvHeapInit+0xb4>)
 8006128:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800612a:	4b14      	ldr	r3, [pc, #80]	; (800617c <prvHeapInit+0xb4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2200      	movs	r2, #0
 8006130:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <prvHeapInit+0xb4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <prvHeapInit+0xb4>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4a0a      	ldr	r2, [pc, #40]	; (8006180 <prvHeapInit+0xb8>)
 8006156:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4a09      	ldr	r2, [pc, #36]	; (8006184 <prvHeapInit+0xbc>)
 800615e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <prvHeapInit+0xc0>)
 8006162:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006166:	601a      	str	r2, [r3, #0]
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	200003b8 	.word	0x200003b8
 8006178:	20003fb8 	.word	0x20003fb8
 800617c:	20003fc0 	.word	0x20003fc0
 8006180:	20003fc8 	.word	0x20003fc8
 8006184:	20003fc4 	.word	0x20003fc4
 8006188:	20003fcc 	.word	0x20003fcc

0800618c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006194:	4b28      	ldr	r3, [pc, #160]	; (8006238 <prvInsertBlockIntoFreeList+0xac>)
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e002      	b.n	80061a0 <prvInsertBlockIntoFreeList+0x14>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d8f7      	bhi.n	800619a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	4413      	add	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d108      	bne.n	80061ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	441a      	add	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	441a      	add	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d118      	bne.n	8006214 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b15      	ldr	r3, [pc, #84]	; (800623c <prvInsertBlockIntoFreeList+0xb0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d00d      	beq.n	800620a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	441a      	add	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e008      	b.n	800621c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800620a:	4b0c      	ldr	r3, [pc, #48]	; (800623c <prvInsertBlockIntoFreeList+0xb0>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e003      	b.n	800621c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d002      	beq.n	800622a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20003fb8 	.word	0x20003fb8
 800623c:	20003fc0 	.word	0x20003fc0

08006240 <__libc_init_array>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	4e0d      	ldr	r6, [pc, #52]	; (8006278 <__libc_init_array+0x38>)
 8006244:	4c0d      	ldr	r4, [pc, #52]	; (800627c <__libc_init_array+0x3c>)
 8006246:	1ba4      	subs	r4, r4, r6
 8006248:	10a4      	asrs	r4, r4, #2
 800624a:	2500      	movs	r5, #0
 800624c:	42a5      	cmp	r5, r4
 800624e:	d109      	bne.n	8006264 <__libc_init_array+0x24>
 8006250:	4e0b      	ldr	r6, [pc, #44]	; (8006280 <__libc_init_array+0x40>)
 8006252:	4c0c      	ldr	r4, [pc, #48]	; (8006284 <__libc_init_array+0x44>)
 8006254:	f000 f820 	bl	8006298 <_init>
 8006258:	1ba4      	subs	r4, r4, r6
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	2500      	movs	r5, #0
 800625e:	42a5      	cmp	r5, r4
 8006260:	d105      	bne.n	800626e <__libc_init_array+0x2e>
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006268:	4798      	blx	r3
 800626a:	3501      	adds	r5, #1
 800626c:	e7ee      	b.n	800624c <__libc_init_array+0xc>
 800626e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006272:	4798      	blx	r3
 8006274:	3501      	adds	r5, #1
 8006276:	e7f2      	b.n	800625e <__libc_init_array+0x1e>
 8006278:	0800632c 	.word	0x0800632c
 800627c:	0800632c 	.word	0x0800632c
 8006280:	0800632c 	.word	0x0800632c
 8006284:	08006330 	.word	0x08006330

08006288 <memset>:
 8006288:	4402      	add	r2, r0
 800628a:	4603      	mov	r3, r0
 800628c:	4293      	cmp	r3, r2
 800628e:	d100      	bne.n	8006292 <memset+0xa>
 8006290:	4770      	bx	lr
 8006292:	f803 1b01 	strb.w	r1, [r3], #1
 8006296:	e7f9      	b.n	800628c <memset+0x4>

08006298 <_init>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	bf00      	nop
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr

080062a4 <_fini>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr
